/**
 * Minimal Protocol Handler Example
 * 
 * This file demonstrates how to register a minimal function-based protocol handler.
 * This approach is perfect for basic protocol handlers that just need to load calendars
 * without complex validation or update checking.
 * 
 * @example Usage in your module:
 * ```typescript
 * import { createMyProtocolLoader } from './path/to/simple-calendar-loader-example';
 * 
 * Hooks.on('seasons-stars:registerCalendarLoaders', ({ registerHandler }) => {
 *   registerHandler(createMyProtocolLoader());
 * });
 * ```
 */

import type { SeasonsStarsCalendar } from '../../src/types/external-calendar';
import type { SimpleProtocolHandler } from '../../src/types/foundry-extensions';

/**
 * Example: Basic HTTP calendar loader
 * This demonstrates the minimal implementation needed for a protocol handler
 */
export function createHttpCalendarLoader(): SimpleProtocolHandler {
  return {
    protocol: 'http',
    
    async loadCalendar(location: string): Promise<SeasonsStarsCalendar> {
      // Simple validation
      if (!location.startsWith('http://')) {
        throw new Error('Invalid HTTP URL provided');
      }
      
      try {
        console.debug(`Loading calendar from HTTP: ${location}`);
        
        const response = await fetch(location, {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
            'User-Agent': 'FoundryVTT/Seasons-and-Stars'
          },
          // 30 second timeout
          signal: AbortSignal.timeout(30000)
        });
        
        if (!response.ok) {
          throw new Error(`HTTP error: ${response.status} ${response.statusText}`);
        }
        
        const calendarData = await response.json() as SeasonsStarsCalendar;
        
        // Basic validation
        if (!calendarData?.id || !calendarData?.months || !calendarData?.weekdays) {
          throw new Error('Invalid calendar data: missing required fields');
        }
        
        console.info(`Successfully loaded calendar from HTTP: ${calendarData.id}`);
        return calendarData;
        
      } catch (error) {
        console.error(`Failed to load calendar from HTTP: ${location}`, error);
        throw error;
      }
    }
  };
}

/**
 * Example: Basic custom protocol for demo purposes
 * This shows how you might implement a custom protocol for your specific needs
 */
export function createDemoProtocolLoader(): SimpleProtocolHandler {
  return {
    protocol: 'demo',
    
    async loadCalendar(location: string): Promise<SeasonsStarsCalendar> {
      console.debug(`Demo protocol called with location: ${location}`);
      
      // For demo purposes, we'll return a simple hard-coded calendar
      // In a real implementation, you'd parse the location and load from your source
      
      const demoCalendar: SeasonsStarsCalendar = {
        id: `demo-${location}`,
        name: `Demo Calendar (${location})`,
        description: 'A calendar generated by the demo protocol handler',
        
        // Basic calendar structure
        months: [
          { name: 'January', length: 31, intercalaryDays: [] },
          { name: 'February', length: 28, intercalaryDays: [] },
          { name: 'March', length: 31, intercalaryDays: [] },
          { name: 'April', length: 30, intercalaryDays: [] },
          { name: 'May', length: 31, intercalaryDays: [] },
          { name: 'June', length: 30, intercalaryDays: [] },
          { name: 'July', length: 31, intercalaryDays: [] },
          { name: 'August', length: 31, intercalaryDays: [] },
          { name: 'September', length: 30, intercalaryDays: [] },
          { name: 'October', length: 31, intercalaryDays: [] },
          { name: 'November', length: 30, intercalaryDays: [] },
          { name: 'December', length: 31, intercalaryDays: [] }
        ],
        
        weekdays: [
          'Sunday',
          'Monday', 
          'Tuesday',
          'Wednesday',
          'Thursday',
          'Friday',
          'Saturday'
        ],
        
        // Optional calendar features
        leapYear: {
          rule: 'none'
        },
        
        yearNames: [
          { name: 'Current Era', start: 1 }
        ],
        
        seasons: [
          { name: 'Spring', startMonth: 3, startDay: 20, icon: 'üå∏' },
          { name: 'Summer', startMonth: 6, startDay: 21, icon: '‚òÄÔ∏è' },
          { name: 'Autumn', startMonth: 9, startDay: 22, icon: 'üçÇ' },
          { name: 'Winter', startMonth: 12, startDay: 21, icon: '‚ùÑÔ∏è' }
        ],
        
        moons: [
          {
            name: 'Luna',
            cycleLength: 29.5,
            phases: [
              { name: 'New Moon', length: 1, icon: 'üåë' },
              { name: 'Waxing Crescent', length: 7, icon: 'üåí' },
              { name: 'First Quarter', length: 1, icon: 'üåì' },
              { name: 'Waxing Gibbous', length: 7, icon: 'üåî' },
              { name: 'Full Moon', length: 1, icon: 'üåï' },
              { name: 'Waning Gibbous', length: 7, icon: 'üåñ' },
              { name: 'Last Quarter', length: 1, icon: 'üåó' },
              { name: 'Waning Crescent', length: 7, icon: 'üåò' }
            ]
          }
        ]
      };
      
      console.info(`Generated demo calendar: ${demoCalendar.id}`);
      return demoCalendar;
    }
  };
}

/**
 * Example: Database-based calendar loader
 * This shows how you might load calendars from a database or other data source
 */
export function createDatabaseProtocolLoader(): SimpleProtocolHandler {
  return {
    protocol: 'db',
    
    async loadCalendar(location: string): Promise<SeasonsStarsCalendar> {
      // Parse the location - could be something like "db:calendar-table/calendar-id"
      const parts = location.split('/');
      if (parts.length !== 2) {
        throw new Error('Invalid database location format. Expected: table/id');
      }
      
      const [tableName, calendarId] = parts;
      
      console.debug(`Loading calendar from database: table=${tableName}, id=${calendarId}`);
      
      try {
        // This is a mock implementation - replace with your actual database access
        const mockDatabaseQuery = async (table: string, id: string) => {
          // Simulate database delay
          await new Promise(resolve => setTimeout(resolve, 100));
          
          // Mock database response
          if (table === 'calendars' && id === 'test') {
            return {
              id: 'db-test-calendar',
              name: 'Test Calendar from Database',
              description: 'A calendar loaded from the database',
              months: [
                { name: 'Alpha', length: 30, intercalaryDays: [] },
                { name: 'Beta', length: 30, intercalaryDays: [] },
                { name: 'Gamma', length: 30, intercalaryDays: [] }
              ],
              weekdays: ['First', 'Second', 'Third', 'Fourth', 'Fifth'],
              leapYear: { rule: 'none' }
            };
          }
          
          throw new Error(`Calendar not found: ${table}/${id}`);
        };
        
        const calendarData = await mockDatabaseQuery(tableName, calendarId);
        
        // Validate the calendar data
        if (!calendarData?.id || !calendarData?.months || !calendarData?.weekdays) {
          throw new Error('Invalid calendar data from database: missing required fields');
        }
        
        console.info(`Successfully loaded calendar from database: ${calendarData.id}`);
        return calendarData as SeasonsStarsCalendar;
        
      } catch (error) {
        console.error(`Failed to load calendar from database: ${location}`, error);
        throw error;
      }
    }
  };
}

/**
 * Example: Registering multiple minimal protocol handlers at once
 */
export function registerAllMinimalLoaders() {
  Hooks.on('seasons-stars:registerCalendarLoaders', ({ registerHandler }) => {
    // Register all our minimal protocol handlers
    registerHandler(createHttpCalendarLoader());
    registerHandler(createDemoProtocolLoader());
    registerHandler(createDatabaseProtocolLoader());
    
    console.info('Registered 3 minimal protocol handlers: http, demo, db');
  });
}