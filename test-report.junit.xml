<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="931" failures="0" errors="0" time="7.74133704">
    <testsuite name="packages/core/test/api-wrapper.test.ts" timestamp="2025-07-10T02:12:14.324Z" hostname="Davids-Mac-mini.local" tests="27" failures="0" errors="0" skipped="0" time="0.007339084">
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; wrapAPIMethod &gt; should execute successful API method and log correctly" time="0.002000375">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; wrapAPIMethod &gt; should handle undefined result correctly" time="0.00017925">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; wrapAPIMethod &gt; should handle validation errors and log them" time="0.000748917">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; wrapAPIMethod &gt; should handle implementation errors and log them" time="0.00023375">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; wrapAPIMethod &gt; should convert non-Error exceptions to Error objects" time="0.000246708">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; wrapAPIMethod &gt; should work with synchronous implementations" time="0.000110208">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; validateNumber &gt; should pass for valid finite numbers" time="0.000163417">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; validateNumber &gt; should throw for non-numbers" time="0.000222583">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; validateNumber &gt; should throw for infinite numbers" time="0.000184708">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; validateString &gt; should pass for valid strings" time="0.00011425">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; validateString &gt; should throw for non-strings" time="0.00009475">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; validateString &gt; should handle empty string validation" time="0.000069625">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; validateString &gt; should default to not allowing empty strings" time="0.000045208">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; validateOptionalString &gt; should pass for valid strings" time="0.000072416">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; validateOptionalString &gt; should pass for undefined" time="0.000043834">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; validateOptionalString &gt; should throw for non-string non-undefined values" time="0.000072916">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; validateCalendarId &gt; should throw for non-empty calendar IDs with feature not implemented" time="0.000087083">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; validateCalendarId &gt; should pass for undefined" time="0.000052583">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; validateCalendarId &gt; should throw for invalid types" time="0.000056125">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; validateCalendarId &gt; should handle empty strings" time="0.000163916">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; validateCalendarDate &gt; should pass for valid calendar date objects" time="0.000129917">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; validateCalendarDate &gt; should throw for non-object dates" time="0.000141792">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; validateCalendarDate &gt; should throw for objects missing required properties" time="0.000136">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; validateCalendarDate &gt; should throw for objects with invalid property types" time="0.000425833">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; validateCalendarDate &gt; should use default parameter name" time="0.000095125">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; validation integration &gt; should work together in a complex validation scenario" time="0.000130208">
        </testcase>
        <testcase classname="packages/core/test/api-wrapper.test.ts" name="APIWrapper &gt; validation integration &gt; should fail early on first validation error" time="0.000179458">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/calendar-changed-hook.test.ts" timestamp="2025-07-10T02:12:14.326Z" hostname="Davids-Mac-mini.local" tests="6" failures="0" errors="0" skipped="0" time="0.00275775">
        <testcase classname="packages/core/test/calendar-changed-hook.test.ts" name="Seasons Warning State Management Functions &gt; should initialize with warning state false" time="0.000809833">
        </testcase>
        <testcase classname="packages/core/test/calendar-changed-hook.test.ts" name="Seasons Warning State Management Functions &gt; should allow setting warning state to true" time="0.000140125">
        </testcase>
        <testcase classname="packages/core/test/calendar-changed-hook.test.ts" name="Seasons Warning State Management Functions &gt; should allow setting warning state to false" time="0.000107667">
        </testcase>
        <testcase classname="packages/core/test/calendar-changed-hook.test.ts" name="Seasons Warning State Management Functions &gt; should reset warning state to false" time="0.000057375">
        </testcase>
        <testcase classname="packages/core/test/calendar-changed-hook.test.ts" name="Seasons Warning State Management Functions &gt; should handle multiple rapid state changes" time="0.00014975">
        </testcase>
        <testcase classname="packages/core/test/calendar-changed-hook.test.ts" name="Seasons Warning State Management Functions &gt; should test setupAPI function exists and can be called" time="0.000890792">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/calendar-click-behavior.test.ts" timestamp="2025-07-10T02:12:14.326Z" hostname="Davids-Mac-mini.local" tests="25" failures="0" errors="0" skipped="0" time="0.032757958">
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; Core Click Behavior Logic &gt; should handle normal click in setDate mode (GM)" time="0.007156666">
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; Core Click Behavior Logic &gt; should handle normal click in viewDetails mode" time="0.000553875">
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; Core Click Behavior Logic &gt; should handle Ctrl+Click override in viewDetails mode (GM)" time="0.000516458">
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; Core Click Behavior Logic &gt; should handle Cmd+Click override in viewDetails mode (GM)" time="0.000255541">
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; Core Click Behavior Logic &gt; should prevent non-GM from setting dates" time="0.000276042">
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; Core Click Behavior Logic &gt; should prevent non-GM Ctrl+Click from setting dates" time="0.000244375">
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; Intercalary Day Handling &gt; should handle intercalary day selection" time="0.00856">
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; Intercalary Day Handling &gt; should show intercalary day info in viewDetails mode" time="0.000658584">
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; Error Handling &gt; should handle setCurrentDate errors gracefully" time="0.00364625">
            <system-err>
[S&amp;S ERROR] Failed to set date Error: Test error
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-click-behavior.test.ts:276:61
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; Error Handling &gt; should handle showDateInfo errors gracefully" time="0.001863041">
            <system-err>
[S&amp;S ERROR] Failed to show date info Error: Test error
    at CalendarEngine.&lt;anonymous&gt; [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-click-behavior.test.ts:292:15[90m)[39m
    at CalendarEngine.mockCall [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at CalendarEngine.getCalendar [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at CalendarGridWidget.showDateInfo [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-grid-widget.ts:757:31[90m)[39m
    at CalendarGridWidget._onSelectDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-grid-widget.ts:656:19[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-click-behavior.test.ts:295:20
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; Error Handling &gt; should handle missing manager gracefully" time="0.00049775">
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; Error Handling &gt; should handle missing engine gracefully" time="0.000148292">
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; Edge Cases &gt; should handle invalid day numbers" time="0.000179292">
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; Edge Cases &gt; should handle missing day data" time="0.000166375">
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; Edge Cases &gt; should handle missing intercalary day name" time="0.000409208">
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; Edge Cases &gt; should handle missing current date time" time="0.000336959">
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; UI Hint Generation &gt; should generate correct GM hints in setDate mode" time="0.000859584">
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; UI Hint Generation &gt; should generate correct GM hints in viewDetails mode" time="0.0008845">
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; UI Hint Generation &gt; should generate correct player hints" time="0.001163458">
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; UI Hint Generation &gt; should handle undefined user gracefully" time="0.000250041">
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; Helper Methods &gt; should generate correct ordinal suffixes" time="0.001221042">
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; Helper Methods &gt; should format years with prefix and suffix" time="0.000162458">
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; Integration with Real Calendar Data &gt; should format year with prefix and suffix in notifications" time="0.000397417">
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; Integration with Real Calendar Data &gt; should work with calendar containing month descriptions" time="0.000228667">
        </testcase>
        <testcase classname="packages/core/test/calendar-click-behavior.test.ts" name="Calendar Click Behavior Feature &gt; Integration with Real Calendar Data &gt; should handle missing month gracefully" time="0.00024775">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/calendar-date-formatting.test.ts" timestamp="2025-07-10T02:12:14.327Z" hostname="Davids-Mac-mini.local" tests="30" failures="0" errors="0" skipped="0" time="0.012099458">
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; Basic Format Method &gt; should format date with template and options" time="0.001522166">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; Basic Format Method &gt; should format date with includeTime option" time="0.000209208">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; Basic Format Method &gt; should format date with numeric format option" time="0.00016775">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; Basic Format Method &gt; should handle intercalary days" time="0.000813333">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; String Formatting Methods &gt; should generate short string format" time="0.000149417">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; String Formatting Methods &gt; should generate short string for calendar without dateFormats" time="0.00009625">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; String Formatting Methods &gt; should generate long string format" time="0.000092083">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; String Formatting Methods &gt; should generate long string for calendar without dateFormats" time="0.000129875">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; String Formatting Methods &gt; should generate date string format" time="0.000235958">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; String Formatting Methods &gt; should generate date string for calendar without dateFormats" time="0.000089167">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; String Formatting Methods &gt; should generate time string format" time="0.000081875">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; String Formatting Methods &gt; should handle empty time string when no time present" time="0.000047">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; String Formatting Methods &gt; should generate time string for calendar without time format" time="0.000045625">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; Format Fallback Handling &gt; should fallback to basic format when template fails" time="0.00473">
            <system-out>
[S&amp;S] Date format template compilation failed: Error: Template compilation failed
    at Object.&lt;anonymous&gt; [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-date-formatting.test.ts:352:15[90m)[39m
    at Object.mockCall [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at Object.spy [as compile] [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at DateFormatter.compileAndCacheTemplate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:166:37[90m)[39m
    at DateFormatter.formatWithContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:193:37[90m)[39m
    at DateFormatter.formatWidget [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:315:17[90m)[39m
    at CalendarDate.toShortString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:165:29[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-date-formatting.test.ts:364:27
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26

            </system-out>
            <system-err>
[S&amp;S] Calendar &quot;Test Calendar&quot; has syntax errors in &quot;widgets.mini&quot; format: Template compilation failed

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; Format Fallback Handling &gt; should fallback to basic format when long string fails" time="0.000446291">
            <system-out>
[S&amp;S] Date format template compilation failed: Error: Template compilation failed
    at Object.&lt;anonymous&gt; [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-date-formatting.test.ts:373:15[90m)[39m
    at Object.mockCall [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at Object.spy [as compile] [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at DateFormatter.compileAndCacheTemplate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:166:37[90m)[39m
    at DateFormatter.formatWithContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:193:37[90m)[39m
    at DateFormatter.formatWidget [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:315:17[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:193:29[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-date-formatting.test.ts:386:27
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26

            </system-out>
            <system-err>
[S&amp;S] Calendar &quot;Test Calendar&quot; has syntax errors in &quot;widgets.main&quot; format: Template compilation failed

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; Format Fallback Handling &gt; should fallback to basic format when date string fails" time="0.0002815">
            <system-out>
[S&amp;S] Date format template compilation failed: Error: Template compilation failed
    at Object.&lt;anonymous&gt; [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-date-formatting.test.ts:395:15[90m)[39m
    at Object.mockCall [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at Object.spy [as compile] [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at DateFormatter.compileAndCacheTemplate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:166:37[90m)[39m
    at DateFormatter.formatWithContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:193:37[90m)[39m
    at DateFormatter.formatNamed [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:296:17[90m)[39m
    at CalendarDate.toDateString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:232:29[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-date-formatting.test.ts:407:27
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26

            </system-out>
            <system-err>
[S&amp;S] Calendar &quot;Test Calendar&quot; has syntax errors in &quot;date&quot; format: Template compilation failed

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; Edge Cases and Error Handling &gt; should handle invalid month index gracefully" time="0.000144375">
            <system-out>
[S&amp;S] Invalid month index: 99

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; Edge Cases and Error Handling &gt; should handle invalid weekday index gracefully" time="0.000083">
            <system-out>
[S&amp;S] Invalid weekday index: 99

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; Edge Cases and Error Handling &gt; should handle month without abbreviation" time="0.000062417">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; Edge Cases and Error Handling &gt; should handle weekday without abbreviation" time="0.000053166">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; Calendar Date Utilities &gt; should clone date with modifications" time="0.000106583">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; Calendar Date Utilities &gt; should compare dates correctly" time="0.000120584">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; Calendar Date Utilities &gt; should check date equality" time="0.000496834">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; Calendar Date Utilities &gt; should check date ordering" time="0.000095917">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; Calendar Date Utilities &gt; should convert to plain object" time="0.000322">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; Calendar Date Utilities &gt; should create date from plain object" time="0.000075125">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; Time Comparison Edge Cases &gt; should compare dates with time differences" time="0.000062625">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; Time Comparison Edge Cases &gt; should compare dates with one having no time" time="0.000045916">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; Format Name Resolution &gt; should resolve format names based on options" time="0.000123292">
        </testcase>
        <testcase classname="packages/core/test/calendar-date-formatting.test.ts" name="CalendarDate Formatting &gt; Format Name Resolution &gt; should handle time inclusion in format names" time="0.000068833">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/calendar-engine-leap-year-regression.test.ts" timestamp="2025-07-10T02:12:14.329Z" hostname="Davids-Mac-mini.local" tests="2" failures="0" errors="0" skipped="0" time="0.00359575">
        <testcase classname="packages/core/test/calendar-engine-leap-year-regression.test.ts" name="Leap Year Calculation Regression &gt; Check year 2700 length calculations" time="0.00182525">
            <system-out>

=== YEAR 2700 LENGTH ANALYSIS ===
getYearLength(2700): [33m365[39m
getMonthLengths(2700): [
  [33m31[39m, [33m28[39m, [33m31[39m, [33m30[39m, [33m31[39m,
  [33m30[39m, [33m31[39m, [33m31[39m, [33m30[39m, [33m31[39m,
  [33m30[39m, [33m31[39m
]
Sum of month lengths: [33m365[39m
isLeapYear(2700): [33mfalse[39m
getIntercalaryDays(2700): []
Base month days (from calendar def): [33m365[39m
Leap year extra days: [33m0[39m
Expected year length: [33m365[39m
✅ getYearLength matches manual calculation
✅ getYearLength matches sum of month lengths

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-leap-year-regression.test.ts" name="Leap Year Calculation Regression &gt; Simulate the exact 365-day scenario" time="0.0011965">
            <system-out>

=== SIMULATING 365-DAY SCENARIO ===
Starting year: [33m2700[39m
Starting remainingDays: [33m365[39m
Year length: [33m365[39m
remainingDays &gt;= yearLength? [33mtrue[39m
Should advance to next year? YES
After year advancement: year = [33m2701[39m , remainingDays = [33m0[39m

Month lengths for year [33m2701[39m : [
  [33m31[39m, [33m28[39m, [33m31[39m, [33m30[39m, [33m31[39m,
  [33m30[39m, [33m31[39m, [33m31[39m, [33m30[39m, [33m31[39m,
  [33m30[39m, [33m31[39m
]
Month 1 (Abadius): 31 days
  RemainingDays: 0, MonthLength: 31
  tempRemainingDays &lt; monthLength? true
  Breaking at month 1

Final result: Year 2701, Month 1, Day 1
Actual daysToDate(365): CalendarDate {
  year: [33m2701[39m,
  month: [33m1[39m,
  day: [33m1[39m,
  weekday: [33m0[39m,
  intercalary: [90mundefined[39m,
  time: [90mundefined[39m,
  calendar: {
    id: [32m&apos;golarion-pf2e&apos;[39m,
    translations: { en: [36m[Object][39m },
    worldTime: {
      interpretation: [32m&apos;epoch-based&apos;[39m,
      epochYear: [33m2700[39m,
      currentYear: [33m4725[39m
    },
    compatibility: { pf2e: [36m[Object][39m },
    year: {
      epoch: [33m2700[39m,
      currentYear: [33m4725[39m,
      prefix: [32m&apos;&apos;[39m,
      suffix: [32m&apos; AR&apos;[39m,
      startDay: [33m6[39m
    },
    leapYear: { rule: [32m&apos;gregorian&apos;[39m, month: [32m&apos;Calistril&apos;[39m, extraDays: [33m1[39m },
    months: [
      [36m[Object][39m, [36m[Object][39m,
      [36m[Object][39m, [36m[Object][39m,
      [36m[Object][39m, [36m[Object][39m,
      [36m[Object][39m, [36m[Object][39m,
      [36m[Object][39m, [36m[Object][39m,
      [36m[Object][39m, [36m[Object][39m
    ],
    weekdays: [
      [36m[Object][39m, [36m[Object][39m,
      [36m[Object][39m, [36m[Object][39m,
      [36m[Object][39m, [36m[Object][39m,
      [36m[Object][39m
    ],
    intercalary: [],
    moons: [ [36m[Object][39m ],
    seasons: [ [36m[Object][39m, [36m[Object][39m, [36m[Object][39m, [36m[Object][39m ],
    time: { hoursInDay: [33m24[39m, minutesInHour: [33m60[39m, secondsInMinute: [33m60[39m },
    variants: {
      [32m&apos;absalom-reckoning&apos;[39m: [36m[Object][39m,
      [32m&apos;imperial-calendar&apos;[39m: [36m[Object][39m,
      [32m&apos;varisian-traditional&apos;[39m: [36m[Object][39m,
      [32m&apos;earth-historical&apos;[39m: [36m[Object][39m
    }
  },
  formatter: DateFormatter {
    templateCache: Map(0) {},
    calendar: {
      id: [32m&apos;golarion-pf2e&apos;[39m,
      translations: [36m[Object][39m,
      worldTime: [36m[Object][39m,
      compatibility: [36m[Object][39m,
      year: [36m[Object][39m,
      leapYear: [36m[Object][39m,
      months: [36m[Array][39m,
      weekdays: [36m[Array][39m,
      intercalary: [],
      moons: [36m[Array][39m,
      seasons: [36m[Array][39m,
      time: [36m[Object][39m,
      variants: [36m[Object][39m
    }
  }
}

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/calendar-engine-world-creation-timestamp.test.ts" timestamp="2025-07-10T02:12:14.330Z" hostname="Davids-Mac-mini.local" tests="16" failures="0" errors="0" skipped="0" time="0.083805541">
        <testcase classname="packages/core/test/calendar-engine-world-creation-timestamp.test.ts" name="CalendarEngine - World Creation Timestamp Support &gt; Basic World Creation Timestamp Functionality &gt; should support optional world creation timestamp in worldTimeToDate" time="0.005781667">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-world-creation-timestamp.test.ts" name="CalendarEngine - World Creation Timestamp Support &gt; Basic World Creation Timestamp Functionality &gt; should maintain backward compatibility when no timestamp provided" time="0.000337833">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-world-creation-timestamp.test.ts" name="CalendarEngine - World Creation Timestamp Support &gt; Basic World Creation Timestamp Functionality &gt; should support optional world creation timestamp in dateToWorldTime" time="0.002041333">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-world-creation-timestamp.test.ts" name="CalendarEngine - World Creation Timestamp Support &gt; PF2e-Style Year Calculation Logic &gt; should calculate correct years for different world creation dates" time="0.014518417">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-world-creation-timestamp.test.ts" name="CalendarEngine - World Creation Timestamp Support &gt; PF2e-Style Year Calculation Logic &gt; should handle UTC date extraction correctly" time="0.011552292">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-world-creation-timestamp.test.ts" name="CalendarEngine - World Creation Timestamp Support &gt; Time Advancement with World Creation Timestamps &gt; should handle positive time advancement correctly" time="0.009881958">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-world-creation-timestamp.test.ts" name="CalendarEngine - World Creation Timestamp Support &gt; Time Advancement with World Creation Timestamps &gt; should handle negative time advancement correctly" time="0.003818">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-world-creation-timestamp.test.ts" name="CalendarEngine - World Creation Timestamp Support &gt; Time Advancement with World Creation Timestamps &gt; should use proper calendar year lengths for multi-year advancement" time="0.002398666">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-world-creation-timestamp.test.ts" name="CalendarEngine - World Creation Timestamp Support &gt; Round-trip Conversion with World Creation Timestamps &gt; should maintain round-trip accuracy for epoch dates" time="0.014311083">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-world-creation-timestamp.test.ts" name="CalendarEngine - World Creation Timestamp Support &gt; Round-trip Conversion with World Creation Timestamps &gt; should handle edge case where round-trip has known issue" time="0.002739417">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-world-creation-timestamp.test.ts" name="CalendarEngine - World Creation Timestamp Support &gt; Round-trip Conversion with World Creation Timestamps &gt; should handle time components correctly with world creation timestamps" time="0.003656208">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-world-creation-timestamp.test.ts" name="CalendarEngine - World Creation Timestamp Support &gt; Edge Cases and Error Handling &gt; should handle invalid world creation timestamps gracefully" time="0.001036625">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-world-creation-timestamp.test.ts" name="CalendarEngine - World Creation Timestamp Support &gt; Edge Cases and Error Handling &gt; should handle very large world creation timestamps" time="0.004025917">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-world-creation-timestamp.test.ts" name="CalendarEngine - World Creation Timestamp Support &gt; Edge Cases and Error Handling &gt; should handle very old world creation timestamps" time="0.00129525">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-world-creation-timestamp.test.ts" name="CalendarEngine - World Creation Timestamp Support &gt; Edge Cases and Error Handling &gt; should handle zero epoch calendars correctly" time="0.001678458">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-world-creation-timestamp.test.ts" name="CalendarEngine - World Creation Timestamp Support &gt; Leap Year Handling with World Creation Timestamps &gt; should handle leap year calculations correctly with world creation timestamps" time="0.003494166">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/calendar-engine-worldtime-interpretation-regression.test.ts" timestamp="2025-07-10T02:12:14.331Z" hostname="Davids-Mac-mini.local" tests="9" failures="0" errors="0" skipped="0" time="0.065029708">
        <testcase classname="packages/core/test/calendar-engine-worldtime-interpretation-regression.test.ts" name="WorldTime Interpretation Regression Tests &gt; ✅ Epoch-based interpretation works correctly (traditional fantasy)" time="0.002074583">
            <system-out>

=== EPOCH-BASED INTERPRETATION TEST ===
Epoch start: worldTime=0 → 2700/1/1
One day later: worldTime=86400 → 2700/1/2
One year later: worldTime=31622400 → 2701/1/2
✅ Epoch-based interpretation working correctly

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-worldtime-interpretation-regression.test.ts" name="WorldTime Interpretation Regression Tests &gt; ✅ Real-time-based interpretation works correctly (PF2e compatible)" time="0.017979959">
            <system-out>

=== REAL-TIME-BASED INTERPRETATION TEST ===
World creation (current time): worldTime=0 → 4725/1/1 AR
One day later: worldTime=86400 → 4725/1/2 AR
One year later: worldTime=31536000 → 4726/1/1 AR
✅ Real-time-based interpretation working correctly

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-worldtime-interpretation-regression.test.ts" name="WorldTime Interpretation Regression Tests &gt; ✅ PF2e compatibility achieved (year difference &lt;10)" time="0.003221875">
            <system-out>

=== PF2E COMPATIBILITY TEST ===
PF2e calculation: 4725 AR (2025 + 2700)
S&amp;S calculation: 4725 AR
Year difference: 0 years
✅ PF2e compatibility achieved! Year difference &lt; 10 years

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-worldtime-interpretation-regression.test.ts" name="WorldTime Interpretation Regression Tests &gt; ✅ Backward compatibility preserved (legacy calendars default to epoch-based)" time="0.000288833">
            <system-out>

=== BACKWARD COMPATIBILITY TEST ===
Legacy calendar: worldTime=0 → 2700/1/1
Epoch-based calendar: worldTime=0 → 2700/1/1
✅ Backward compatibility preserved

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-worldtime-interpretation-regression.test.ts" name="WorldTime Interpretation Regression Tests &gt; ✅ Bidirectional conversion works correctly" time="0.003825334">
            <system-out>

=== BIDIRECTIONAL CONVERSION TEST ===
Epoch round-trip: 2701/6/15 → 45792000 → 2701/6/15
Real-time round-trip: 4725/6/15 → 14256000 → 4725/6/15
✅ Bidirectional conversion working correctly

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-worldtime-interpretation-regression.test.ts" name="WorldTime Interpretation Regression Tests &gt; ✅ Universal solution works across interpretation modes" time="0.005459">
            <system-out>

=== UNIVERSAL SOLUTION TEST ===
Epoch-based: worldTime=864000 → 2700/1/11
Real-time-based: worldTime=864000 → 4725/1/11
✅ Universal solution working across all interpretation modes

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-worldtime-interpretation-regression.test.ts" name="WorldTime Interpretation Regression Tests &gt; 🐛 REGRESSION TEST: GitHub Issue #66 - Exact Pathfinder Time Calculation" time="0.0140455">
            <system-out>

=== EXACT PATHFINDER TIME CALCULATION TEST (Issue #66) ===
Expected: Pathfinder calendar should produce exact correct dates/times
Input: worldTime representing existing Pathfinder world state

--- Test Case 1: worldTime = 0 (fresh world) ---
Result: 4725/1/1 0:0:0

--- Test Case 2: worldTime = 86400 (1 day) ---
Result: 4725/1/2 0:0:0

--- Test Case 3: worldTime = 37423 (10:23:43 on day 1) ---
Result: 4725/1/1 10:23:43
✅ Pathfinder calendar should produce exact correct dates and times

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-worldtime-interpretation-regression.test.ts" name="WorldTime Interpretation Regression Tests &gt; 🐛 REGRESSION TEST: Bidirectional Conversion Exactness" time="0.004306791">
            <system-out>

=== EXACT BIDIRECTIONAL CONVERSION TEST ===
Expected: Date → WorldTime → Date should produce exactly the same date

--- Test Case: 19th Desnus, 2024 AR (10:23:00) ---
Input date: 2024/5/19 10:23:0
Converted to worldTime: -85225095420
Converted back: 2024/5/19 10:23:0
✅ Bidirectional conversion should be exactly preserved

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-engine-worldtime-interpretation-regression.test.ts" name="WorldTime Interpretation Regression Tests &gt; 🐛 REGRESSION TEST: Original GitHub Issue #20 Bug is Fixed" time="0.012737875">
            <system-out>

=== ORIGINAL BUG REGRESSION TEST ===
GitHub Issue #20: PF2e Calendar Date Mismatch
Original Problem: S&amp;S calendar stuck at epoch regardless of worldTime value
Original bug test - worldTime=0:
  PF2e expected: 4725 AR
  S&amp;S result: 4725 AR
  Year difference: 0 years
✅ REGRESSION TEST PASSED: Original bug is fixed!
✅ S&amp;S calendar now advances time correctly and matches PF2e expectations
Time advancement verification:
  worldTime=0: 4725/1/1
  worldTime=86400: 4725/1/2
  worldTime=604800: 4725/1/8
✅ Time advancement working: Calendar no longer frozen at epoch

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/calendar-engine.test.ts" timestamp="2025-07-10T02:12:14.332Z" hostname="Davids-Mac-mini.local" tests="22" failures="0" errors="0" skipped="0" time="0.114294834">
        <testcase classname="packages/core/test/calendar-engine.test.ts" name="CalendarValidator &gt; should validate gregorian calendar" time="0.098289917">
        </testcase>
        <testcase classname="packages/core/test/calendar-engine.test.ts" name="CalendarValidator &gt; should validate simple calendar" time="0.00023875">
        </testcase>
        <testcase classname="packages/core/test/calendar-engine.test.ts" name="CalendarValidator &gt; should reject invalid calendar" time="0.00011525">
        </testcase>
        <testcase classname="packages/core/test/calendar-engine.test.ts" name="CalendarEngine - Basic Operations &gt; should create engine with calendar" time="0.000314458">
        </testcase>
        <testcase classname="packages/core/test/calendar-engine.test.ts" name="CalendarEngine - Basic Operations &gt; should convert world time to date" time="0.000592">
        </testcase>
        <testcase classname="packages/core/test/calendar-engine.test.ts" name="CalendarEngine - Basic Operations &gt; should convert date to world time" time="0.000191417">
        </testcase>
        <testcase classname="packages/core/test/calendar-engine.test.ts" name="CalendarEngine - Basic Operations &gt; should add days correctly" time="0.000129375">
        </testcase>
        <testcase classname="packages/core/test/calendar-engine.test.ts" name="CalendarEngine - Basic Operations &gt; should handle month overflow when adding days" time="0.000094541">
        </testcase>
        <testcase classname="packages/core/test/calendar-engine.test.ts" name="CalendarEngine - Basic Operations &gt; should handle year overflow when adding days" time="0.000166042">
        </testcase>
        <testcase classname="packages/core/test/calendar-engine.test.ts" name="CalendarEngine - Basic Operations &gt; should add months correctly" time="0.000137709">
        </testcase>
        <testcase classname="packages/core/test/calendar-engine.test.ts" name="CalendarEngine - Basic Operations &gt; should add years correctly" time="0.000605625">
        </testcase>
        <testcase classname="packages/core/test/calendar-engine.test.ts" name="CalendarEngine - Gregorian Calendar &gt; should handle leap years correctly" time="0.000353459">
        </testcase>
        <testcase classname="packages/core/test/calendar-engine.test.ts" name="CalendarEngine - Gregorian Calendar &gt; should handle non-leap years correctly" time="0.000181834">
        </testcase>
        <testcase classname="packages/core/test/calendar-engine.test.ts" name="CalendarEngine - Gregorian Calendar &gt; should roundtrip dates correctly" time="0.000172167">
        </testcase>
        <testcase classname="packages/core/test/calendar-engine.test.ts" name="CalendarEngine - Multi-Day Intercalary Periods &gt; should validate calendar with multi-day intercalary periods" time="0.00019125">
        </testcase>
        <testcase classname="packages/core/test/calendar-engine.test.ts" name="CalendarEngine - Multi-Day Intercalary Periods &gt; should correctly calculate total year length with multi-day intercalary periods" time="0.000061333">
        </testcase>
        <testcase classname="packages/core/test/calendar-engine.test.ts" name="CalendarEngine - Multi-Day Intercalary Periods &gt; should handle date arithmetic across multi-day intercalary periods" time="0.000104792">
        </testcase>
        <testcase classname="packages/core/test/calendar-engine.test.ts" name="CalendarEngine - Multi-Day Intercalary Periods &gt; should handle conversion to/from world time with multi-day intercalary periods" time="0.000242166">
        </testcase>
        <testcase classname="packages/core/test/calendar-engine.test.ts" name="CalendarEngine - Multi-Day Intercalary Periods &gt; should handle adding days across year boundary with intercalary periods" time="0.000072542">
        </testcase>
        <testcase classname="packages/core/test/calendar-engine.test.ts" name="CalendarEngine - Multi-Day Intercalary Periods &gt; should handle single-day intercalary periods (default behavior)" time="0.000071083">
        </testcase>
        <testcase classname="packages/core/test/calendar-engine.test.ts" name="CalendarEngine - Real Calendar Integration Tests &gt; should load and validate Greyhawk calendar with 7-day festivals" time="0.007953208">
        </testcase>
        <testcase classname="packages/core/test/calendar-engine.test.ts" name="CalendarEngine - Real Calendar Integration Tests &gt; should load and validate Dark Sun calendar with 5-day periods" time="0.00256">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/calendar-json-syntax-validation.test.ts" timestamp="2025-07-10T02:12:14.333Z" hostname="Davids-Mac-mini.local" tests="5" failures="0" errors="0" skipped="0" time="0.0167255">
        <testcase classname="packages/core/test/calendar-json-syntax-validation.test.ts" name="Calendar JSON Syntax Validation &gt; Template Syntax Validation &gt; should handle invalid helper syntax gracefully" time="0.008734708">
            <system-out>
[S&amp;S] Date format template compilation failed: Error: Parse error on line 1:
...{{ss-minute format=&quot;pad&quot;}}
-----------------------^
Expecting &apos;CLOSE_RAW_BLOCK&apos;, &apos;CLOSE&apos;, &apos;CLOSE_UNESCAPED&apos;, &apos;OPEN_SEXPR&apos;, &apos;CLOSE_SEXPR&apos;, &apos;ID&apos;, &apos;OPEN_BLOCK_PARAMS&apos;, &apos;STRING&apos;, &apos;NUMBER&apos;, &apos;BOOLEAN&apos;, &apos;UNDEFINED&apos;, &apos;NULL&apos;, &apos;DATA&apos;, got &apos;INVALID&apos;
    at Parser.parseError [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/parser.js:199:11[90m)[39m
    at Parser.parse [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/parser.js:251:22[90m)[39m
    at parseWithoutProcessing [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/base.js:24:20[90m)[39m
    at HandlebarsEnvironment.parse [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/base.js:30:13[90m)[39m
    at compileInput [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/compiler.js:532:19[90m)[39m
    at ret [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/compiler.js:546:18[90m)[39m
    at DateFormatter.formatWithContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:199:22[90m)[39m
    at DateFormatter.format [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:155:17[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-json-syntax-validation.test.ts:52:32
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11

            </system-out>
            <system-err>
[S&amp;S] Date format template has syntax errors: Parse error on line 1:
...{{ss-minute format=&quot;pad&quot;}}
-----------------------^
Expecting &apos;CLOSE_RAW_BLOCK&apos;, &apos;CLOSE&apos;, &apos;CLOSE_UNESCAPED&apos;, &apos;OPEN_SEXPR&apos;, &apos;CLOSE_SEXPR&apos;, &apos;ID&apos;, &apos;OPEN_BLOCK_PARAMS&apos;, &apos;STRING&apos;, &apos;NUMBER&apos;, &apos;BOOLEAN&apos;, &apos;UNDEFINED&apos;, &apos;NULL&apos;, &apos;DATA&apos;, got &apos;INVALID&apos;

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/calendar-json-syntax-validation.test.ts" name="Calendar JSON Syntax Validation &gt; Template Syntax Validation &gt; should succeed with correct double quote syntax" time="0.00438475">
        </testcase>
        <testcase classname="packages/core/test/calendar-json-syntax-validation.test.ts" name="Calendar JSON Syntax Validation &gt; Template Syntax Validation &gt; should handle missing helper parameters gracefully" time="0.001096458">
            <system-out>
[S&amp;S] Template produced invalid output, falling back to basic format: {
  template: [32m&apos;{{ss-hour:pad}}:{{ss-minute:pad}}:{{ss-second:pad}} UTC&apos;[39m,
  result: [32m&apos;:: UTC&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-json-syntax-validation.test.ts" name="Calendar JSON Syntax Validation &gt; Real Calendar File Validation &gt; should handle single quote syntax errors in templates" time="0.000547">
            <system-out>
[S&amp;S] Date format template compilation failed: Error: Parse error on line 1:
...{{ss-minute format=&apos;pad&apos;}}:{{ss-second f
-----------------------^
Expecting &apos;CLOSE_RAW_BLOCK&apos;, &apos;CLOSE&apos;, &apos;CLOSE_UNESCAPED&apos;, &apos;OPEN_SEXPR&apos;, &apos;CLOSE_SEXPR&apos;, &apos;ID&apos;, &apos;OPEN_BLOCK_PARAMS&apos;, &apos;STRING&apos;, &apos;NUMBER&apos;, &apos;BOOLEAN&apos;, &apos;UNDEFINED&apos;, &apos;NULL&apos;, &apos;DATA&apos;, got &apos;INVALID&apos;
    at Parser.parseError [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/parser.js:199:11[90m)[39m
    at Parser.parse [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/parser.js:251:22[90m)[39m
    at parseWithoutProcessing [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/base.js:24:20[90m)[39m
    at HandlebarsEnvironment.parse [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/base.js:30:13[90m)[39m
    at compileInput [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/compiler.js:532:19[90m)[39m
    at ret [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/compiler.js:546:18[90m)[39m
    at DateFormatter.formatWithContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:199:22[90m)[39m
    at DateFormatter.formatNamed [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:296:17[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-json-syntax-validation.test.ts:100:47
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11

            </system-out>
            <system-err>
[S&amp;S] Calendar &quot;Test Calendar&quot; has syntax errors in &quot;bad-time&quot; format: Parse error on line 1:
...{{ss-minute format=&apos;pad&apos;}}:{{ss-second f
-----------------------^
Expecting &apos;CLOSE_RAW_BLOCK&apos;, &apos;CLOSE&apos;, &apos;CLOSE_UNESCAPED&apos;, &apos;OPEN_SEXPR&apos;, &apos;CLOSE_SEXPR&apos;, &apos;ID&apos;, &apos;OPEN_BLOCK_PARAMS&apos;, &apos;STRING&apos;, &apos;NUMBER&apos;, &apos;BOOLEAN&apos;, &apos;UNDEFINED&apos;, &apos;NULL&apos;, &apos;DATA&apos;, got &apos;INVALID&apos;

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/calendar-json-syntax-validation.test.ts" name="Calendar JSON Syntax Validation &gt; Real Calendar File Validation &gt; should successfully compile corrected double quote syntax" time="0.001201167">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/calendar-loader.test.ts" timestamp="2025-07-10T02:12:14.333Z" hostname="Davids-Mac-mini.local" tests="27" failures="0" errors="0" skipped="0" time="0.129768167">
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; URL Validation &gt; should accept valid HTTP URLs" time="0.104129417">
            <system-out>
[S&amp;S] CalendarLoader: Successfully loaded calendar from http://localhost:3000/calendar.json 

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; URL Validation &gt; should accept valid HTTPS URLs" time="0.000380541">
            <system-out>
[S&amp;S] CalendarLoader: Successfully loaded calendar from https://example.com/calendar.json 

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; URL Validation &gt; should reject invalid protocols" time="0.000274959">
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; URL Validation &gt; should reject malformed URLs" time="0.000179125">
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; Calendar Loading &gt; should successfully load valid calendar from URL" time="0.000500625">
            <system-out>
[S&amp;S] CalendarLoader: Successfully loaded calendar from https://example.com/calendar.json 

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; Calendar Loading &gt; should handle HTTP errors gracefully" time="0.003007291">
            <system-err>
[S&amp;S ERROR] CalendarLoader: Failed to load calendar from https://example.com/missing.json Error: HTTP 404: Not Found
    at CalendarLoader.loadFromUrl [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-loader.ts:133:15[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-loader.test.ts:180:22
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; Calendar Loading &gt; should handle network errors gracefully" time="0.000528208">
            <system-err>
[S&amp;S ERROR] CalendarLoader: Failed to load calendar from https://example.com/calendar.json Error: CORS error: Network error. The server hosting this calendar does not allow cross-origin requests. Consider hosting the file on a CORS-enabled service or using a proxy.
    at CalendarLoader.fetchWithTimeout [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-loader.ts:452:15[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at CalendarLoader.loadFromUrl [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-loader.ts:123:24[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-loader.test.ts:189:22
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; Calendar Loading &gt; should handle invalid JSON gracefully" time="0.001775375">
            <system-err>
[S&amp;S ERROR] CalendarLoader: Failed to load calendar from https://example.com/invalid.json Error: Invalid JSON
    at Object.json [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-loader.test.ts:198:36[90m)[39m
    at CalendarLoader.loadFromUrl [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-loader.ts:136:43[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-loader.test.ts:201:22
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; Request Options &gt; should include custom headers" time="0.001782584">
            <system-out>
[S&amp;S] CalendarLoader: Successfully loaded calendar from https://example.com/calendar.json 

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; Request Options &gt; should skip validation when requested" time="0.000247166">
            <system-out>
[S&amp;S] CalendarLoader: Successfully loaded calendar from https://example.com/invalid.json 

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; Collection Loading &gt; should load multiple calendars from collection" time="0.00583125">
            <system-out>
[S&amp;S] CalendarLoader: Successfully loaded calendar from https://example.com/collection.json 

[S&amp;S] CalendarLoader: Successfully loaded calendar from https://example.com/calendar1.json 

[S&amp;S] CalendarLoader: Successfully loaded calendar from https://example.com/calendar2.json 

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; Collection Loading &gt; should handle relative URLs in collections" time="0.002074542">
            <system-out>
[S&amp;S] CalendarLoader: Successfully loaded calendar from https://example.com/collection.json 

[S&amp;S] CalendarLoader: Successfully loaded calendar from https://example.com/calendar1.json 

[S&amp;S] CalendarLoader: Successfully loaded calendar from https://example.com/calendar2.json 

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; Collection Loading &gt; should handle invalid collection format" time="0.001111958">
            <system-out>
[S&amp;S] CalendarLoader: Successfully loaded calendar from https://example.com/invalid-collection.json 

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; Collection Loading &gt; should include collection entry metadata with preview in results" time="0.000842917">
            <system-out>
[S&amp;S] CalendarLoader: Successfully loaded calendar from https://example.com/collection.json 

[S&amp;S] CalendarLoader: Successfully loaded calendar from https://example.com/calendar1.json 

[S&amp;S] CalendarLoader: Successfully loaded calendar from https://example.com/calendar2.json 

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; Collection Loading &gt; should sanitize HTML in preview text" time="0.003045917">
            <system-out>
[S&amp;S] CalendarLoader: Successfully loaded calendar from https://example.com/malicious-collection.json 

[S&amp;S] CalendarLoader: Successfully loaded calendar from https://example.com/calendar3.json 

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; Module URL Support &gt; should accept valid module URLs" time="0.000626292">
            <system-out>
[S&amp;S] CalendarLoader: Successfully loaded calendar from module:test-module/calendars 

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; Module URL Support &gt; should reject module URLs for inactive modules" time="0.00014025">
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; Module URL Support &gt; should reject module URLs for non-existent modules" time="0.000052875">
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; Module URL Support &gt; should reject malformed module URLs" time="0.0000435">
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; Module URL Support &gt; should handle simple module URLs (defaults to calendars/index.json)" time="0.000159167">
            <system-out>
[S&amp;S] CalendarLoader: Successfully loaded calendar from module:test-module 

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; Module URL Support &gt; should handle module URLs with explicit JSON files" time="0.000106708">
            <system-out>
[S&amp;S] CalendarLoader: Successfully loaded calendar from module:test-module/special/calendar.json 

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; Module URL Support &gt; should handle module URLs with paths (auto-append index.json)" time="0.000108584">
            <system-out>
[S&amp;S] CalendarLoader: Successfully loaded calendar from module:test-module/my-calendars 

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; External Source Management &gt; should add external source" time="0.00019775">
            <system-out>
[S&amp;S] CalendarLoader: Added external source: Test Source (https://example.com/calendar.json) 

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; External Source Management &gt; should generate unique IDs for sources with same name" time="0.000093334">
            <system-out>
[S&amp;S] CalendarLoader: Added external source: Duplicate Name (https://example.com/calendar1.json) 
[S&amp;S] CalendarLoader: Added external source: Duplicate Name (https://example.com/calendar2.json) 

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; External Source Management &gt; should remove external source" time="0.0001045">
            <system-out>
[S&amp;S] CalendarLoader: Added external source: Test Source (https://example.com/calendar.json) 
[S&amp;S] CalendarLoader: Removed external source: Test Source 

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; External Source Management &gt; should update source status" time="0.000090875">
            <system-out>
[S&amp;S] CalendarLoader: Added external source: Test Source (https://example.com/calendar.json) 

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-loader.test.ts" name="CalendarLoader &gt; External Source Management &gt; should list all sources" time="0.000655458">
            <system-out>
[S&amp;S] CalendarLoader: Added external source: Source 1 (https://example.com/cal1.json) 
[S&amp;S] CalendarLoader: Added external source: Source 2 (https://example.com/cal2.json) 

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/calendar-selection-dialog-variants.test.ts" timestamp="2025-07-10T02:12:14.335Z" hostname="Davids-Mac-mini.local" tests="5" failures="0" errors="0" skipped="0" time="0.020647">
        <testcase classname="packages/core/test/calendar-selection-dialog-variants.test.ts" name="Calendar Selection Dialog - Variants Support &gt; should correctly identify calendar variants" time="0.01398275">
            <system-out>
[S&amp;S] Error adding ordinal suffix: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.addOrdinalSuffix is not a function
    at CalendarDate.addOrdinalSuffix [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:410:32[90m)[39m
    at CalendarDate.getDayString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:346:21[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:200:31[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:137:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error formatting time string: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.formatTimeComponent is not a function
    at CalendarDate.getTimeString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:390:41[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:202:47[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:137:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error adding ordinal suffix: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.addOrdinalSuffix is not a function
    at CalendarDate.addOrdinalSuffix [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:410:32[90m)[39m
    at CalendarDate.getDayString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:346:21[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:200:31[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:137:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error formatting time string: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.formatTimeComponent is not a function
    at CalendarDate.getTimeString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:390:41[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:202:47[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:137:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error adding ordinal suffix: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.addOrdinalSuffix is not a function
    at CalendarDate.addOrdinalSuffix [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:410:32[90m)[39m
    at CalendarDate.getDayString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:346:21[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:200:31[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:137:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error formatting time string: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.formatTimeComponent is not a function
    at CalendarDate.getTimeString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:390:41[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:202:47[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:137:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error adding ordinal suffix: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.addOrdinalSuffix is not a function
    at CalendarDate.addOrdinalSuffix [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:410:32[90m)[39m
    at CalendarDate.getDayString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:346:21[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:200:31[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:137:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error formatting time string: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.formatTimeComponent is not a function
    at CalendarDate.getTimeString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:390:41[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:202:47[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:137:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-selection-dialog-variants.test.ts" name="Calendar Selection Dialog - Variants Support &gt; should sort calendars hierarchically with base calendars first, then variants" time="0.001831041">
            <system-out>
[S&amp;S] Error adding ordinal suffix: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.addOrdinalSuffix is not a function
    at CalendarDate.addOrdinalSuffix [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:410:32[90m)[39m
    at CalendarDate.getDayString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:346:21[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:200:31[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:171:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error formatting time string: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.formatTimeComponent is not a function
    at CalendarDate.getTimeString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:390:41[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:202:47[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:171:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error adding ordinal suffix: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.addOrdinalSuffix is not a function
    at CalendarDate.addOrdinalSuffix [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:410:32[90m)[39m
    at CalendarDate.getDayString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:346:21[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:200:31[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:171:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error formatting time string: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.formatTimeComponent is not a function
    at CalendarDate.getTimeString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:390:41[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:202:47[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:171:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error adding ordinal suffix: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.addOrdinalSuffix is not a function
    at CalendarDate.addOrdinalSuffix [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:410:32[90m)[39m
    at CalendarDate.getDayString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:346:21[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:200:31[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:171:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error formatting time string: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.formatTimeComponent is not a function
    at CalendarDate.getTimeString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:390:41[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:202:47[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:171:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error adding ordinal suffix: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.addOrdinalSuffix is not a function
    at CalendarDate.addOrdinalSuffix [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:410:32[90m)[39m
    at CalendarDate.getDayString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:346:21[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:200:31[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:171:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error formatting time string: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.formatTimeComponent is not a function
    at CalendarDate.getTimeString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:390:41[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:202:47[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:171:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-selection-dialog-variants.test.ts" name="Calendar Selection Dialog - Variants Support &gt; should generate proper variant info from variant IDs" time="0.001385625">
            <system-out>
[S&amp;S] Error adding ordinal suffix: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.addOrdinalSuffix is not a function
    at CalendarDate.addOrdinalSuffix [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:410:32[90m)[39m
    at CalendarDate.getDayString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:346:21[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:200:31[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:199:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error formatting time string: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.formatTimeComponent is not a function
    at CalendarDate.getTimeString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:390:41[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:202:47[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:199:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error adding ordinal suffix: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.addOrdinalSuffix is not a function
    at CalendarDate.addOrdinalSuffix [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:410:32[90m)[39m
    at CalendarDate.getDayString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:346:21[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:200:31[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:199:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error formatting time string: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.formatTimeComponent is not a function
    at CalendarDate.getTimeString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:390:41[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:202:47[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:199:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error adding ordinal suffix: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.addOrdinalSuffix is not a function
    at CalendarDate.addOrdinalSuffix [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:410:32[90m)[39m
    at CalendarDate.getDayString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:346:21[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:200:31[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:199:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error formatting time string: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.formatTimeComponent is not a function
    at CalendarDate.getTimeString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:390:41[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:202:47[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:199:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error adding ordinal suffix: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.addOrdinalSuffix is not a function
    at CalendarDate.addOrdinalSuffix [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:410:32[90m)[39m
    at CalendarDate.getDayString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:346:21[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:200:31[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:199:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error formatting time string: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.formatTimeComponent is not a function
    at CalendarDate.getTimeString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:390:41[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:202:47[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:199:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-selection-dialog-variants.test.ts" name="Calendar Selection Dialog - Variants Support &gt; should maintain current and selected states for variants" time="0.0012945">
            <system-out>
[S&amp;S] Error adding ordinal suffix: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.addOrdinalSuffix is not a function
    at CalendarDate.addOrdinalSuffix [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:410:32[90m)[39m
    at CalendarDate.getDayString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:346:21[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:200:31[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:223:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error formatting time string: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.formatTimeComponent is not a function
    at CalendarDate.getTimeString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:390:41[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:202:47[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:223:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error adding ordinal suffix: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.addOrdinalSuffix is not a function
    at CalendarDate.addOrdinalSuffix [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:410:32[90m)[39m
    at CalendarDate.getDayString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:346:21[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:200:31[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:223:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error formatting time string: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.formatTimeComponent is not a function
    at CalendarDate.getTimeString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:390:41[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:202:47[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:223:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error adding ordinal suffix: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.addOrdinalSuffix is not a function
    at CalendarDate.addOrdinalSuffix [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:410:32[90m)[39m
    at CalendarDate.getDayString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:346:21[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:200:31[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:223:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error formatting time string: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.formatTimeComponent is not a function
    at CalendarDate.getTimeString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:390:41[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:202:47[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:223:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error adding ordinal suffix: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.addOrdinalSuffix is not a function
    at CalendarDate.addOrdinalSuffix [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:410:32[90m)[39m
    at CalendarDate.getDayString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:346:21[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:200:31[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:223:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error formatting time string: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.formatTimeComponent is not a function
    at CalendarDate.getTimeString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:390:41[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:202:47[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:223:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendar-selection-dialog-variants.test.ts" name="Calendar Selection Dialog - Variants Support &gt; should handle calendars without variants correctly" time="0.000908208">
            <system-out>
[S&amp;S] Error adding ordinal suffix: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.addOrdinalSuffix is not a function
    at CalendarDate.addOrdinalSuffix [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:410:32[90m)[39m
    at CalendarDate.getDayString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:346:21[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:200:31[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:241:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error formatting time string: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.formatTimeComponent is not a function
    at CalendarDate.getTimeString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:390:41[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:202:47[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:241:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error adding ordinal suffix: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.addOrdinalSuffix is not a function
    at CalendarDate.addOrdinalSuffix [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:410:32[90m)[39m
    at CalendarDate.getDayString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:346:21[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:200:31[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:241:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error formatting time string: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.formatTimeComponent is not a function
    at CalendarDate.getTimeString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:390:41[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:202:47[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:241:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error adding ordinal suffix: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.addOrdinalSuffix is not a function
    at CalendarDate.addOrdinalSuffix [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:410:32[90m)[39m
    at CalendarDate.getDayString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:346:21[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:200:31[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:241:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error formatting time string: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.formatTimeComponent is not a function
    at CalendarDate.getTimeString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:390:41[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:202:47[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:241:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error adding ordinal suffix: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.addOrdinalSuffix is not a function
    at CalendarDate.addOrdinalSuffix [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:410:32[90m)[39m
    at CalendarDate.getDayString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:346:21[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:200:31[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:241:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
[S&amp;S] Error formatting time string: TypeError: __vite_ssr_import_0__.CalendarTimeUtils.formatTimeComponent is not a function
    at CalendarDate.getTimeString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:390:41[90m)[39m
    at CalendarDate.toLongString [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/calendar-date.ts:202:47[90m)[39m
    at CalendarSelectionDialog.generateSampleDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:406:35[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:125:59
    at Array.map (&lt;anonymous&gt;)
    at CalendarSelectionDialog._prepareContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/ui/calendar-selection-dialog.ts:100:64[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/calendar-selection-dialog-variants.test.ts:241:21
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/calendar-time-utils.test.ts" timestamp="2025-07-10T02:12:14.336Z" hostname="Davids-Mac-mini.local" tests="41" failures="0" errors="0" skipped="0" time="0.00582375">
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; getSecondsPerDay &gt; should calculate exact seconds per day for standard calendar (24*60*60)" time="0.000812333">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; getSecondsPerDay &gt; should calculate exact seconds per day for non-standard calendar (20*50*50)" time="0.000061834">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; getSecondsPerDay &gt; should calculate exact seconds per day for extreme calendar (1*1*1)" time="0.000078166">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; getSecondsPerHour &gt; should calculate exact seconds per hour for standard calendar (60*60)" time="0.000043375">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; getSecondsPerHour &gt; should calculate exact seconds per hour for non-standard calendar (50*50)" time="0.00007875">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; getSecondsPerHour &gt; should calculate exact seconds per hour for extreme calendar (1*1)" time="0.000036708">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; getDaysPerWeek &gt; should return exact days per week for standard calendar (7 days)" time="0.000032959">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; getDaysPerWeek &gt; should return exact days per week for non-standard calendar (8 days)" time="0.000027041">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; getDaysPerWeek &gt; should return exact days per week for extreme calendar (1 day)" time="0.000162959">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; getMonthsPerYear &gt; should return exact months per year for standard calendar (12 months)" time="0.00003525">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; getMonthsPerYear &gt; should return exact months per year for non-standard calendar (10 months)" time="0.000068">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; getMonthsPerYear &gt; should return exact months per year for extreme calendar (1 month)" time="0.000029416">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; daysToSeconds &gt; should convert exact days to seconds for standard calendar" time="0.0000515">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; daysToSeconds &gt; should convert exact days to seconds for non-standard calendar" time="0.000058375">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; daysToSeconds &gt; should convert exact days to seconds for extreme calendar" time="0.000054375">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; weeksToDays &gt; should convert exact weeks to days for standard calendar" time="0.000062167">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; weeksToDays &gt; should convert exact weeks to days for non-standard calendar" time="0.000044667">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; weeksToDays &gt; should convert exact weeks to days for extreme calendar" time="0.000033625">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; hoursToSeconds &gt; should convert exact hours to seconds for standard calendar" time="0.000051583">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; hoursToSeconds &gt; should convert exact hours to seconds for non-standard calendar" time="0.000041042">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; hoursToSeconds &gt; should convert exact hours to seconds for extreme calendar" time="0.000024458">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; weeksToSeconds &gt; should convert exact weeks to seconds for standard calendar" time="0.000040375">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; weeksToSeconds &gt; should convert exact weeks to seconds for non-standard calendar" time="0.000033292">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; weeksToSeconds &gt; should convert exact weeks to seconds for extreme calendar" time="0.000033">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; secondsToWorldTimeUnits &gt; should convert exact seconds to time components for standard calendar" time="0.000070792">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; secondsToWorldTimeUnits &gt; should convert exact seconds to time components for non-standard calendar" time="0.000049625">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; secondsToWorldTimeUnits &gt; should convert exact seconds to time components for extreme calendar" time="0.000046541">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; secondsToWorldTimeUnits &gt; should handle zero seconds correctly" time="0.000045666">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; secondsToWorldTimeUnits &gt; should handle exactly one day correctly for standard calendar" time="0.000045125">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; Date Comparison Utilities &gt; should compare dates correctly with compareDates()" time="0.000093708">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; Date Comparison Utilities &gt; should check date equality with isDateEqual()" time="0.000045">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; Date Comparison Utilities &gt; should check date ordering with isDateBefore() and isDateAfter()" time="0.000076167">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; Date Arithmetic Utilities &gt; should normalize month overflow and underflow with normalizeMonth()" time="0.000933166">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; Date Arithmetic Utilities &gt; should add months to dates with addMonthsToDate()" time="0.000200709">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; Date Arithmetic Utilities &gt; should normalize weekday values with normalizeWeekday()" time="0.000117083">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; Formatting Utilities &gt; should add ordinal suffixes correctly with addOrdinalSuffix()" time="0.000414917">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; Formatting Utilities &gt; should format time components with formatTimeComponent()" time="0.00009625">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; Calendar-Specific Year Operations &gt; should calculate approximate year length with getApproximateYearLength()" time="0.000065">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; Edge Cases and Validation &gt; should handle negative values correctly" time="0.000044875">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; Edge Cases and Validation &gt; should handle fractional values correctly" time="0.000034125">
        </testcase>
        <testcase classname="packages/core/test/calendar-time-utils.test.ts" name="CalendarTimeUtils &gt; Edge Cases and Validation &gt; should maintain precision with large numbers" time="0.000029542">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/calendar-variants.test.ts" timestamp="2025-07-10T02:12:14.338Z" hostname="Davids-Mac-mini.local" tests="7" failures="0" errors="0" skipped="0" time="0.004286542">
        <testcase classname="packages/core/test/calendar-variants.test.ts" name="Calendar Variants System &gt; Calendar Variant Loading &gt; should load base calendar without variants" time="0.00109025">
        </testcase>
        <testcase classname="packages/core/test/calendar-variants.test.ts" name="Calendar Variants System &gt; Calendar Variant Loading &gt; should expand calendar with variants into multiple selectable calendars" time="0.000258458">
        </testcase>
        <testcase classname="packages/core/test/calendar-variants.test.ts" name="Calendar Variants System &gt; Calendar Variant Loading &gt; should apply variant overrides correctly" time="0.000273792">
        </testcase>
        <testcase classname="packages/core/test/calendar-variants.test.ts" name="Calendar Variants System &gt; Calendar Variant Loading &gt; should preserve backward compatibility with existing calendar selections" time="0.000154583">
        </testcase>
        <testcase classname="packages/core/test/calendar-variants.test.ts" name="Calendar Variants System &gt; Calendar Selection Dialog Variants &gt; should show expanded calendar list with base + variant options" time="0.000687125">
        </testcase>
        <testcase classname="packages/core/test/calendar-variants.test.ts" name="Calendar Variants System &gt; Variant DateFormats Support &gt; should support dateFormats property in variants" time="0.00093975">
        </testcase>
        <testcase classname="packages/core/test/calendar-variants.test.ts" name="Calendar Variants System &gt; Variant DateFormats Support &gt; should handle variants without dateFormats gracefully" time="0.000175833">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/comprehensive-regression.test.ts" timestamp="2025-07-10T02:12:14.338Z" hostname="Davids-Mac-mini.local" tests="19" failures="0" errors="0" skipped="0" time="0.045276375">
        <testcase classname="packages/core/test/comprehensive-regression.test.ts" name="Comprehensive Regression Tests - Core Calendar Types &gt; golarion-pf2e Calendar Regression &gt; should load calendar without errors" time="0.001102334">
        </testcase>
        <testcase classname="packages/core/test/comprehensive-regression.test.ts" name="Comprehensive Regression Tests - Core Calendar Types &gt; golarion-pf2e Calendar Regression &gt; should handle basic date operations" time="0.005924875">
        </testcase>
        <testcase classname="packages/core/test/comprehensive-regression.test.ts" name="Comprehensive Regression Tests - Core Calendar Types &gt; golarion-pf2e Calendar Regression &gt; should calculate weekdays correctly" time="0.000886167">
        </testcase>
        <testcase classname="packages/core/test/comprehensive-regression.test.ts" name="Comprehensive Regression Tests - Core Calendar Types &gt; golarion-pf2e Calendar Regression &gt; should advance days correctly" time="0.00287775">
        </testcase>
        <testcase classname="packages/core/test/comprehensive-regression.test.ts" name="Comprehensive Regression Tests - Core Calendar Types &gt; golarion-pf2e Calendar Regression &gt; should handle month boundaries correctly" time="0.006860459">
        </testcase>
        <testcase classname="packages/core/test/comprehensive-regression.test.ts" name="Comprehensive Regression Tests - Core Calendar Types &gt; golarion-pf2e Calendar Regression &gt; should handle year boundaries correctly" time="0.004229917">
        </testcase>
        <testcase classname="packages/core/test/comprehensive-regression.test.ts" name="Comprehensive Regression Tests - Core Calendar Types &gt; golarion-pf2e Calendar Regression &gt; should maintain weekday consistency (if calendar has weekdays)" time="0.003580125">
        </testcase>
        <testcase classname="packages/core/test/comprehensive-regression.test.ts" name="Comprehensive Regression Tests - Core Calendar Types &gt; golarion-pf2e Calendar Regression &gt; should handle leap years correctly (if calendar has leap year rules)" time="0.000193959">
        </testcase>
        <testcase classname="packages/core/test/comprehensive-regression.test.ts" name="Comprehensive Regression Tests - Core Calendar Types &gt; golarion-pf2e Calendar Regression &gt; should handle intercalary days without breaking (if calendar has them)" time="0.000210584">
        </testcase>
        <testcase classname="packages/core/test/comprehensive-regression.test.ts" name="Comprehensive Regression Tests - Core Calendar Types &gt; gregorian Calendar Regression &gt; should load calendar without errors" time="0.000137292">
        </testcase>
        <testcase classname="packages/core/test/comprehensive-regression.test.ts" name="Comprehensive Regression Tests - Core Calendar Types &gt; gregorian Calendar Regression &gt; should handle basic date operations" time="0.005661125">
        </testcase>
        <testcase classname="packages/core/test/comprehensive-regression.test.ts" name="Comprehensive Regression Tests - Core Calendar Types &gt; gregorian Calendar Regression &gt; should calculate weekdays correctly" time="0.000788875">
        </testcase>
        <testcase classname="packages/core/test/comprehensive-regression.test.ts" name="Comprehensive Regression Tests - Core Calendar Types &gt; gregorian Calendar Regression &gt; should advance days correctly" time="0.002450209">
        </testcase>
        <testcase classname="packages/core/test/comprehensive-regression.test.ts" name="Comprehensive Regression Tests - Core Calendar Types &gt; gregorian Calendar Regression &gt; should handle month boundaries correctly" time="0.002212833">
        </testcase>
        <testcase classname="packages/core/test/comprehensive-regression.test.ts" name="Comprehensive Regression Tests - Core Calendar Types &gt; gregorian Calendar Regression &gt; should handle year boundaries correctly" time="0.001678125">
        </testcase>
        <testcase classname="packages/core/test/comprehensive-regression.test.ts" name="Comprehensive Regression Tests - Core Calendar Types &gt; gregorian Calendar Regression &gt; should maintain weekday consistency (if calendar has weekdays)" time="0.004223916">
        </testcase>
        <testcase classname="packages/core/test/comprehensive-regression.test.ts" name="Comprehensive Regression Tests - Core Calendar Types &gt; gregorian Calendar Regression &gt; should handle leap years correctly (if calendar has leap year rules)" time="0.000192042">
        </testcase>
        <testcase classname="packages/core/test/comprehensive-regression.test.ts" name="Comprehensive Regression Tests - Core Calendar Types &gt; gregorian Calendar Regression &gt; should handle intercalary days without breaking (if calendar has them)" time="0.000082208">
        </testcase>
        <testcase classname="packages/core/test/comprehensive-regression.test.ts" name="Comprehensive Regression Tests - Core Calendar Types &gt; Cross-Calendar Compatibility &gt; should handle core calendars consistently" time="0.001035792">
            <system-out>
✅ Successfully loaded and tested 2 calendar types

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/date-formatter-advanced.test.ts" timestamp="2025-07-10T02:12:14.339Z" hostname="Davids-Mac-mini.local" tests="28" failures="0" errors="0" skipped="0" time="0.024810291">
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Named Format Variants &gt; should handle format variants with default fallback" time="0.00577525">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Named Format Variants &gt; should handle format variants without default, use first available" time="0.000587834">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Named Format Variants &gt; should handle format variants with empty object" time="0.000154458">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Named Format Variants &gt; should handle array format gracefully" time="0.000087125">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Widget Format Edge Cases &gt; should handle missing widgets object" time="0.000108917">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Widget Format Edge Cases &gt; should handle missing specific widget format" time="0.000051959">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Recursive Format Handling &gt; should handle circular references in format embedding" time="0.000687042">
            <system-out>
[S&amp;S] Format &apos;format2&apos; contains circular references, using basic format

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Recursive Format Handling &gt; should handle deeply nested format embedding" time="0.000729875">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Recursive Format Handling &gt; should handle mixed successful and failed embedded formats" time="0.000985208">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Helper Error Handling &gt; should handle month helper with invalid format" time="0.000186833">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Helper Error Handling &gt; should handle day helper with invalid format" time="0.000245625">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Helper Error Handling &gt; should handle weekday helper with invalid format" time="0.000169292">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Helper Error Handling &gt; should handle math helper with invalid operation" time="0.000271916">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Helper Error Handling &gt; should handle math helper with non-numeric value" time="0.000162209">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Helper Error Handling &gt; should handle math helper division by zero" time="0.000292291">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Helper Error Handling &gt; should handle math helper with all operations" time="0.000655375">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Stardate Helper Edge Cases &gt; should handle stardate with various precision levels" time="0.000561375">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Stardate Helper Edge Cases &gt; should handle stardate with default values" time="0.003956458">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Stardate Helper Edge Cases &gt; should handle stardate with negative year offsets" time="0.003314417">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Day of Year Calculation Edge Cases &gt; should handle day of year calculation for December" time="0.00243">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Day of Year Calculation Edge Cases &gt; should handle day of year calculation for invalid month" time="0.000401125">
            <system-out>
[S&amp;S] Month value 99 outside calendar range (1-4), using start of year fallback

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Basic Format Edge Cases &gt; should handle calendar without year prefix/suffix" time="0.000433792">
            <system-out>
[S&amp;S] Template produced invalid output, falling back to basic format: { template: [32m&apos;{{invalid}}&apos;[39m, result: [32m&apos;&apos;[39m }

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Basic Format Edge Cases &gt; should handle month/weekday lookups with edge indices" time="0.000437417">
            <system-out>
[S&amp;S] Month value 0 outside calendar range (1-4), using start of year fallback
[S&amp;S] Template produced invalid output, falling back to basic format: { template: [32m&apos;{{invalid}}&apos;[39m, result: [32m&apos;&apos;[39m }

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Template Context Preparation &gt; should prepare context with all required fields" time="0.00052825">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Template Context Preparation &gt; should handle date without time" time="0.00035825">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Format Validation &gt; should handle null/undefined format names" time="0.00006275">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Format Validation &gt; should handle empty format names" time="0.000036875">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-advanced.test.ts" name="DateFormatter Advanced Tests &gt; Format Validation &gt; should handle null/undefined widget types" time="0.000040708">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/date-formatter-bounds-check.test.ts" timestamp="2025-07-10T02:12:14.340Z" hostname="Davids-Mac-mini.local" tests="3" failures="0" errors="0" skipped="0" time="0.007111958">
        <testcase classname="packages/core/test/date-formatter-bounds-check.test.ts" name="DateFormatter Array Bounds Check &gt; should fail when calculateDayOfYear accesses months array out of bounds" time="0.004902167">
            <system-out>
[S&amp;S] Month value 5 outside calendar range (1-2), using start of year fallback
Actual dayOfYear calculated: [33m1[39m
Expected: should be handled gracefully, not undefined or NaN

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/date-formatter-bounds-check.test.ts" name="DateFormatter Array Bounds Check &gt; should fail when month index is negative" time="0.000798042">
            <system-out>
[S&amp;S] Month value -1 outside calendar range (1-2), using start of year fallback
Negative month dayOfYear: [33m1[39m

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/date-formatter-bounds-check.test.ts" name="DateFormatter Array Bounds Check &gt; should fail when month index is zero (0-based vs 1-based confusion)" time="0.000814916">
            <system-out>
[S&amp;S] Month value 0 outside calendar range (1-2), using start of year fallback
Zero month dayOfYear: [33m1[39m

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/date-formatter-edge-cases.test.ts" timestamp="2025-07-10T02:12:14.340Z" hostname="Davids-Mac-mini.local" tests="6" failures="0" errors="0" skipped="0" time="0.01952425">
        <testcase classname="packages/core/test/date-formatter-edge-cases.test.ts" name="DateFormatter Edge Cases &gt; Helper Syntax Edge Cases &gt; should handle single-quote format parameters gracefully" time="0.00960975">
            <system-out>
[S&amp;S] Date format template compilation failed: Error: Parse error on line 1:
...{{ss-minute format=&apos;pad&apos;}}
-----------------------^
Expecting &apos;CLOSE_RAW_BLOCK&apos;, &apos;CLOSE&apos;, &apos;CLOSE_UNESCAPED&apos;, &apos;OPEN_SEXPR&apos;, &apos;CLOSE_SEXPR&apos;, &apos;ID&apos;, &apos;OPEN_BLOCK_PARAMS&apos;, &apos;STRING&apos;, &apos;NUMBER&apos;, &apos;BOOLEAN&apos;, &apos;UNDEFINED&apos;, &apos;NULL&apos;, &apos;DATA&apos;, got &apos;INVALID&apos;
    at Parser.parseError [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/parser.js:199:11[90m)[39m
    at Parser.parse [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/parser.js:251:22[90m)[39m
    at parseWithoutProcessing [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/base.js:24:20[90m)[39m
    at HandlebarsEnvironment.parse [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/base.js:30:13[90m)[39m
    at compileInput [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/compiler.js:532:19[90m)[39m
    at ret [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/compiler.js:546:18[90m)[39m
    at DateFormatter.formatWithContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:199:22[90m)[39m
    at DateFormatter.format [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:155:17[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/date-formatter-edge-cases.test.ts:53:32
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11

            </system-out>
            <system-err>
[S&amp;S] Date format template has syntax errors: Parse error on line 1:
...{{ss-minute format=&apos;pad&apos;}}
-----------------------^
Expecting &apos;CLOSE_RAW_BLOCK&apos;, &apos;CLOSE&apos;, &apos;CLOSE_UNESCAPED&apos;, &apos;OPEN_SEXPR&apos;, &apos;CLOSE_SEXPR&apos;, &apos;ID&apos;, &apos;OPEN_BLOCK_PARAMS&apos;, &apos;STRING&apos;, &apos;NUMBER&apos;, &apos;BOOLEAN&apos;, &apos;UNDEFINED&apos;, &apos;NULL&apos;, &apos;DATA&apos;, got &apos;INVALID&apos;

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/date-formatter-edge-cases.test.ts" name="DateFormatter Edge Cases &gt; Helper Syntax Edge Cases &gt; should validate ss-stardate helper parameters" time="0.000644792">
            <system-out>
[S&amp;S] Date format template compilation failed: Error: Parse error on line 1:
...tardate year prefix=&apos;47 baseYear=2370 da
-----------------------^
Expecting &apos;OPEN_SEXPR&apos;, &apos;ID&apos;, &apos;STRING&apos;, &apos;NUMBER&apos;, &apos;BOOLEAN&apos;, &apos;UNDEFINED&apos;, &apos;NULL&apos;, &apos;DATA&apos;, got &apos;INVALID&apos;
    at Parser.parseError [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/parser.js:199:11[90m)[39m
    at Parser.parse [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/parser.js:251:22[90m)[39m
    at parseWithoutProcessing [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/base.js:24:20[90m)[39m
    at HandlebarsEnvironment.parse [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/base.js:30:13[90m)[39m
    at compileInput [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/compiler.js:532:19[90m)[39m
    at ret [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/compiler.js:546:18[90m)[39m
    at DateFormatter.formatWithContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:199:22[90m)[39m
    at DateFormatter.format [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:155:17[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/date-formatter-edge-cases.test.ts:66:32
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11

            </system-out>
            <system-err>
[S&amp;S] Date format template has syntax errors: Parse error on line 1:
...tardate year prefix=&apos;47 baseYear=2370 da
-----------------------^
Expecting &apos;OPEN_SEXPR&apos;, &apos;ID&apos;, &apos;STRING&apos;, &apos;NUMBER&apos;, &apos;BOOLEAN&apos;, &apos;UNDEFINED&apos;, &apos;NULL&apos;, &apos;DATA&apos;, got &apos;INVALID&apos;

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/date-formatter-edge-cases.test.ts" name="DateFormatter Edge Cases &gt; Array Bounds Validation &gt; should handle invalid month indices gracefully" time="0.002436208">
            <system-out>
[S&amp;S] Month value 99 outside calendar range (1-2), using start of year fallback

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/date-formatter-edge-cases.test.ts" name="DateFormatter Edge Cases &gt; Array Bounds Validation &gt; should handle negative month indices gracefully" time="0.000482584">
            <system-out>
[S&amp;S] Month value -1 outside calendar range (1-2), using start of year fallback

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/date-formatter-edge-cases.test.ts" name="DateFormatter Edge Cases &gt; Array Bounds Validation &gt; should handle month index of zero gracefully" time="0.000336625">
            <system-out>
[S&amp;S] Month value 0 outside calendar range (1-2), using start of year fallback

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/date-formatter-edge-cases.test.ts" name="DateFormatter Edge Cases &gt; Calendar JSON Helper Syntax Validation &gt; should detect and handle malformed helper syntax in real calendar files" time="0.000542208">
            <system-out>
[S&amp;S] Date format template compilation failed: Error: Parse error on line 1:
...{{ss-minute format=&apos;pad&apos;}}:{{ss-second f
-----------------------^
Expecting &apos;CLOSE_RAW_BLOCK&apos;, &apos;CLOSE&apos;, &apos;CLOSE_UNESCAPED&apos;, &apos;OPEN_SEXPR&apos;, &apos;CLOSE_SEXPR&apos;, &apos;ID&apos;, &apos;OPEN_BLOCK_PARAMS&apos;, &apos;STRING&apos;, &apos;NUMBER&apos;, &apos;BOOLEAN&apos;, &apos;UNDEFINED&apos;, &apos;NULL&apos;, &apos;DATA&apos;, got &apos;INVALID&apos;
    at Parser.parseError [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/parser.js:199:11[90m)[39m
    at Parser.parse [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/parser.js:251:22[90m)[39m
    at parseWithoutProcessing [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/base.js:24:20[90m)[39m
    at HandlebarsEnvironment.parse [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/base.js:30:13[90m)[39m
    at compileInput [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/compiler.js:532:19[90m)[39m
    at ret [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/compiler.js:546:18[90m)[39m
    at DateFormatter.formatWithContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:199:22[90m)[39m
    at DateFormatter.format [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:155:17[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/date-formatter-edge-cases.test.ts:127:32
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11

            </system-out>
            <system-err>
[S&amp;S] Date format template has syntax errors: Parse error on line 1:
...{{ss-minute format=&apos;pad&apos;}}:{{ss-second f
-----------------------^
Expecting &apos;CLOSE_RAW_BLOCK&apos;, &apos;CLOSE&apos;, &apos;CLOSE_UNESCAPED&apos;, &apos;OPEN_SEXPR&apos;, &apos;CLOSE_SEXPR&apos;, &apos;ID&apos;, &apos;OPEN_BLOCK_PARAMS&apos;, &apos;STRING&apos;, &apos;NUMBER&apos;, &apos;BOOLEAN&apos;, &apos;UNDEFINED&apos;, &apos;NULL&apos;, &apos;DATA&apos;, got &apos;INVALID&apos;

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/date-formatter-integration.test.ts" timestamp="2025-07-10T02:12:14.341Z" hostname="Davids-Mac-mini.local" tests="13" failures="0" errors="0" skipped="0" time="0.027336333">
        <testcase classname="packages/core/test/date-formatter-integration.test.ts" name="DateFormatter Integration Tests &gt; Real Handlebars Template Compilation &gt; should compile and execute basic helper templates" time="0.00545875">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-integration.test.ts" name="DateFormatter Integration Tests &gt; Real Handlebars Template Compilation &gt; should execute math operations correctly" time="0.001163625">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-integration.test.ts" name="DateFormatter Integration Tests &gt; Real Handlebars Template Compilation &gt; should handle time formatting with padding" time="0.000674459">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-integration.test.ts" name="DateFormatter Integration Tests &gt; Real Handlebars Template Compilation &gt; should execute format embedding correctly" time="0.001341625">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-integration.test.ts" name="DateFormatter Integration Tests &gt; Real Handlebars Template Compilation &gt; should handle ISO date formatting" time="0.001638958">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-integration.test.ts" name="DateFormatter Integration Tests &gt; Real Handlebars Template Compilation &gt; should handle full date formatting" time="0.000961292">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-integration.test.ts" name="DateFormatter Integration Tests &gt; Real Handlebars Template Compilation &gt; should handle time formatting with seconds" time="0.000349542">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-integration.test.ts" name="DateFormatter Integration Tests &gt; Calendar JSON Template Validation &gt; should validate Eberron calendar templates compile successfully" time="0.001587">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-integration.test.ts" name="DateFormatter Integration Tests &gt; Calendar JSON Template Validation &gt; should validate Star Trek calendar templates compile successfully" time="0.001041708">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-integration.test.ts" name="DateFormatter Integration Tests &gt; Calendar JSON Template Validation &gt; should compile all calendar templates without syntax errors" time="0.000859625">
        </testcase>
        <testcase classname="packages/core/test/date-formatter-integration.test.ts" name="DateFormatter Integration Tests &gt; Error Handling with Real Templates &gt; should handle template compilation errors gracefully" time="0.007229791">
            <system-out>
[S&amp;S] Date format template compilation failed: Error: Parse error on line 1:
{{ss-day format=&quot;unclosed-quote}}
----------------^
Expecting &apos;OPEN_SEXPR&apos;, &apos;ID&apos;, &apos;STRING&apos;, &apos;NUMBER&apos;, &apos;BOOLEAN&apos;, &apos;UNDEFINED&apos;, &apos;NULL&apos;, &apos;DATA&apos;, got &apos;INVALID&apos;
    at Parser.parseError [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/parser.js:199:11[90m)[39m
    at Parser.parse [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/parser.js:251:22[90m)[39m
    at parseWithoutProcessing [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/base.js:24:20[90m)[39m
    at HandlebarsEnvironment.parse [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/base.js:30:13[90m)[39m
    at compileInput [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/compiler.js:532:19[90m)[39m
    at ret [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/compiler.js:546:18[90m)[39m
    at DateFormatter.formatWithContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:199:22[90m)[39m
    at DateFormatter.formatNamed [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:296:17[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/date-formatter-integration.test.ts:303:35
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11

            </system-out>
            <system-err>
[S&amp;S] Calendar &quot;Integration Test Calendar&quot; has syntax errors in &quot;bad-template&quot; format: Parse error on line 1:
{{ss-day format=&quot;unclosed-quote}}
----------------^
Expecting &apos;OPEN_SEXPR&apos;, &apos;ID&apos;, &apos;STRING&apos;, &apos;NUMBER&apos;, &apos;BOOLEAN&apos;, &apos;UNDEFINED&apos;, &apos;NULL&apos;, &apos;DATA&apos;, got &apos;INVALID&apos;

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/date-formatter-integration.test.ts" name="DateFormatter Integration Tests &gt; Error Handling with Real Templates &gt; should handle missing helper gracefully" time="0.003635166">
            <system-out>
[S&amp;S] Date format template compilation failed: Error: Missing helper: &quot;ss-nonexistent-helper&quot;
    at Object.&lt;anonymous&gt; [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/helpers/helper-missing.js:10:13[90m)[39m
    at Object.wrapper [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/internal/wrapHelper.js:10:19[90m)[39m
    at Object.eval (eval at createFunctionContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/javascript-compiler.js:265:23), &lt;anonymous&gt;:10:178[90m)[39m
    at main [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/runtime.js:230:22[90m)[39m
    at ret [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/runtime.js:250:12[90m)[39m
    at ret [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/compiler.js:548:21[90m)[39m
    at DateFormatter.formatWithContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:199:22[90m)[39m
    at DateFormatter.format [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:155:17[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/date-formatter-integration.test.ts:313:32
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11 {
  description: [90mundefined[39m,
  fileName: [90mundefined[39m,
  lineNumber: [90mundefined[39m,
  endLineNumber: [90mundefined[39m,
  number: [90mundefined[39m
}

            </system-out>
            <system-err>
[S&amp;S] Date format template has syntax errors: Missing helper: &quot;ss-nonexistent-helper&quot;

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/date-formatter-integration.test.ts" name="DateFormatter Integration Tests &gt; Performance with Real Templates &gt; should cache compiled templates for performance" time="0.000505709">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/date-formatter.test.ts" timestamp="2025-07-10T02:12:14.342Z" hostname="Davids-Mac-mini.local" tests="26" failures="0" errors="0" skipped="0" time="0.07722525">
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Basic Template Compilation &gt; should compile a simple date format template" time="0.004874625">
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Basic Template Compilation &gt; should handle template compilation errors gracefully" time="0.007431833">
            <system-out>
[S&amp;S] Date format template compilation failed: Error: Parse error on line 1:
{{invalid syntax
----------^
Expecting &apos;CLOSE_RAW_BLOCK&apos;, &apos;CLOSE&apos;, &apos;CLOSE_UNESCAPED&apos;, &apos;OPEN_SEXPR&apos;, &apos;CLOSE_SEXPR&apos;, &apos;ID&apos;, &apos;OPEN_BLOCK_PARAMS&apos;, &apos;STRING&apos;, &apos;NUMBER&apos;, &apos;BOOLEAN&apos;, &apos;UNDEFINED&apos;, &apos;NULL&apos;, &apos;DATA&apos;, &apos;SEP&apos;, got &apos;INVALID&apos;
    at Parser.parseError [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/parser.js:199:11[90m)[39m
    at Parser.parse [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/parser.js:251:22[90m)[39m
    at parseWithoutProcessing [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/base.js:24:20[90m)[39m
    at HandlebarsEnvironment.parse [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/base.js:30:13[90m)[39m
    at compileInput [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/compiler.js:532:19[90m)[39m
    at ret [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mhandlebars[24m/lib/handlebars/compiler/compiler.js:546:18[90m)[39m
    at DateFormatter.formatWithContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:199:22[90m)[39m
    at DateFormatter.format [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:155:17[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/date-formatter.test.ts:67:32
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11

            </system-out>
            <system-err>
[S&amp;S] Date format template has syntax errors: Parse error on line 1:
{{invalid syntax
----------^
Expecting &apos;CLOSE_RAW_BLOCK&apos;, &apos;CLOSE&apos;, &apos;CLOSE_UNESCAPED&apos;, &apos;OPEN_SEXPR&apos;, &apos;CLOSE_SEXPR&apos;, &apos;ID&apos;, &apos;OPEN_BLOCK_PARAMS&apos;, &apos;STRING&apos;, &apos;NUMBER&apos;, &apos;BOOLEAN&apos;, &apos;UNDEFINED&apos;, &apos;NULL&apos;, &apos;DATA&apos;, &apos;SEP&apos;, got &apos;INVALID&apos;

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Basic Template Compilation &gt; should cache compiled templates for performance" time="0.000610333">
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Custom Handlebars Helpers &gt; should render day with ordinal formatting" time="0.000887">
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Custom Handlebars Helpers &gt; should render month with abbreviation and name formatting" time="0.000881875">
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Custom Handlebars Helpers &gt; should render weekday names and abbreviations" time="0.000414125">
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Custom Handlebars Helpers &gt; should render month with padding formatting" time="0.00028275">
            <system-out>
[S&amp;S] Month value 10 outside calendar range (1-2), using start of year fallback

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Custom Handlebars Helpers &gt; should render day with padding formatting" time="0.000259209">
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Custom Handlebars Helpers &gt; should handle unresolved format embedding gracefully" time="0.000450625">
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Calendar Schema Integration &gt; should support dateFormats from calendar schema" time="0.000479459">
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Calendar Schema Integration &gt; should support widget-specific formats" time="0.000270334">
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Calendar Schema Integration &gt; should handle missing dateFormats gracefully" time="0.000040833">
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Calendar Schema Integration &gt; should handle variant formats (format as object)" time="0.000220541">
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Format Embedding &gt; should support embedding named formats with {{ss-dateFmt &quot;name&quot;}}" time="0.000423416">
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Format Embedding &gt; should handle nested format embedding" time="0.000520916">
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Format Embedding &gt; should handle missing embedded formats gracefully" time="0.000190791">
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Mathematical Helpers &gt; should render math:add helper for addition calculations" time="0.004638917">
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Mathematical Helpers &gt; should render math:multiply helper for multiplication calculations" time="0.00104125">
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Mathematical Helpers &gt; should render math:subtract helper for subtraction calculations" time="0.000521709">
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Mathematical Helpers &gt; should render stardate helper for stardate calculations" time="0.000401208">
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Mathematical Helpers &gt; should support stardate calculations in calendar templates" time="0.000152834">
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Type Safety Edge Cases &gt; should handle non-string template values gracefully" time="0.001007833">
            <system-out>
[S&amp;S] Invalid template type passed to format(), falling back to basic format
[S&amp;S] Invalid template type passed to format(), falling back to basic format
[S&amp;S] Invalid template type passed to format(), falling back to basic format
[S&amp;S] Invalid template type passed to format(), falling back to basic format

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Type Safety Edge Cases &gt; should handle non-string format value when no variant specified" time="0.000229125">
            <system-out>
[S&amp;S] Invalid template type passed to format(), falling back to basic format

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Type Safety Edge Cases &gt; should handle invalid month values in calculateDayOfYear gracefully" time="0.000603875">
            <system-out>
[S&amp;S] Month value 0 outside calendar range (1-2), using start of year fallback
[S&amp;S] Month value -1 outside calendar range (1-2), using start of year fallback
[S&amp;S] Month value 15 outside calendar range (1-2), using start of year fallback

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Type Safety Edge Cases &gt; should cache compiled templates without size limits" time="0.00683">
        </testcase>
        <testcase classname="packages/core/test/date-formatter.test.ts" name="DateFormatter &gt; Type Safety Edge Cases &gt; should handle large numbers of templates gracefully" time="0.042583583">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/day-of-year-bounds-checking.test.ts" timestamp="2025-07-10T02:12:14.343Z" hostname="Davids-Mac-mini.local" tests="5" failures="0" errors="0" skipped="0" time="0.00489875">
        <testcase classname="packages/core/test/day-of-year-bounds-checking.test.ts" name="Day of Year Bounds Checking &gt; Invalid Month Bounds Handling &gt; should return reasonable dayOfYear for negative month values" time="0.002437">
            <system-out>
[S&amp;S] Month value -1 outside calendar range (1-3), using start of year fallback

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/day-of-year-bounds-checking.test.ts" name="Day of Year Bounds Checking &gt; Invalid Month Bounds Handling &gt; should return reasonable dayOfYear for month values exceeding calendar length" time="0.000364333">
            <system-out>
[S&amp;S] Month value 99 outside calendar range (1-3), using start of year fallback

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/day-of-year-bounds-checking.test.ts" name="Day of Year Bounds Checking &gt; Invalid Month Bounds Handling &gt; should handle zero month (0-based vs 1-based confusion) gracefully" time="0.000782125">
            <system-out>
[S&amp;S] Month value 0 outside calendar range (1-3), using start of year fallback

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/day-of-year-bounds-checking.test.ts" name="Day of Year Bounds Checking &gt; Improved Bounds Checking Requirements &gt; should return meaningful dayOfYear for valid dates" time="0.000262834">
        </testcase>
        <testcase classname="packages/core/test/day-of-year-bounds-checking.test.ts" name="Day of Year Bounds Checking &gt; Improved Bounds Checking Requirements &gt; should return 1 for invalid month to indicate start of year fallback" time="0.000209833">
            <system-out>
[S&amp;S] Month value -5 outside calendar range (1-3), using start of year fallback

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/duplicate-code-consolidation.test.ts" timestamp="2025-07-10T02:12:14.344Z" hostname="Davids-Mac-mini.local" tests="9" failures="0" errors="0" skipped="0" time="0.008248208">
        <testcase classname="packages/core/test/duplicate-code-consolidation.test.ts" name="Duplicate Code Consolidation &gt; Template Caching Logic Consolidation &gt; should use shared template caching for both regular and recursive formatting" time="0.002014583">
        </testcase>
        <testcase classname="packages/core/test/duplicate-code-consolidation.test.ts" name="Duplicate Code Consolidation &gt; Template Caching Logic Consolidation &gt; should cache templates consistently across regular and recursive calls" time="0.00020625">
        </testcase>
        <testcase classname="packages/core/test/duplicate-code-consolidation.test.ts" name="Duplicate Code Consolidation &gt; Preprocessing Logic Consolidation &gt; should use single preprocessing method for both regular and recursive cases" time="0.000164291">
        </testcase>
        <testcase classname="packages/core/test/duplicate-code-consolidation.test.ts" name="Duplicate Code Consolidation &gt; Preprocessing Logic Consolidation &gt; should handle nested embedded formats with circular reference protection" time="0.000718292">
            <system-out>
[S&amp;S] Format &apos;format2&apos; contains circular references, using basic format

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/duplicate-code-consolidation.test.ts" name="Duplicate Code Consolidation &gt; Format Handling Logic Consolidation &gt; should use single formatting method for both public and internal calls" time="0.000215666">
        </testcase>
        <testcase classname="packages/core/test/duplicate-code-consolidation.test.ts" name="Duplicate Code Consolidation &gt; Format Handling Logic Consolidation &gt; should provide consistent error handling across all format methods" time="0.003160542">
            <system-out>
[S&amp;S] Date format template compilation failed: Error: Unknown helper: invalid-helper
    at Object.&lt;anonymous&gt; [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/duplicate-code-consolidation.test.ts:156:15[90m)[39m
    at Object.mockCall [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at Object.spy [as compile] [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at DateFormatter.compileAndCacheTemplate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:166:37[90m)[39m
    at DateFormatter.formatWithContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:193:37[90m)[39m
    at DateFormatter.format [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:155:17[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/duplicate-code-consolidation.test.ts:160:33
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20

            </system-out>
            <system-err>
[S&amp;S] Date format template has syntax errors: Unknown helper: invalid-helper

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/duplicate-code-consolidation.test.ts" name="Duplicate Code Consolidation &gt; Context Preparation Consolidation &gt; should use same context preparation for all format operations" time="0.000339625">
        </testcase>
        <testcase classname="packages/core/test/duplicate-code-consolidation.test.ts" name="Duplicate Code Consolidation &gt; Consolidated Method Signatures &gt; should support optional visited parameter for circular reference protection" time="0.000100375">
        </testcase>
        <testcase classname="packages/core/test/duplicate-code-consolidation.test.ts" name="Duplicate Code Consolidation &gt; Consolidated Method Signatures &gt; should support optional formatName parameter for error context" time="0.000439666">
            <system-out>
[S&amp;S] Date format template compilation failed: Error: Helper not found
    at Object.&lt;anonymous&gt; [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/duplicate-code-consolidation.test.ts:220:15[90m)[39m
    at Object.mockCall [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at Object.spy [as compile] [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at DateFormatter.compileAndCacheTemplate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:166:37[90m)[39m
    at DateFormatter.formatWithContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:193:37[90m)[39m
    at DateFormatter.formatNamed [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:296:17[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/duplicate-code-consolidation.test.ts:224:49
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20

            </system-out>
            <system-err>
[S&amp;S] Calendar &quot;Test Calendar&quot; has syntax errors in &quot;invalid&quot; format: Helper not found

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/external-variants.test.ts" timestamp="2025-07-10T02:12:14.344Z" hostname="Davids-Mac-mini.local" tests="10" failures="0" errors="0" skipped="0" time="0.006901583">
        <testcase classname="packages/core/test/external-variants.test.ts" name="External Calendar Variants System &gt; External Variant File Loading &gt; should load base calendar and external variants successfully" time="0.001910125">
        </testcase>
        <testcase classname="packages/core/test/external-variants.test.ts" name="External Calendar Variants System &gt; External Variant File Loading &gt; should apply external variant overrides correctly" time="0.000480292">
        </testcase>
        <testcase classname="packages/core/test/external-variants.test.ts" name="External Calendar Variants System &gt; External Variant File Loading &gt; should preserve base calendar properties for non-overridden items" time="0.000179708">
        </testcase>
        <testcase classname="packages/core/test/external-variants.test.ts" name="External Calendar Variants System &gt; External Variant File Loading &gt; should handle missing base calendar gracefully" time="0.00010875">
        </testcase>
        <testcase classname="packages/core/test/external-variants.test.ts" name="External Calendar Variants System &gt; External Variant File Loading &gt; should handle invalid external variant file format" time="0.00015">
        </testcase>
        <testcase classname="packages/core/test/external-variants.test.ts" name="External Calendar Variants System &gt; External Variant File Loading &gt; should not auto-resolve to external variants when setting base calendar" time="0.000929375">
        </testcase>
        <testcase classname="packages/core/test/external-variants.test.ts" name="External Calendar Variants System &gt; External Variant File Loading &gt; should allow setting specific external variants directly" time="0.000532625">
        </testcase>
        <testcase classname="packages/core/test/external-variants.test.ts" name="External Calendar Variants System &gt; External Variant File Loading &gt; should create calendar engines for external variants" time="0.000521833">
        </testcase>
        <testcase classname="packages/core/test/external-variants.test.ts" name="External Calendar Variants System &gt; External Variant File Loading &gt; should update variant calendar translations to show variant name" time="0.000593541">
        </testcase>
        <testcase classname="packages/core/test/external-variants.test.ts" name="External Calendar Variants System &gt; External Variant File Validation &gt; should validate required external variant file fields" time="0.000122334">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/federation-standard-widget-format.test.ts" timestamp="2025-07-10T02:12:14.345Z" hostname="Davids-Mac-mini.local" tests="2" failures="0" errors="0" skipped="0" time="0.003995833">
        <testcase classname="packages/core/test/federation-standard-widget-format.test.ts" name="Calendar Variant DateFormats Override &gt; should apply dateFormats overrides from calendar variants" time="0.001929375">
            <system-out>
Federation calendar dateFormats: {
  [32m&apos;tng-stardate&apos;[39m: [32m&apos;{{ss-stardate year prefix=&quot;47&quot; baseYear=2370 dayOfYear=dayOfYear precision=1}}&apos;[39m,
  widgets: {
    mini: [32m&apos;SD {{ss-dateFmt formatName=&quot;tng-stardate&quot;}}&apos;[39m,
    main: [32m&apos;{{ss-weekday format=&quot;abbr&quot;}}, {{ss-month format=&quot;name&quot;}} {{ss-day format=&quot;ordinal&quot;}}&apos;[39m,
    grid: [32m&apos;{{ss-day}}&apos;[39m
  }
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/federation-standard-widget-format.test.ts" name="Calendar Variant DateFormats Override &gt; should format mini widget using variant dateFormats" time="0.001511834">
            <system-out>
Mini widget result: SD 47015.0
Federation calendar dateFormats: {
  [32m&apos;tng-stardate&apos;[39m: [32m&apos;{{ss-stardate year prefix=&quot;47&quot; baseYear=2370 dayOfYear=dayOfYear precision=1}}&apos;[39m,
  widgets: {
    mini: [32m&apos;SD {{ss-dateFmt formatName=&quot;tng-stardate&quot;}}&apos;[39m,
    main: [32m&apos;{{ss-weekday format=&quot;abbr&quot;}}, {{ss-month format=&quot;name&quot;}} {{ss-day format=&quot;ordinal&quot;}}&apos;[39m,
    grid: [32m&apos;{{ss-day}}&apos;[39m
  }
}

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/golarion-variants-integration.test.ts" timestamp="2025-07-10T02:12:14.345Z" hostname="Davids-Mac-mini.local" tests="5" failures="0" errors="0" skipped="0" time="0.016089667">
        <testcase classname="packages/core/test/golarion-variants-integration.test.ts" name="Golarion Variants Integration &gt; should load Golarion calendar with all 4 variants plus base calendar" time="0.007546167">
        </testcase>
        <testcase classname="packages/core/test/golarion-variants-integration.test.ts" name="Golarion Variants Integration &gt; should correctly apply imperial calendar overrides" time="0.002437542">
        </testcase>
        <testcase classname="packages/core/test/golarion-variants-integration.test.ts" name="Golarion Variants Integration &gt; should correctly apply earth historical overrides" time="0.001671292">
        </testcase>
        <testcase classname="packages/core/test/golarion-variants-integration.test.ts" name="Golarion Variants Integration &gt; should resolve to default variant when setting base calendar" time="0.00143625">
        </testcase>
        <testcase classname="packages/core/test/golarion-variants-integration.test.ts" name="Golarion Variants Integration &gt; should allow setting specific variants directly" time="0.001525042">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/gregorian-weekday-bug.test.ts" timestamp="2025-07-10T02:12:14.345Z" hostname="Davids-Mac-mini.local" tests="30" failures="0" errors="0" skipped="0" time="0.06792075">
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Known Real-World Dates &gt; should correctly calculate weekday for January 1, 2024 (Monday)" time="0.002842458">
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Known Real-World Dates &gt; should correctly calculate weekday for December 25, 2024 (Wednesday)" time="0.000713209">
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Known Real-World Dates &gt; should correctly calculate weekday for June 17, 2025 (Tuesday)" time="0.000736167">
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Known Real-World Dates &gt; should correctly calculate weekday for February 29, 2024 (Thursday)" time="0.000690208">
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Known Real-World Dates &gt; should correctly calculate weekday for January 1, 2000 (Saturday)" time="0.000684541">
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Known Real-World Dates &gt; should correctly calculate weekday for January 1, 1900 (Monday)" time="0.000647917">
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Extended Real-World Date Testing &gt; should correctly calculate weekday for New Years Day 2023" time="0.002679542">
            <system-out>

Testing: New Years Day 2023
Date: 2023/1/1
Expected: Sunday (index 0)
Calculated: Sunday (index 0)
✅ CORRECT: Weekday matches expected value

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Extended Real-World Date Testing &gt; should correctly calculate weekday for Independence Day 2023" time="0.001274334">
            <system-out>

Testing: Independence Day 2023
Date: 2023/7/4
Expected: Tuesday (index 2)
Calculated: Tuesday (index 2)
✅ CORRECT: Weekday matches expected value

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Extended Real-World Date Testing &gt; should correctly calculate weekday for Christmas 2023" time="0.000854">
            <system-out>

Testing: Christmas 2023
Date: 2023/12/25
Expected: Monday (index 1)
Calculated: Monday (index 1)
✅ CORRECT: Weekday matches expected value

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Extended Real-World Date Testing &gt; should correctly calculate weekday for New Years Eve 2023" time="0.000707042">
            <system-out>

Testing: New Years Eve 2023
Date: 2023/12/31
Expected: Sunday (index 0)
Calculated: Sunday (index 0)
✅ CORRECT: Weekday matches expected value

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Extended Real-World Date Testing &gt; should correctly calculate weekday for St. Patricks Day 2024" time="0.00069075">
            <system-out>

Testing: St. Patricks Day 2024
Date: 2024/3/17
Expected: Sunday (index 0)
Calculated: Sunday (index 0)
✅ CORRECT: Weekday matches expected value

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Extended Real-World Date Testing &gt; should correctly calculate weekday for April Fools 2024" time="0.000758583">
            <system-out>

Testing: April Fools 2024
Date: 2024/4/1
Expected: Monday (index 1)
Calculated: Monday (index 1)
✅ CORRECT: Weekday matches expected value

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Extended Real-World Date Testing &gt; should correctly calculate weekday for Independence Day 2024" time="0.005128708">
            <system-out>

Testing: Independence Day 2024
Date: 2024/7/4
Expected: Thursday (index 4)
Calculated: Thursday (index 4)
✅ CORRECT: Weekday matches expected value

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Extended Real-World Date Testing &gt; should correctly calculate weekday for Halloween 2024" time="0.00048975">
            <system-out>

Testing: Halloween 2024
Date: 2024/10/31
Expected: Thursday (index 4)
Calculated: Thursday (index 4)
✅ CORRECT: Weekday matches expected value

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Extended Real-World Date Testing &gt; should correctly calculate weekday for Thanksgiving 2024" time="0.000521958">
            <system-out>

Testing: Thanksgiving 2024
Date: 2024/11/28
Expected: Thursday (index 4)
Calculated: Thursday (index 4)
✅ CORRECT: Weekday matches expected value

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Extended Real-World Date Testing &gt; should correctly calculate weekday for New Years Day 2025" time="0.0004555">
            <system-out>

Testing: New Years Day 2025
Date: 2025/1/1
Expected: Wednesday (index 3)
Calculated: Wednesday (index 3)
✅ CORRECT: Weekday matches expected value

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Extended Real-World Date Testing &gt; should correctly calculate weekday for Independence Day 2025" time="0.001409125">
            <system-out>

Testing: Independence Day 2025
Date: 2025/7/4
Expected: Friday (index 5)
Calculated: Friday (index 5)
✅ CORRECT: Weekday matches expected value

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Extended Real-World Date Testing &gt; should correctly calculate weekday for Christmas 2025" time="0.000482542">
            <system-out>

Testing: Christmas 2025
Date: 2025/12/25
Expected: Thursday (index 4)
Calculated: Thursday (index 4)
✅ CORRECT: Weekday matches expected value

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Extended Real-World Date Testing &gt; should correctly calculate weekday for New Years Day 2026" time="0.000456083">
            <system-out>

Testing: New Years Day 2026
Date: 2026/1/1
Expected: Thursday (index 4)
Calculated: Thursday (index 4)
✅ CORRECT: Weekday matches expected value

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Extended Real-World Date Testing &gt; should correctly calculate weekday for Moon Landing 1969" time="0.000502459">
            <system-out>

Testing: Moon Landing 1969
Date: 1969/7/20
Expected: Sunday (index 0)
Calculated: Sunday (index 0)
✅ CORRECT: Weekday matches expected value

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Extended Real-World Date Testing &gt; should correctly calculate weekday for Berlin Wall Falls 1989" time="0.000502833">
            <system-out>

Testing: Berlin Wall Falls 1989
Date: 1989/11/9
Expected: Thursday (index 4)
Calculated: Thursday (index 4)
✅ CORRECT: Weekday matches expected value

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Extended Real-World Date Testing &gt; should correctly calculate weekday for September 11, 2001" time="0.000501417">
            <system-out>

Testing: September 11, 2001
Date: 2001/9/11
Expected: Tuesday (index 2)
Calculated: Tuesday (index 2)
✅ CORRECT: Weekday matches expected value

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Extended Real-World Date Testing &gt; should correctly calculate weekday for Leap Day 2020" time="0.000517666">
            <system-out>

Testing: Leap Day 2020
Date: 2020/2/29
Expected: Saturday (index 6)
Calculated: Saturday (index 6)
✅ CORRECT: Weekday matches expected value

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Extended Real-World Date Testing &gt; should correctly calculate weekday for Leap Day 2028" time="0.0005225">
            <system-out>

Testing: Leap Day 2028
Date: 2028/2/29
Expected: Tuesday (index 2)
Calculated: Tuesday (index 2)
✅ CORRECT: Weekday matches expected value

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Extended Real-World Date Testing &gt; should correctly calculate weekday for Start of 19th Century" time="0.000516792">
            <system-out>

Testing: Start of 19th Century
Date: 1800/1/1
Expected: Wednesday (index 3)
Calculated: Wednesday (index 3)
✅ CORRECT: Weekday matches expected value

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Extended Real-World Date Testing &gt; should correctly calculate weekday for Start of 22nd Century (not leap year)" time="0.000595917">
            <system-out>

Testing: Start of 22nd Century (not leap year)
Date: 2100/1/1
Expected: Friday (index 5)
Calculated: Friday (index 5)
✅ CORRECT: Weekday matches expected value

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Edge Case Testing &gt; should handle month boundaries correctly" time="0.00554475">
            <system-out>

=== MONTH BOUNDARY TESTING ===
2023 (non-leap): Feb 28 = 2, Mar 1 = 3
2024 (leap): Feb 28 = 3, Feb 29 = 4, Mar 1 = 5
✅ MONTH BOUNDARIES: Correctly handled leap year differences

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Edge Case Testing &gt; should handle year boundaries correctly" time="0.004621833">
            <system-out>

=== YEAR BOUNDARY TESTING ===
2023/12/31 -&gt; 2024/1/1: 0 -&gt; 1
2024/12/31 -&gt; 2025/1/1: 2 -&gt; 3
2025/12/31 -&gt; 2026/1/1: 3 -&gt; 4
✅ YEAR BOUNDARIES: Correctly handled year transitions

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Edge Case Testing &gt; should handle century leap year rules correctly" time="0.011522792">
            <system-out>

=== CENTURY LEAP YEAR TESTING ===
1700: isLeap=false, length=365 (Not divisible by 400)
1800: isLeap=false, length=365 (Not divisible by 400)
1900: isLeap=false, length=365 (Not divisible by 400)
2000: isLeap=true, length=366 (Divisible by 400)
2100: isLeap=false, length=365 (Not divisible by 400)
2400: isLeap=true, length=366 (Divisible by 400)
✅ CENTURY LEAP YEARS: Correctly handled special leap year rules

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/gregorian-weekday-bug.test.ts" name="Gregorian Calendar Weekday Calculation Bug Fix &gt; Calendar Integration &gt; should return consistent weekday through worldTimeToDate conversion" time="0.019237583">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/helper-context-usage.test.ts" timestamp="2025-07-10T02:12:14.347Z" hostname="Davids-Mac-mini.local" tests="3" failures="0" errors="0" skipped="0" time="0.008268875">
        <testcase classname="packages/core/test/helper-context-usage.test.ts" name="Helper Context Usage &gt; should use context for time helpers without explicit parameters" time="0.005000666">
        </testcase>
        <testcase classname="packages/core/test/helper-context-usage.test.ts" name="Helper Context Usage &gt; should still support explicit parameter style for backward compatibility" time="0.000986542">
        </testcase>
        <testcase classname="packages/core/test/helper-context-usage.test.ts" name="Helper Context Usage &gt; should handle context-based helpers when time is undefined" time="0.00145675">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/helper-parameter-verification.test.ts" timestamp="2025-07-10T02:12:14.347Z" hostname="Davids-Mac-mini.local" tests="3" failures="0" errors="0" skipped="0" time="0.002861125">
        <testcase classname="packages/core/test/helper-parameter-verification.test.ts" name="Helper Parameter Verification &gt; should register ss-hour helper with correct parameter handling" time="0.001854792">
        </testcase>
        <testcase classname="packages/core/test/helper-parameter-verification.test.ts" name="Helper Parameter Verification &gt; should handle ss-hour helper parameters correctly" time="0.000283583">
        </testcase>
        <testcase classname="packages/core/test/helper-parameter-verification.test.ts" name="Helper Parameter Verification &gt; should handle undefined/null hour values gracefully" time="0.000223125">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/integration-detection-timing.test.ts" timestamp="2025-07-10T02:12:14.347Z" hostname="Davids-Mac-mini.local" tests="2" failures="0" errors="0" skipped="0" time="0.264137417">
        <testcase classname="packages/core/test/integration-detection-timing.test.ts" name="Integration Detection Timing Regression Test &gt; should not be null - regression test for integration detection timing issue" time="0.239520834">
        </testcase>
        <testcase classname="packages/core/test/integration-detection-timing.test.ts" name="Integration Detection Timing Regression Test &gt; should return null when game.seasonsStars.manager is not available" time="0.024012375">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/intercalary-null-safety.test.ts" timestamp="2025-07-10T02:12:14.347Z" hostname="Davids-Mac-mini.local" tests="4" failures="0" errors="0" skipped="0" time="0.008310833">
        <testcase classname="packages/core/test/intercalary-null-safety.test.ts" name="Intercalary Days Null Safety &gt; getIntercalaryDaysAfterMonth handles invalid month index gracefully" time="0.0018905">
            <system-out>

=== INTERCALARY NULL SAFETY TEST ===
Testing valid month index:
  Month 1 intercalary days: 1
Testing invalid month index (beyond array bounds):
  Month 10 intercalary days: 0
Testing month index 0 (edge case):
  Month 0 intercalary days: 0
✅ INTERCALARY NULL SAFETY: All edge cases handled gracefully

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/intercalary-null-safety.test.ts" name="Intercalary Days Null Safety &gt; dateToWorldTime handles out-of-bounds month gracefully in intercalary calculation" time="0.001231375">
            <system-out>

=== DATE TO WORLDTIME NULL SAFETY TEST ===
Testing dateToWorldTime with intercalary referencing nonexistent month:
  Date 2024/1/15 -&gt; worldTime: 5422291200
✅ WORLDTIME NULL SAFETY: Out-of-bounds intercalary references handled gracefully

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/intercalary-null-safety.test.ts" name="Intercalary Days Null Safety &gt; addDays handles intercalary calculation with invalid month references" time="0.003803584">
            <system-out>

=== ADD DAYS NULL SAFETY TEST ===
Testing addDays with mixed valid/invalid intercalary references:
  2024/1/15 + 20 days -&gt; 2024/2/4
✅ ADD DAYS NULL SAFETY: Mixed intercalary references handled gracefully

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/intercalary-null-safety.test.ts" name="Intercalary Days Null Safety &gt; calculateWeekday handles intercalary calculation with invalid month references" time="0.000517584">
            <system-out>

=== WEEKDAY CALCULATION NULL SAFETY TEST ===
Testing calculateWeekday with invalid intercalary month references:
  Weekday for 2024/1/15: 0
✅ WEEKDAY CALCULATION NULL SAFETY: Invalid intercalary references handled gracefully

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/intercalary-round-trip.test.ts" timestamp="2025-07-10T02:12:14.348Z" hostname="Davids-Mac-mini.local" tests="7" failures="0" errors="0" skipped="0" time="0.0212665">
        <testcase classname="packages/core/test/intercalary-round-trip.test.ts" name="Intercalary Date Round-Trip Conversion &gt; Mitterfruhl Intercalary Day &gt; should convert intercalary date to worldTime and back correctly" time="0.00406075">
        </testcase>
        <testcase classname="packages/core/test/intercalary-round-trip.test.ts" name="Intercalary Date Round-Trip Conversion &gt; Mitterfruhl Intercalary Day &gt; should not convert intercalary date to regular day 2" time="0.001231917">
        </testcase>
        <testcase classname="packages/core/test/intercalary-round-trip.test.ts" name="Intercalary Date Round-Trip Conversion &gt; Mitterfruhl Intercalary Day &gt; should handle multi-day intercalary periods correctly" time="0.005113917">
        </testcase>
        <testcase classname="packages/core/test/intercalary-round-trip.test.ts" name="Intercalary Date Round-Trip Conversion &gt; Regular Date Conversion (Regression Prevention) &gt; should still handle regular dates correctly" time="0.001852584">
        </testcase>
        <testcase classname="packages/core/test/intercalary-round-trip.test.ts" name="Intercalary Date Round-Trip Conversion &gt; Regular Date Conversion (Regression Prevention) &gt; should handle last day of month before intercalary correctly" time="0.005094458">
        </testcase>
        <testcase classname="packages/core/test/intercalary-round-trip.test.ts" name="Intercalary Date Round-Trip Conversion &gt; Regular Date Conversion (Regression Prevention) &gt; should handle first day of next month after intercalary correctly" time="0.002315958">
        </testcase>
        <testcase classname="packages/core/test/intercalary-round-trip.test.ts" name="Intercalary Date Round-Trip Conversion &gt; Edge Cases &gt; should handle intercalary dates with time components" time="0.000791042">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/logger.test.ts" timestamp="2025-07-10T02:12:14.348Z" hostname="Davids-Mac-mini.local" tests="21" failures="0" errors="0" skipped="0" time="0.0067795">
        <testcase classname="packages/core/test/logger.test.ts" name="Logger &gt; Debug Mode Settings Integration &gt; should respect debugMode setting for debug logs" time="0.001823209">
        </testcase>
        <testcase classname="packages/core/test/logger.test.ts" name="Logger &gt; Debug Mode Settings Integration &gt; should show debug logs when debugMode is enabled" time="0.00075925">
        </testcase>
        <testcase classname="packages/core/test/logger.test.ts" name="Logger &gt; Debug Mode Settings Integration &gt; should handle missing game.settings gracefully" time="0.000468792">
        </testcase>
        <testcase classname="packages/core/test/logger.test.ts" name="Logger &gt; User Notification Settings &gt; should show UI notifications when showNotifications is enabled" time="0.000167875">
        </testcase>
        <testcase classname="packages/core/test/logger.test.ts" name="Logger &gt; User Notification Settings &gt; should suppress UI notifications when showNotifications is disabled" time="0.000120125">
        </testcase>
        <testcase classname="packages/core/test/logger.test.ts" name="Logger &gt; User Notification Settings &gt; should handle missing ui.notifications gracefully" time="0.000144583">
        </testcase>
        <testcase classname="packages/core/test/logger.test.ts" name="Logger &gt; Log Level Methods &gt; should log info messages with proper formatting" time="0.000205209">
        </testcase>
        <testcase classname="packages/core/test/logger.test.ts" name="Logger &gt; Log Level Methods &gt; should log warnings with console and UI notifications" time="0.00010075">
        </testcase>
        <testcase classname="packages/core/test/logger.test.ts" name="Logger &gt; Log Level Methods &gt; should log errors with console and UI notifications" time="0.0002935">
        </testcase>
        <testcase classname="packages/core/test/logger.test.ts" name="Logger &gt; Log Level Methods &gt; should handle undefined data parameters gracefully" time="0.000143208">
        </testcase>
        <testcase classname="packages/core/test/logger.test.ts" name="Logger &gt; Specialized Logging Methods &gt; should log critical errors with proper formatting" time="0.000090375">
        </testcase>
        <testcase classname="packages/core/test/logger.test.ts" name="Logger &gt; Specialized Logging Methods &gt; should log API calls with debug formatting" time="0.000157042">
        </testcase>
        <testcase classname="packages/core/test/logger.test.ts" name="Logger &gt; Specialized Logging Methods &gt; should log integrations with debug formatting" time="0.000063792">
        </testcase>
        <testcase classname="packages/core/test/logger.test.ts" name="Logger &gt; Specialized Logging Methods &gt; should suppress API and integration logs when debug mode is disabled" time="0.00007225">
        </testcase>
        <testcase classname="packages/core/test/logger.test.ts" name="Logger &gt; Performance Timing Utilities &gt; should start performance timing" time="0.000233375">
        </testcase>
        <testcase classname="packages/core/test/logger.test.ts" name="Logger &gt; Performance Timing Utilities &gt; should end performance timing" time="0.000057583">
        </testcase>
        <testcase classname="packages/core/test/logger.test.ts" name="Logger &gt; Performance Timing Utilities &gt; should suppress timing when debug mode is disabled" time="0.000054334">
        </testcase>
        <testcase classname="packages/core/test/logger.test.ts" name="Logger &gt; Settings Availability Edge Cases &gt; should handle missing settings.get method" time="0.000089125">
        </testcase>
        <testcase classname="packages/core/test/logger.test.ts" name="Logger &gt; Settings Availability Edge Cases &gt; should handle settings.get throwing errors" time="0.000090667">
        </testcase>
        <testcase classname="packages/core/test/logger.test.ts" name="Logger &gt; Settings Availability Edge Cases &gt; should handle null/undefined settings values" time="0.000096709">
        </testcase>
        <testcase classname="packages/core/test/logger.test.ts" name="Logger &gt; Console Availability Edge Cases &gt; should handle missing console methods gracefully" time="0.000081375">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/manager-access-utils.test.ts" timestamp="2025-07-10T02:12:14.349Z" hostname="Davids-Mac-mini.local" tests="25" failures="0" errors="0" skipped="0" time="0.006694042">
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; getManagerState &gt; should return complete manager state when everything is available" time="0.00250275">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; getManagerState &gt; should return null manager when game.seasonsStars is missing" time="0.000139166">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; getManagerState &gt; should return null manager when game.seasonsStars.manager is missing" time="0.000304708">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; getManagerState &gt; should handle null active calendar" time="0.000096833">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; getManagerState &gt; should handle null current date" time="0.000167209">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; getManagerState &gt; should handle manager methods throwing errors" time="0.000105584">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; createErrorContext &gt; should create error context with provided error message" time="0.000087416">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; createErrorContext &gt; should handle different error messages" time="0.000252666">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; isManagerReady &gt; should return true when manager is available" time="0.000187833">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; isManagerReady &gt; should return false when manager is null" time="0.000073667">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; isManagerReady &gt; should return false when game.seasonsStars is missing" time="0.000092666">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; getFormattedDate &gt; should format date when calendar and current date are available" time="0.000129791">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; getFormattedDate &gt; should return &quot;Not Available&quot; when current date is null" time="0.000066542">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; getFormattedDate &gt; should return &quot;Not Available&quot; when active calendar is null" time="0.000052167">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; getFormattedDate &gt; should return &quot;Not Available&quot; when manager is null" time="0.000047084">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; getFormattedDate &gt; should handle months array edge cases" time="0.000084541">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; getFormattedDate &gt; should handle missing month name gracefully" time="0.000048209">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; getFormattedDate &gt; should return &quot;Format Error&quot; when formatting throws an error" time="0.000051667">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; getFormattedDate &gt; should handle calendar with empty months array" time="0.000056542">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; getFormattedDate &gt; should handle different month indices correctly" time="0.000065416">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; Error Handling and Edge Cases &gt; should handle completely broken game object" time="0.000067">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; Error Handling and Edge Cases &gt; should handle manager with partial functionality" time="0.00011075">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; Error Handling and Edge Cases &gt; should be resilient to undefined properties" time="0.000079834">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; Performance and Caching &gt; should call manager methods each time (no caching)" time="0.000084917">
        </testcase>
        <testcase classname="packages/core/test/manager-access-utils.test.ts" name="ManagerAccessUtils &gt; Performance and Caching &gt; should handle rapid successive calls correctly" time="0.00008325">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/module-api.test.ts" timestamp="2025-07-10T02:12:14.350Z" hostname="Davids-Mac-mini.local" tests="32" failures="0" errors="0" skipped="0" time="0.024094041">
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Time Advancement Methods &gt; advanceDays &gt; should advance days successfully" time="0.012534458">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Time Advancement Methods &gt; advanceDays &gt; should validate days parameter" time="0.000983833">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Time Advancement Methods &gt; advanceDays &gt; should reject calendar-specific operations" time="0.000342667">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Time Advancement Methods &gt; advanceDays &gt; should handle negative days" time="0.00018575">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Time Advancement Methods &gt; advanceHours &gt; should advance hours successfully" time="0.000299208">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Time Advancement Methods &gt; advanceHours &gt; should validate hours parameter" time="0.000223417">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Time Advancement Methods &gt; advanceMinutes &gt; should advance minutes successfully" time="0.000514333">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Time Advancement Methods &gt; advanceMinutes &gt; should validate minutes parameter" time="0.000369917">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Time Advancement Methods &gt; advanceWeeks &gt; should advance weeks successfully" time="0.001158458">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Time Advancement Methods &gt; advanceWeeks &gt; should validate weeks parameter" time="0.000372208">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Time Advancement Methods &gt; advanceMonths &gt; should advance months successfully" time="0.000225667">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Time Advancement Methods &gt; advanceMonths &gt; should validate months parameter" time="0.000292958">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Time Advancement Methods &gt; advanceYears &gt; should advance years successfully" time="0.000204208">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Time Advancement Methods &gt; advanceYears &gt; should validate years parameter" time="0.000197375">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Date Conversion Methods &gt; formatDate &gt; should format date successfully" time="0.000733959">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Date Conversion Methods &gt; formatDate &gt; should validate date parameter" time="0.000433792">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Date Conversion Methods &gt; formatDate &gt; should validate date structure" time="0.000273958">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Date Conversion Methods &gt; formatDate &gt; should handle missing active calendar" time="0.000174375">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Date Conversion Methods &gt; dateToWorldTime &gt; should convert date to world time successfully" time="0.000319875">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Date Conversion Methods &gt; dateToWorldTime &gt; should validate date parameter" time="0.000176875">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Date Conversion Methods &gt; dateToWorldTime &gt; should handle specific calendar engine" time="0.000208542">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Date Conversion Methods &gt; dateToWorldTime &gt; should handle missing engine" time="0.000184292">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Date Conversion Methods &gt; dateToWorldTime &gt; should handle missing specific calendar engine" time="0.000171792">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Date Conversion Methods &gt; worldTimeToDate &gt; should convert world time to date successfully" time="0.000522292">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Date Conversion Methods &gt; worldTimeToDate &gt; should validate timestamp parameter" time="0.000292625">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Date Conversion Methods &gt; worldTimeToDate &gt; should handle infinite timestamps" time="0.000219375">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Date Conversion Methods &gt; worldTimeToDate &gt; should handle specific calendar engine" time="0.000312416">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Date Conversion Methods &gt; worldTimeToDate &gt; should handle missing engine" time="0.000176792">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Error Propagation &gt; should propagate manager errors in advance methods" time="0.00025225">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Error Propagation &gt; should propagate engine errors in conversion methods" time="0.000237375">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Integration with APIWrapper &gt; should use APIWrapper for async methods" time="0.0003">
        </testcase>
        <testcase classname="packages/core/test/module-api.test.ts" name="Module API Methods &gt; Integration with APIWrapper &gt; should use APIWrapper validation for sync methods" time="0.000182084">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/moon-overrides.test.ts" timestamp="2025-07-10T02:12:14.351Z" hostname="Davids-Mac-mini.local" tests="2" failures="0" errors="0" skipped="0" time="0.002460708">
        <testcase classname="packages/core/test/moon-overrides.test.ts" name="Moon Overrides in Calendar Variants &gt; should override moons property with empty array" time="0.001638041">
        </testcase>
        <testcase classname="packages/core/test/moon-overrides.test.ts" name="Moon Overrides in Calendar Variants &gt; should override moons with different moon configuration" time="0.000325667">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/moon-phase-tracking.test.ts" timestamp="2025-07-10T02:12:14.351Z" hostname="Davids-Mac-mini.local" tests="18" failures="0" errors="0" skipped="0" time="0.039203167">
        <testcase classname="packages/core/test/moon-phase-tracking.test.ts" name="Moon Phase Tracking &gt; Basic Moon Phase Calculation &gt; should return moon data for Simple Calendar bridge compatibility" time="0.00330675">
        </testcase>
        <testcase classname="packages/core/test/moon-phase-tracking.test.ts" name="Moon Phase Tracking &gt; Basic Moon Phase Calculation &gt; should calculate moon phase for reference new moon date" time="0.001942541">
        </testcase>
        <testcase classname="packages/core/test/moon-phase-tracking.test.ts" name="Moon Phase Tracking &gt; Basic Moon Phase Calculation &gt; should calculate correct phase progression from new moon" time="0.007406667">
        </testcase>
        <testcase classname="packages/core/test/moon-phase-tracking.test.ts" name="Moon Phase Tracking &gt; Basic Moon Phase Calculation &gt; should handle dates before reference date" time="0.001018334">
        </testcase>
        <testcase classname="packages/core/test/moon-phase-tracking.test.ts" name="Moon Phase Tracking &gt; Basic Moon Phase Calculation &gt; should calculate cycle correctly across multiple cycles" time="0.001839333">
        </testcase>
        <testcase classname="packages/core/test/moon-phase-tracking.test.ts" name="Moon Phase Tracking &gt; Multiple Moons Support &gt; should return all moons" time="0.000462958">
        </testcase>
        <testcase classname="packages/core/test/moon-phase-tracking.test.ts" name="Moon Phase Tracking &gt; Multiple Moons Support &gt; should calculate phases for all moons" time="0.007301375">
        </testcase>
        <testcase classname="packages/core/test/moon-phase-tracking.test.ts" name="Moon Phase Tracking &gt; Multiple Moons Support &gt; should filter by moon name" time="0.00180275">
        </testcase>
        <testcase classname="packages/core/test/moon-phase-tracking.test.ts" name="Moon Phase Tracking &gt; WorldTime Integration &gt; should calculate moon phases from world time" time="0.000993833">
        </testcase>
        <testcase classname="packages/core/test/moon-phase-tracking.test.ts" name="Moon Phase Tracking &gt; WorldTime Integration &gt; should get current moon phases" time="0.001979083">
        </testcase>
        <testcase classname="packages/core/test/moon-phase-tracking.test.ts" name="Moon Phase Tracking &gt; WorldTime Integration &gt; should handle missing game object gracefully" time="0.001281125">
        </testcase>
        <testcase classname="packages/core/test/moon-phase-tracking.test.ts" name="Moon Phase Tracking &gt; Edge Cases &gt; should handle calendar without moons" time="0.000153541">
        </testcase>
        <testcase classname="packages/core/test/moon-phase-tracking.test.ts" name="Moon Phase Tracking &gt; Edge Cases &gt; should handle empty moons array" time="0.000175625">
        </testcase>
        <testcase classname="packages/core/test/moon-phase-tracking.test.ts" name="Moon Phase Tracking &gt; Edge Cases &gt; should validate phase length totals equal cycle length" time="0.000108209">
        </testcase>
        <testcase classname="packages/core/test/moon-phase-tracking.test.ts" name="Moon Phase Tracking &gt; Edge Cases &gt; should handle very distant dates" time="0.001847917">
        </testcase>
        <testcase classname="packages/core/test/moon-phase-tracking.test.ts" name="Moon Phase Tracking &gt; Phase Information Accuracy &gt; should provide accurate days until next phase" time="0.001376167">
        </testcase>
        <testcase classname="packages/core/test/moon-phase-tracking.test.ts" name="Moon Phase Tracking &gt; Phase Information Accuracy &gt; should provide accurate day in phase" time="0.001503333">
        </testcase>
        <testcase classname="packages/core/test/moon-phase-tracking.test.ts" name="Moon Phase Tracking &gt; Real-world Lunar Accuracy &gt; should match known lunar events for 2024" time="0.003636375">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/multi-moon-calendars.test.ts" timestamp="2025-07-10T02:12:14.352Z" hostname="Davids-Mac-mini.local" tests="12" failures="0" errors="0" skipped="0" time="0.030680334">
        <testcase classname="packages/core/test/multi-moon-calendars.test.ts" name="Multi-Moon Calendar Integration &gt; Exandrian Calendar (Critical Role) &gt; should have Catha and Ruidus moons configured" time="0.0017725">
        </testcase>
        <testcase classname="packages/core/test/multi-moon-calendars.test.ts" name="Multi-Moon Calendar Integration &gt; Exandrian Calendar (Critical Role) &gt; should calculate different phases for Catha and Ruidus" time="0.002619042">
        </testcase>
        <testcase classname="packages/core/test/multi-moon-calendars.test.ts" name="Multi-Moon Calendar Integration &gt; Exandrian Calendar (Critical Role) &gt; should handle filtering by moon name" time="0.001018">
        </testcase>
        <testcase classname="packages/core/test/multi-moon-calendars.test.ts" name="Multi-Moon Calendar Integration &gt; Exandrian Calendar (Critical Role) &gt; should calculate Catha phases correctly (33-day cycle)" time="0.000539">
        </testcase>
        <testcase classname="packages/core/test/multi-moon-calendars.test.ts" name="Multi-Moon Calendar Integration &gt; Exandrian Calendar (Critical Role) &gt; should show Ruidus has longer phases (41-day phases)" time="0.000535875">
        </testcase>
        <testcase classname="packages/core/test/multi-moon-calendars.test.ts" name="Multi-Moon Calendar Integration &gt; Gregorian Calendar with Luna &gt; should have Luna moon configured" time="0.00018325">
        </testcase>
        <testcase classname="packages/core/test/multi-moon-calendars.test.ts" name="Multi-Moon Calendar Integration &gt; Gregorian Calendar with Luna &gt; should calculate Earth lunar phases correctly" time="0.005168333">
        </testcase>
        <testcase classname="packages/core/test/multi-moon-calendars.test.ts" name="Multi-Moon Calendar Integration &gt; Gregorian Calendar with Luna &gt; should progress through standard lunar phases" time="0.008167333">
        </testcase>
        <testcase classname="packages/core/test/multi-moon-calendars.test.ts" name="Multi-Moon Calendar Integration &gt; Cross-Calendar Moon Comparison &gt; should handle different moon configurations" time="0.000413792">
        </testcase>
        <testcase classname="packages/core/test/multi-moon-calendars.test.ts" name="Multi-Moon Calendar Integration &gt; Cross-Calendar Moon Comparison &gt; should demonstrate multi-moon vs single-moon behavior" time="0.008022667">
        </testcase>
        <testcase classname="packages/core/test/multi-moon-calendars.test.ts" name="Multi-Moon Calendar Integration &gt; Real Calendar Integration Tests &gt; should handle calendar loading and moon calculations" time="0.000509208">
        </testcase>
        <testcase classname="packages/core/test/multi-moon-calendars.test.ts" name="Multi-Moon Calendar Integration &gt; Real Calendar Integration Tests &gt; should validate moon phase totals equal cycle lengths" time="0.000362291">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/note-deletion-cleanup.test.ts" timestamp="2025-07-10T02:12:14.353Z" hostname="Davids-Mac-mini.local" tests="4" failures="0" errors="0" skipped="0" time="0.00470325">
        <testcase classname="packages/core/test/note-deletion-cleanup.test.ts" name="Note Deletion Cleanup (Issue #22) &gt; should clean up calendar notes when journals are deleted externally" time="0.002582959">
        </testcase>
        <testcase classname="packages/core/test/note-deletion-cleanup.test.ts" name="Note Deletion Cleanup (Issue #22) &gt; should ignore non-calendar journals during deletion" time="0.000409958">
        </testcase>
        <testcase classname="packages/core/test/note-deletion-cleanup.test.ts" name="Note Deletion Cleanup (Issue #22) &gt; should handle errors gracefully during cleanup" time="0.000539833">
        </testcase>
        <testcase classname="packages/core/test/note-deletion-cleanup.test.ts" name="Note Deletion Cleanup (Issue #22) &gt; should handle widgets that are not rendered" time="0.000232208">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/performance-baseline.test.ts" timestamp="2025-07-10T02:12:14.353Z" hostname="Davids-Mac-mini.local" tests="7" failures="0" errors="0" skipped="0" time="4.478004167">
        <testcase classname="packages/core/test/performance-baseline.test.ts" name="Performance Baseline Tests &gt; warhammer Calendar Performance &gt; should perform date calculations within 10ms" time="0.885600458">
            <system-out>
warhammer dateToDays: 0.884ms avg, 883.9ms total (1000 iterations)

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/performance-baseline.test.ts" name="Performance Baseline Tests &gt; warhammer Calendar Performance &gt; should perform weekday calculations within 10ms" time="0.81041425">
            <system-out>
warhammer calculateWeekday: 0.810ms avg, 810.0ms total (1000 iterations)

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/performance-baseline.test.ts" name="Performance Baseline Tests &gt; warhammer Calendar Performance &gt; should perform addDays operations within 10ms" time="0.412022292">
            <system-out>
warhammer addDays: 4.116ms avg, 411.6ms total (100 iterations)

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/performance-baseline.test.ts" name="Performance Baseline Tests &gt; gregorian Calendar Performance &gt; should perform date calculations within 5ms" time="0.551700292">
            <system-out>
gregorian dateToDays: 0.551ms avg, 551.3ms total (1000 iterations)

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/performance-baseline.test.ts" name="Performance Baseline Tests &gt; gregorian Calendar Performance &gt; should perform weekday calculations within 5ms" time="0.543478541">
            <system-out>
gregorian calculateWeekday: 0.543ms avg, 543.1ms total (1000 iterations)

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/performance-baseline.test.ts" name="Performance Baseline Tests &gt; gregorian Calendar Performance &gt; should perform addDays operations within 5ms" time="0.235787083">
            <system-out>
gregorian addDays: 2.354ms avg, 235.4ms total (100 iterations)

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/performance-baseline.test.ts" name="Performance Baseline Tests &gt; should maintain reasonable performance with intercalary days" time="1.037794042">
            <system-out>
WFRP time: 635.7ms, Gregorian time: 401.3ms
WFRP slowdown factor: 1.58x

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/pf2e-calendar-click-bug.test.ts" timestamp="2025-07-10T02:12:14.353Z" hostname="Davids-Mac-mini.local" tests="3" failures="0" errors="0" skipped="0" time="0.012637916">
        <testcase classname="packages/core/test/pf2e-calendar-click-bug.test.ts" name="PF2e Calendar Click Bug &gt; demonstrates the bug: S&amp;S calendar click causes PF2e year jump" time="0.006167875">
            <system-out>

=== PF2e Calendar Click Bug Demonstration ===

STEP 1: Initial state
Real world creation date: 2025-07-04T12:00:00.000Z
Game worldTime: 0
S&amp;S shows (without PF2e integration): 2700/1/1
S&amp;S shows (with PF2e integration): 4725/7/4
PF2e shows: 4725/7/4
Year gap WITHOUT integration: 2025 years
Year gap WITH integration: 0 years

=== DEMONSTRATION COMPLETE ===
The fix ensures S&amp;S uses PF2e worldCreationTimestamp for proper date alignment!

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-calendar-click-bug.test.ts" name="PF2e Calendar Click Bug &gt; identifies the root cause: epoch vs real-time interpretation mismatch" time="0.000663709">
            <system-out>

=== Root Cause Analysis ===
S&amp;S calendar epoch year: 2700
S&amp;S interprets worldTime=0 as year 2700 + calculated days
PF2e interprets worldTime=0 as 2025-07-04 (year 4725)
Fundamental year gap between systems: 2025 years

ROOT CAUSE: Different worldTime interpretations
- S&amp;S: worldTime=0 → epoch-based calendar calculation
- PF2e: worldTime=0 → real-world creation date + 0 seconds

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-calendar-click-bug.test.ts" name="PF2e Calendar Click Bug &gt; shows the fix approach: S&amp;S should align with PF2e worldTime interpretation" time="0.004557292">
            <system-out>

=== Fix Approach ===
S&amp;S with PF2e interpretation: 4725/7/4
PF2e native calculation: 4725/7/4

FIX CONFIRMED: S&amp;S aligns with PF2e when using worldCreationTimestamp

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/pf2e-compatibility-verification.test.ts" timestamp="2025-07-10T02:12:14.354Z" hostname="Davids-Mac-mini.local" tests="6" failures="0" errors="0" skipped="0" time="0.020684834">
        <testcase classname="packages/core/test/pf2e-compatibility-verification.test.ts" name="PF2e Compatibility Verification &gt; ✅ PF2e compatibility fix produces correct weekdays" time="0.003079042">
            <system-out>
[S&amp;S] PF2e system detected - enabling enhanced compatibility mode 


=== VERIFYING PF2E COMPATIBILITY FIX ===
Date: 4712/10/21 (Lamashan 21, 4712 AR)
S&amp;S with PF2e fix: 6 (Sunday)
PF2e expected: Sunday
✅ SUCCESS: S&amp;S now matches PF2e World Clock expectation!

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-compatibility-verification.test.ts" name="PF2e Compatibility Verification &gt; ✅ Multiple dates show consistent PF2e compatibility" time="0.002893333">
            <system-out>

=== TESTING MULTIPLE DATES FOR CONSISTENCY ===
4712/10/20: Starday (expected: Starday)
4712/10/21: Sunday (expected: Sunday)
4712/10/22: Moonday (expected: Moonday)
4712/10/23: Toilday (expected: Toilday)
✅ All dates show consistent PF2e-compatible weekday progression

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-compatibility-verification.test.ts" name="PF2e Compatibility Verification &gt; ✅ Non-PF2e environment uses original calculation" time="0.000895875">
            <system-out>

=== TESTING NON-PF2E ENVIRONMENT ===
Non-PF2e calculation: 6 (Sunday)
✅ Non-PF2e environment correctly uses original weekday calculation

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-compatibility-verification.test.ts" name="PF2e Compatibility Verification &gt; ✅ PF2e compatibility only applies to Golarion calendar" time="0.003959875">
            <system-out>

=== TESTING CALENDAR-SPECIFIC COMPATIBILITY ===
Gregorian calendar in PF2e environment:
  Date: 2024/10/21
  Weekday: 1 (Monday)
✅ PF2e compatibility correctly applies only to Golarion calendar

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-compatibility-verification.test.ts" name="PF2e Compatibility Verification &gt; ✅ Round-trip conversion maintains consistency" time="0.003175458">
            <system-out>

=== TESTING ROUND-TRIP CONVERSION CONSISTENCY ===
Input date: 4712/10/21 4:59:30
Converts to worldTime: 63517928370
Converts back to: 4712/10/21 4:59:30
Round-trip weekday: 6 (Sunday)
✅ Round-trip conversion maintains PF2e compatibility

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-compatibility-verification.test.ts" name="PF2e Compatibility Verification &gt; 🎯 Final verification: Exact user scenario" time="0.005904667">
            <system-out>

=== FINAL VERIFICATION: EXACT USER SCENARIO ===
User reported issue:
  PF2e World Clock: &quot;Sunday, 21st of Lamashan, 4712 AR (04:59:30)&quot;
  S&amp;S Widget (before fix): &quot;Toilday, 19th Abadius, 4714 AR 12:09:10&quot;

S&amp;S Widget (after fix):
  &quot;Sunday, 21th of Lamashan, 4712 AR&quot;
✅ SUCCESS: S&amp;S now produces the exact same date format as PF2e World Clock!
🎯 USER ISSUE RESOLVED: Weekday calculation now matches PF2e expectations

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/pf2e-date-alignment-comprehensive.test.ts" timestamp="2025-07-10T02:12:14.354Z" hostname="Davids-Mac-mini.local" tests="12" failures="0" errors="0" skipped="0" time="0.043587708">
        <testcase classname="packages/core/test/pf2e-date-alignment-comprehensive.test.ts" name="PF2e Date Alignment - Comprehensive Test Suite &gt; 🐛 Issue #66 - Exact Date from Screenshot &gt; Screenshot date: Sunday, 21st of Lamashan, 4712 AR should be Sunday" time="0.002817625">
            <system-out>

=== SCREENSHOT DATE VERIFICATION ===
Expected: Sunday, 21st of Lamashan, 4712 AR (05:00:06)
S&amp;S calculation: 6 (Sunday)
PF2e expected: 6 (Sunday)
✅ WEEKDAY ALIGNMENT VERIFIED: S&amp;S matches PF2e

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-date-alignment-comprehensive.test.ts" name="PF2e Date Alignment - Comprehensive Test Suite &gt; 🐛 Issue #66 - Exact Date from Screenshot &gt; Verify month name mapping: Lamashan = 10th month" time="0.000203667">
            <system-out>

=== MONTH MAPPING VERIFICATION ===
✅ Month 10 confirmed as: Lamashan (Lam)

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-date-alignment-comprehensive.test.ts" name="PF2e Date Alignment - Comprehensive Test Suite &gt; 🐛 Issue #66 - Exact Date from Screenshot &gt; Verify time component calculation for 05:00:06" time="0.00322625">
            <system-out>

=== TIME COMPONENT VERIFICATION ===
Original: 4712/10/21 5:0:6
Converted: 4712/10/21 5:0:6
✅ TIME CONVERSION VERIFIED: Bidirectional conversion preserves exact time

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-date-alignment-comprehensive.test.ts" name="PF2e Date Alignment - Comprehensive Test Suite &gt; 🔍 PF2e Weekday Pattern Analysis &gt; Analyze weekday pattern around the screenshot date" time="0.007889666">
            <system-out>

=== WEEKDAY PATTERN ANALYSIS ===
4712/10/20:
  S&amp;S: 5 (Starday)
  Expected: 5 (Starday)
  Offset: 0
4712/10/21:
  S&amp;S: 6 (Sunday)
  Expected: 6 (Sunday)
  Offset: 0
4712/10/22:
  S&amp;S: 0 (Moonday)
  Expected: 0 (Moonday)
  Offset: 0
4712/10/19:
  S&amp;S: 4 (Fireday)
  Expected: 4 (Fireday)
  Offset: 0
4712/10/23:
  S&amp;S: 1 (Toilday)
  Expected: 1 (Toilday)
  Offset: 0
✅ ALL WEEKDAYS CORRECT: No pattern issues detected

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-date-alignment-comprehensive.test.ts" name="PF2e Date Alignment - Comprehensive Test Suite &gt; 🔍 PF2e Weekday Pattern Analysis &gt; Test Golarion weekday order matches PF2e expectations" time="0.001161334">
            <system-out>

=== GOLARION WEEKDAY ORDER VERIFICATION ===
Calendar weekday order:
  0: Moonday
  1: Toilday
  2: Wealday
  3: Oathday
  4: Fireday
  5: Starday
  6: Sunday
✅ WEEKDAY ORDER VERIFIED: Matches expected Golarion order

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-date-alignment-comprehensive.test.ts" name="PF2e Date Alignment - Comprehensive Test Suite &gt; 🔍 PF2e Weekday Pattern Analysis &gt; Test epoch start day configuration" time="0.000387459">
            <system-out>

=== EPOCH START DAY VERIFICATION ===
Epoch year: 2700
Start day: 6
Start day name: Sunday

Epoch date (2700/1/1) calculation:
  Calculated weekday: 6 (Sunday)
  Expected weekday: 6 (Sunday)
✅ EPOCH CONFIGURATION CORRECT

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-date-alignment-comprehensive.test.ts" name="PF2e Date Alignment - Comprehensive Test Suite &gt; 🧮 WorldTime Integration Tests &gt; Test worldTime calculation matches PF2e World Clock behavior" time="0.002776292">
            <system-out>

=== WORLDTIME INTEGRATION TEST ===
Original date: 4712/10/21
WorldTime: 63517910400
Converted back: 4712/10/21
Weekday: 6 (Sunday)
✅ WORLDTIME ROUND-TRIP VERIFIED

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-date-alignment-comprehensive.test.ts" name="PF2e Date Alignment - Comprehensive Test Suite &gt; 🧮 WorldTime Integration Tests &gt; Test worldTime interpretation mode affects date calculation" time="0.0002025">
            <system-out>

=== WORLDTIME INTERPRETATION MODE TEST ===
Current calendar interpretation mode:
  Interpretation: epoch-based
  Epoch year: 2700
  Current year: 4725

WorldTime=0 produces: 2700/1/1
✅ WORLDTIME INTERPRETATION WORKING: Correctly maps to epoch year

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-date-alignment-comprehensive.test.ts" name="PF2e Date Alignment - Comprehensive Test Suite &gt; 🎯 PF2e Integration Compatibility &gt; Test PF2e worldTime interpretation compatibility" time="0.00197825">
            <system-out>

=== PF2E WORLDTIME INTERPRETATION COMPATIBILITY ===
S&amp;S worldTime=0 result: 2700 AR (epoch year)
Simulated PF2e worldTime (2025 years elapsed): 4725 AR
Expected: ~4725 AR, Got: 4725 AR, Difference: 0 years
✅ PF2E WORLDTIME COMPATIBILITY VERIFIED: Year progression works correctly

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-date-alignment-comprehensive.test.ts" name="PF2e Date Alignment - Comprehensive Test Suite &gt; 🎯 PF2e Integration Compatibility &gt; Test weekday offset for PF2e compatibility" time="0.005595083">
            <system-out>

=== PF2E WEEKDAY OFFSET COMPATIBILITY ===
S&amp;S weekday: 6 (Sunday)
PF2e expected: 6 (Sunday)
Required offset: 0
✅ NO OFFSET NEEDED: S&amp;S already matches PF2e
Adjusted weekday: 6 (Sunday)
✅ OFFSET CALCULATION VERIFIED: Adjustment produces correct result

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-date-alignment-comprehensive.test.ts" name="PF2e Date Alignment - Comprehensive Test Suite &gt; 📊 Regression Prevention Tests &gt; Ensure date calculation changes dont break other functionality" time="0.015715625">
            <system-out>

=== REGRESSION PREVENTION VERIFICATION ===
Testing date 1: 4710/1/1
  Weekday: 4, WorldTime: 63429436800, Round-trip: 4710/1/1
Testing date 2: 4712/1/1
  Weekday: 6, WorldTime: 63492508800, Round-trip: 4712/1/1
Testing date 3: 4712/6/15
  Weekday: 4, WorldTime: 63506851200, Round-trip: 4712/6/15
Testing date 4: 4712/12/31
  Weekday: 0, WorldTime: 63524044800, Round-trip: 4712/12/31
Testing date 5: 4713/1/1
  Weekday: 1, WorldTime: 63524131200, Round-trip: 4713/1/1
✅ REGRESSION TESTS PASSED: Core functionality remains stable

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-date-alignment-comprehensive.test.ts" name="PF2e Date Alignment - Comprehensive Test Suite &gt; 📊 Regression Prevention Tests &gt; Verify leap year handling remains correct" time="0.000663333">
            <system-out>

=== LEAP YEAR REGRESSION TEST ===
Year 4712: isLeap=true, length=366
Calistril (Feb) length in leap year: 29
✅ LEAP YEAR HANDLING VERIFIED: Remains correct after potential fixes

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/pf2e-date-sync-bugfix.test.ts" timestamp="2025-07-10T02:12:14.355Z" hostname="Davids-Mac-mini.local" tests="10" failures="0" errors="0" skipped="0" time="0.04574575">
        <testcase classname="packages/core/test/pf2e-date-sync-bugfix.test.ts" name="PF2e Date/Time Synchronization Bugfix &gt; Bug Reproduction: Date Mismatch &gt; reproduces the original bug - different dates without integration" time="0.001534375">
        </testcase>
        <testcase classname="packages/core/test/pf2e-date-sync-bugfix.test.ts" name="PF2e Date/Time Synchronization Bugfix &gt; Bug Reproduction: Date Mismatch &gt; demonstrates the fix - matching dates with PF2e integration" time="0.003757584">
        </testcase>
        <testcase classname="packages/core/test/pf2e-date-sync-bugfix.test.ts" name="PF2e Date/Time Synchronization Bugfix &gt; Real-world Date Mapping &gt; correctly maps various real-world dates to Golarion calendar" time="0.017752542">
        </testcase>
        <testcase classname="packages/core/test/pf2e-date-sync-bugfix.test.ts" name="PF2e Date/Time Synchronization Bugfix &gt; Real-world Date Mapping &gt; preserves time components accurately" time="0.005075208">
        </testcase>
        <testcase classname="packages/core/test/pf2e-date-sync-bugfix.test.ts" name="PF2e Date/Time Synchronization Bugfix &gt; WorldTime Progression &gt; correctly advances time from PF2e base date" time="0.003334625">
        </testcase>
        <testcase classname="packages/core/test/pf2e-date-sync-bugfix.test.ts" name="PF2e Date/Time Synchronization Bugfix &gt; WorldTime Progression &gt; handles month transitions correctly" time="0.00153175">
        </testcase>
        <testcase classname="packages/core/test/pf2e-date-sync-bugfix.test.ts" name="PF2e Date/Time Synchronization Bugfix &gt; Error Handling and Fallbacks &gt; falls back gracefully when systemBaseDate is unavailable" time="0.007034875">
        </testcase>
        <testcase classname="packages/core/test/pf2e-date-sync-bugfix.test.ts" name="PF2e Date/Time Synchronization Bugfix &gt; Error Handling and Fallbacks &gt; handles invalid systemBaseDate gracefully" time="0.002272917">
        </testcase>
        <testcase classname="packages/core/test/pf2e-date-sync-bugfix.test.ts" name="PF2e Date/Time Synchronization Bugfix &gt; Error Handling and Fallbacks &gt; works correctly for non-PF2e systems" time="0.000227875">
        </testcase>
        <testcase classname="packages/core/test/pf2e-date-sync-bugfix.test.ts" name="PF2e Date/Time Synchronization Bugfix &gt; Integration Test: Complete PF2e Workflow &gt; simulates complete PF2e integration workflow" time="0.00190275">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/pf2e-integration-complete.test.ts" timestamp="2025-07-10T02:12:14.355Z" hostname="Davids-Mac-mini.local" tests="7" failures="0" errors="0" skipped="0" time="0.612731">
        <testcase classname="packages/core/test/pf2e-integration-complete.test.ts" name="PF2e Integration Complete Solution &gt; 🎯 SOLUTION VERIFICATION: Complete user issue resolution" time="0.003216667">
            <system-out>

=== COMPLETE SOLUTION VERIFICATION ===
Original Issue: PF2e and S&amp;S showing completely different dates/times

Original Problem:
  PF2e World Clock: &quot;Sunday, 21st of Lamashan, 4712 AR (04:59:30)&quot;
  S&amp;S Widget (before): &quot;Toilday, 19th Abadius, 4714 AR 12:09:10&quot;

Solution Result:
  S&amp;S Widget (after fix): &quot;Sunday, 21th of Lamashan, 4712 AR&quot;
  PF2e World Clock:       &quot;Sunday, 21st of Lamashan, 4712 AR (04:59:30)&quot;

✅ SUCCESS: Date components now match exactly!
🎯 WEEKDAY ISSUE RESOLVED: Sunday = Sunday (was Toilday)
📅 DATE CALCULATION COMPATIBLE: Same year/month/day from same worldTime

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-integration-complete.test.ts" name="PF2e Integration Complete Solution &gt; 🔧 SOLUTION COMPONENT 1: PF2e weekday compatibility offset" time="0.001512667">
            <system-out>

=== SOLUTION COMPONENT 1: WEEKDAY COMPATIBILITY ===
Date: 4712/10/21
  PF2e environment: 6 (Sunday)
  D&amp;D 5e environment: 6 (Sunday)
  Offset applied: 0 positions
✅ Component 1 Working: PF2e compatibility verified - no offset needed

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-integration-complete.test.ts" name="PF2e Integration Complete Solution &gt; 🔧 SOLUTION COMPONENT 2: PF2e system detection" time="0.000308625">
            <system-out>

=== SOLUTION COMPONENT 2: SYSTEM DETECTION ===
System detection tests:
  PF2e system detection: ✅ Enabled via game.system.id check
  Calendar-specific detection: ✅ Only applies to golarion-pf2e
  Compatibility mode activation: ✅ Automatic in PF2e environments
✅ Component 2 Working: System detection properly implemented

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-integration-complete.test.ts" name="PF2e Integration Complete Solution &gt; 🔧 SOLUTION COMPONENT 3: Time source monitoring" time="0.000444917">
            <system-out>

=== SOLUTION COMPONENT 3: TIME SOURCE MONITORING ===
Time source monitoring capabilities:
  ✅ Foundry worldTime reading: Standard fallback
  ✅ PF2e-specific time sources: game.pf2e.worldClock.currentTime
  ✅ World Clock module support: game.worldClock.currentTime
  ✅ Settings-based time: PF2e settings integration
  ✅ Time mismatch detection: Periodic monitoring every 5 seconds
✅ Component 3 Working: Time source monitoring implemented

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-integration-complete.test.ts" name="PF2e Integration Complete Solution &gt; 🛡️ SOLUTION COMPONENT 4: Backward compatibility preserved" time="0.017635625">
            <system-out>

=== SOLUTION COMPONENT 4: BACKWARD COMPATIBILITY ===
Testing backward compatibility:
  gregorian: PF2e=1, D&amp;D=1 (should be same)
  forgotten-realms: PF2e=0, D&amp;D=0 (should be same)
  dnd5e-sword-coast: PF2e=4, D&amp;D=4 (should be same)
  vale-reckoning: PF2e=2, D&amp;D=2 (should be same)
✅ Component 4 Working: All other calendars unaffected by PF2e compatibility

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-integration-complete.test.ts" name="PF2e Integration Complete Solution &gt; 📊 SOLUTION METRICS: Performance and reliability" time="0.587912708">
            <system-out>

=== SOLUTION METRICS ===
Performance metrics:
  Weekday calculation: 0.5280ms average (1000 iterations)
  Performance impact: Minimal (&lt;0.1ms per calculation)
  Calculation consistency: ✅ Perfect
  Memory overhead: Minimal (single offset calculation)
✅ Solution Performance: Excellent metrics achieved

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-integration-complete.test.ts" name="PF2e Integration Complete Solution &gt; 🎯 FINAL INTEGRATION: User scenario resolution" time="0.000783167">
            <system-out>

=== FINAL INTEGRATION TEST ===
Simulating exact user scenario resolution...

Before Fix:
  User reported: PF2e and S&amp;S showing completely different dates
  Primary issue: Weekday mismatch (Sunday vs Toilday)
  Secondary issue: Potential time source differences

After Fix:
  S&amp;S calculation: Sunday, 21th of Lamashan, 4712 AR
  PF2e expectation: Sunday, 21st of Lamashan, 4712 AR
  Weekday match: ✅ Perfect
  Date match: ✅ Perfect

🎉 INTEGRATION SUCCESS: User issue completely resolved!
📋 Solution Summary:
  ✅ Weekday calculation fixed with PF2e compatibility offset
  ✅ System detection ensures proper environment handling
  ✅ Time source monitoring ready for advanced integration
  ✅ Backward compatibility maintained for all other systems
  ✅ Comprehensive test coverage prevents regression

🚀 READY FOR DEPLOYMENT: Solution is production-ready

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/pf2e-integration-world-creation-hook.test.ts" timestamp="2025-07-10T02:12:14.356Z" hostname="Davids-Mac-mini.local" tests="9" failures="0" errors="0" skipped="0" time="0.01619225">
        <testcase classname="packages/core/test/pf2e-integration-world-creation-hook.test.ts" name="PF2e Integration - Data Provider Registry &gt; Data Provider Registration &gt; should register data provider for world creation timestamp" time="0.010978417">
        </testcase>
        <testcase classname="packages/core/test/pf2e-integration-world-creation-hook.test.ts" name="PF2e Integration - Data Provider Registry &gt; Data Provider Logic &gt; should provide world creation timestamp when PF2e data is available" time="0.000459542">
        </testcase>
        <testcase classname="packages/core/test/pf2e-integration-world-creation-hook.test.ts" name="PF2e Integration - Data Provider Registry &gt; Data Provider Logic &gt; should handle missing PF2e game object gracefully" time="0.000381541">
        </testcase>
        <testcase classname="packages/core/test/pf2e-integration-world-creation-hook.test.ts" name="PF2e Integration - Data Provider Registry &gt; Data Provider Logic &gt; should handle missing worldClock settings gracefully" time="0.000165625">
        </testcase>
        <testcase classname="packages/core/test/pf2e-integration-world-creation-hook.test.ts" name="PF2e Integration - Data Provider Registry &gt; Data Provider Logic &gt; should handle missing worldCreatedOn setting gracefully" time="0.000128292">
        </testcase>
        <testcase classname="packages/core/test/pf2e-integration-world-creation-hook.test.ts" name="PF2e Integration - Data Provider Registry &gt; Data Provider Logic &gt; should handle invalid date strings gracefully" time="0.000223333">
        </testcase>
        <testcase classname="packages/core/test/pf2e-integration-world-creation-hook.test.ts" name="PF2e Integration - Data Provider Registry &gt; Data Provider Logic &gt; should validate timestamp is finite and positive" time="0.000580125">
        </testcase>
        <testcase classname="packages/core/test/pf2e-integration-world-creation-hook.test.ts" name="PF2e Integration - Data Provider Registry &gt; Error Handling and Logging &gt; should handle exception gracefully and return null" time="0.00062425">
        </testcase>
        <testcase classname="packages/core/test/pf2e-integration-world-creation-hook.test.ts" name="PF2e Integration - Data Provider Registry &gt; Error Handling and Logging &gt; should handle non-Error exceptions properly" time="0.000405292">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/pf2e-integration.test.ts" timestamp="2025-07-10T02:12:14.356Z" hostname="Davids-Mac-mini.local" tests="9" failures="0" errors="0" skipped="0" time="0.054152542">
        <testcase classname="packages/core/test/pf2e-integration.test.ts" name="PF2e Integration Tests - GitHub Issue #91 &gt; GitHub Issue #91 Core Bug Reproduction &gt; reproduces the exact widget synchronization issue" time="0.005397541">
        </testcase>
        <testcase classname="packages/core/test/pf2e-integration.test.ts" name="PF2e Integration Tests - GitHub Issue #91 &gt; GitHub Issue #91 Core Bug Reproduction &gt; validates the fix: widgets now use world creation timestamp" time="0.011304458">
        </testcase>
        <testcase classname="packages/core/test/pf2e-integration.test.ts" name="PF2e Integration Tests - GitHub Issue #91 &gt; GitHub Issue #91 Core Bug Reproduction &gt; validates specific &quot;3rd Arodus → 22nd Rova&quot; bug is fixed" time="0.00699325">
        </testcase>
        <testcase classname="packages/core/test/pf2e-integration.test.ts" name="PF2e Integration Tests - GitHub Issue #91 &gt; PF2e Year Calculation Accuracy &gt; validates S&amp;S year calculations match PF2e expectations" time="0.012889833">
            <system-out>
✅ Day 0: S&amp;S=4725, PF2e=4725
✅ Day 31: S&amp;S=4725, PF2e=4725
✅ Day 214: S&amp;S=4725, PF2e=4725
✅ Day 365: S&amp;S=4726, PF2e=4726

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-integration.test.ts" name="PF2e Integration Tests - GitHub Issue #91 &gt; PF2e Year Calculation Accuracy &gt; explains the 4725 vs 6749 year discrepancy" time="0.002513042">
            <system-out>
Alternative offset calculation: 4724
Correct PF2e year: 4725 (2025 + 2700)
Reported discrepancy: 6749
Difference: 2024 years

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-integration.test.ts" name="PF2e Integration Tests - GitHub Issue #91 &gt; Widget Synchronization Chain Validation &gt; validates time converter and engine use world creation timestamp" time="0.007639583">
            <system-out>
✅ Widget methods synchronized: 4725-1-31

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-integration.test.ts" name="PF2e Integration Tests - GitHub Issue #91 &gt; Widget Synchronization Chain Validation &gt; validates round-trip date conversion accuracy" time="0.004126416">
            <system-out>
✅ Round-trip accuracy: 4725-6-15 14:30:45

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-integration.test.ts" name="PF2e Integration Tests - GitHub Issue #91 &gt; Cross-System Compatibility &gt; maintains backward compatibility for non-PF2e systems" time="0.000417334">
            <system-out>
✅ Non-PF2e system uses epoch calculation: 2700

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-integration.test.ts" name="PF2e Integration Tests - GitHub Issue #91 &gt; Cross-System Compatibility &gt; handles data provider errors gracefully" time="0.000877583">
            <system-out>
✅ Error handling works - falls back to epoch calculation

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/pf2e-weekday-fix.test.ts" timestamp="2025-07-10T02:12:14.357Z" hostname="Davids-Mac-mini.local" tests="5" failures="0" errors="0" skipped="0" time="0.023365166">
        <testcase classname="packages/core/test/pf2e-weekday-fix.test.ts" name="PF2e Weekday Fix Investigation &gt; 🔍 Analyze weekday mapping for problematic date" time="0.005770666">
            <system-out>

=== WEEKDAY MAPPING ANALYSIS ===
Calendar weekday configuration:
  0: Moonday
  1: Toilday
  2: Wealday
  3: Oathday
  4: Fireday
  5: Starday
  6: Sunday

Epoch start day: 6 (Sunday)

For date 4712/10/21:
  S&amp;S calculates weekday: 6 (Sunday)
  PF2e expects: Sunday
  Sunday is at index: 6
  Difference: 0 positions

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-weekday-fix.test.ts" name="PF2e Weekday Fix Investigation &gt; 🔍 Test multiple dates to confirm weekday pattern" time="0.012662542">
            <system-out>

=== TESTING MULTIPLE DATES FOR WEEKDAY PATTERN ===

Date 4712/10/21:
  S&amp;S: 6 (Sunday)
  Expected: 6 (Sunday)
  Offset: 0

Date 4712/10/22:
  S&amp;S: 0 (Moonday)
  Expected: 0 (Moonday)
  Offset: 0

Date 4712/10/20:
  S&amp;S: 5 (Starday)
  Expected: 5 (Starday)
  Offset: 0

Date 4712/1/1:
  S&amp;S: 6 (Sunday)

Date 4713/1/1:
  S&amp;S: 1 (Toilday)

✅ CONSISTENT OFFSET FOUND: 0 positions
This means S&amp;S weekday calculation needs to be adjusted by 0

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-weekday-fix.test.ts" name="PF2e Weekday Fix Investigation &gt; 🔧 Test proposed weekday fix" time="0.00241375">
            <system-out>

=== TESTING PROPOSED WEEKDAY FIX ===
Original calculation: 6 (Sunday)
Expected: 6 (Sunday)
Required offset: 0
Adjusted calculation: 6 (Sunday)
✅ WEEKDAY FIX WORKS: Adjusted calculation produces correct weekday

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-weekday-fix.test.ts" name="PF2e Weekday Fix Investigation &gt; 🔍 Investigate epoch day calculation" time="0.000230667">
            <system-out>

=== INVESTIGATING EPOCH DAY CALCULATION ===
Current epoch configuration:
  Epoch year: 2700
  Start day: 6
  Start day name: Sunday

Epoch date (2700/1/1) calculation:
  Calculated weekday: 6 (Sunday)
  Expected weekday: 6 (Sunday)
✅ Epoch weekday calculation is correct

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/pf2e-weekday-fix.test.ts" name="PF2e Weekday Fix Investigation &gt; 🔍 Compare with known PF2e calendar expectations" time="0.000893">
            <system-out>

=== COMPARING WITH PF2E CALENDAR EXPECTATIONS ===
Golarion weekday mapping:
  0: Moonday
  1: Toilday
  2: Wealday
  3: Oathday
  4: Fireday
  5: Starday
  6: Sunday

For 4712/10/21:
  S&amp;S weekday: 6 (Sunday)
  PF2e weekday: 6 (Sunday)
  Difference: 0 positions

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/pf2e-worldtime-transform-coverage.test.ts" timestamp="2025-07-10T02:12:14.357Z" hostname="Davids-Mac-mini.local" tests="7" failures="0" errors="0" skipped="0" time="0.009849791">
        <testcase classname="packages/core/test/pf2e-worldtime-transform-coverage.test.ts" name="PF2e WorldTime Transform - Real Module Code Coverage &gt; Compatibility Manager Data Provider Coverage &gt; should register and retrieve worldTimeTransform data provider" time="0.001478541">
        </testcase>
        <testcase classname="packages/core/test/pf2e-worldtime-transform-coverage.test.ts" name="PF2e WorldTime Transform - Real Module Code Coverage &gt; Compatibility Manager Data Provider Coverage &gt; should handle missing data providers gracefully" time="0.000112292">
        </testcase>
        <testcase classname="packages/core/test/pf2e-worldtime-transform-coverage.test.ts" name="PF2e WorldTime Transform - Real Module Code Coverage &gt; Compatibility Manager Data Provider Coverage &gt; should handle error in data provider function" time="0.001296959">
        </testcase>
        <testcase classname="packages/core/test/pf2e-worldtime-transform-coverage.test.ts" name="PF2e WorldTime Transform - Real Module Code Coverage &gt; TimeConverter setCurrentDate Coverage &gt; should apply system time offset when transform is available" time="0.002349333">
        </testcase>
        <testcase classname="packages/core/test/pf2e-worldtime-transform-coverage.test.ts" name="PF2e WorldTime Transform - Real Module Code Coverage &gt; TimeConverter setCurrentDate Coverage &gt; should handle transform errors gracefully in setCurrentDate" time="0.000988208">
        </testcase>
        <testcase classname="packages/core/test/pf2e-worldtime-transform-coverage.test.ts" name="PF2e WorldTime Transform - Real Module Code Coverage &gt; TimeConverter setCurrentDate Coverage &gt; should handle case where transform returns null offset" time="0.001325333">
        </testcase>
        <testcase classname="packages/core/test/pf2e-worldtime-transform-coverage.test.ts" name="PF2e WorldTime Transform - Real Module Code Coverage &gt; TimeConverter setCurrentDate Coverage &gt; should handle non-GM users appropriately" time="0.001267625">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/predefined-formats.test.ts" timestamp="2025-07-10T02:12:14.358Z" hostname="Davids-Mac-mini.local" tests="20" failures="0" errors="0" skipped="0" time="0.018033125">
        <testcase classname="packages/core/test/predefined-formats.test.ts" name="Predefined Formats Usage &gt; CalendarDate Format Options to Predefined Format Mapping &gt; should use predefined &quot;short&quot; format for short option" time="0.004890584">
        </testcase>
        <testcase classname="packages/core/test/predefined-formats.test.ts" name="Predefined Formats Usage &gt; CalendarDate Format Options to Predefined Format Mapping &gt; should use predefined &quot;long&quot; format for long option" time="0.00083625">
        </testcase>
        <testcase classname="packages/core/test/predefined-formats.test.ts" name="Predefined Formats Usage &gt; CalendarDate Format Options to Predefined Format Mapping &gt; should use predefined &quot;numeric&quot; format for numeric option" time="0.001593541">
        </testcase>
        <testcase classname="packages/core/test/predefined-formats.test.ts" name="Predefined Formats Usage &gt; CalendarDate Format Options to Predefined Format Mapping &gt; should prioritize time-inclusive formats when includeTime is true" time="0.000743">
        </testcase>
        <testcase classname="packages/core/test/predefined-formats.test.ts" name="Predefined Formats Usage &gt; CalendarDate Format Options to Predefined Format Mapping &gt; should use datetime format when includeTime is true and no specific time format exists" time="0.001746833">
        </testcase>
        <testcase classname="packages/core/test/predefined-formats.test.ts" name="Predefined Formats Usage &gt; CalendarDate Format Options to Predefined Format Mapping &gt; should use datetime format when includeTime is true and format is numeric" time="0.000545166">
        </testcase>
        <testcase classname="packages/core/test/predefined-formats.test.ts" name="Predefined Formats Usage &gt; Widget Formats Usage &gt; should use widget mini format for toShortString" time="0.000262584">
        </testcase>
        <testcase classname="packages/core/test/predefined-formats.test.ts" name="Predefined Formats Usage &gt; Widget Formats Usage &gt; should use widget main format for toLongString" time="0.000311042">
        </testcase>
        <testcase classname="packages/core/test/predefined-formats.test.ts" name="Predefined Formats Usage &gt; Widget Formats Usage &gt; should use DateFormatter.formatWidget method correctly" time="0.000951125">
        </testcase>
        <testcase classname="packages/core/test/predefined-formats.test.ts" name="Predefined Formats Usage &gt; Named Format Resolution &gt; should resolve format names directly from calendar dateFormats" time="0.00050125">
        </testcase>
        <testcase classname="packages/core/test/predefined-formats.test.ts" name="Predefined Formats Usage &gt; Named Format Resolution &gt; should handle variant formats with specific variant names" time="0.000589458">
        </testcase>
        <testcase classname="packages/core/test/predefined-formats.test.ts" name="Predefined Formats Usage &gt; Named Format Resolution &gt; should use default variant when no variant specified" time="0.00021725">
        </testcase>
        <testcase classname="packages/core/test/predefined-formats.test.ts" name="Predefined Formats Usage &gt; Format Name Detection from Options &gt; should detect multiple possible format names and prioritize correctly" time="0.0005525">
        </testcase>
        <testcase classname="packages/core/test/predefined-formats.test.ts" name="Predefined Formats Usage &gt; Format Name Detection from Options &gt; should handle alternative format name patterns" time="0.000453167">
        </testcase>
        <testcase classname="packages/core/test/predefined-formats.test.ts" name="Predefined Formats Usage &gt; Fallback Behavior &gt; should fallback to template building when no predefined format exists" time="0.000382125">
        </testcase>
        <testcase classname="packages/core/test/predefined-formats.test.ts" name="Predefined Formats Usage &gt; Fallback Behavior &gt; should fallback to basic string formatting when dateFormats is undefined" time="0.000079292">
        </testcase>
        <testcase classname="packages/core/test/predefined-formats.test.ts" name="Predefined Formats Usage &gt; Complex Format Scenarios &gt; should handle formats with time components correctly" time="0.000365667">
        </testcase>
        <testcase classname="packages/core/test/predefined-formats.test.ts" name="Predefined Formats Usage &gt; Complex Format Scenarios &gt; should handle date without time correctly" time="0.000214125">
        </testcase>
        <testcase classname="packages/core/test/predefined-formats.test.ts" name="Predefined Formats Usage &gt; Format Priority and Resolution &gt; should prioritize exact format matches over partial matches" time="0.000163709">
        </testcase>
        <testcase classname="packages/core/test/predefined-formats.test.ts" name="Predefined Formats Usage &gt; Format Priority and Resolution &gt; should handle multiple time format possibilities correctly" time="0.001042708">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/production-error-notifications.test.ts" timestamp="2025-07-10T02:12:14.358Z" hostname="Davids-Mac-mini.local" tests="6" failures="0" errors="0" skipped="0" time="0.010525542">
        <testcase classname="packages/core/test/production-error-notifications.test.ts" name="Production Error Notifications &gt; Template Compilation Error Notifications &gt; should log to console only when template compilation fails (debug mode disabled)" time="0.005766333">
            <system-out>
[S&amp;S] Date format template compilation failed: Error: Invalid template syntax: Unexpected token
    at Object.&lt;anonymous&gt; [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/production-error-notifications.test.ts:73:15[90m)[39m
    at Object.mockCall [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at Object.spy [as compile] [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at DateFormatter.compileAndCacheTemplate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:166:37[90m)[39m
    at DateFormatter.formatWithContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:193:37[90m)[39m
    at DateFormatter.format [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:155:17[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/production-error-notifications.test.ts:77:32
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20

            </system-out>
            <system-err>
[S&amp;S] Date format template has syntax errors: Invalid template syntax: Unexpected token

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/production-error-notifications.test.ts" name="Production Error Notifications &gt; Template Compilation Error Notifications &gt; should log specific errors for calendar format syntax errors (debug mode disabled)" time="0.000626042">
            <system-out>
[S&amp;S] Date format template compilation failed: Error: Parse error: Invalid quote syntax
    at Object.&lt;anonymous&gt; [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/production-error-notifications.test.ts:110:17[90m)[39m
    at Object.mockCall [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at Object.spy [as compile] [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at DateFormatter.compileAndCacheTemplate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:166:37[90m)[39m
    at DateFormatter.formatWithContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:193:37[90m)[39m
    at DateFormatter.formatNamed [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:296:17[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/production-error-notifications.test.ts:116:20
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20

            </system-out>
            <system-err>
[S&amp;S] Calendar &quot;Star Trek Calendar&quot; has syntax errors in &quot;time&quot; format: Parse error: Invalid quote syntax

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/production-error-notifications.test.ts" name="Production Error Notifications &gt; Template Compilation Error Notifications &gt; should not spam console logs for repeated errors" time="0.000564542">
            <system-out>
[S&amp;S] Date format template compilation failed: Error: Template syntax error
    at Object.&lt;anonymous&gt; [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/production-error-notifications.test.ts:138:15[90m)[39m
    at Object.mockCall [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at Object.spy [as compile] [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at DateFormatter.compileAndCacheTemplate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:166:37[90m)[39m
    at DateFormatter.formatWithContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:193:37[90m)[39m
    at DateFormatter.format [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:155:17[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/production-error-notifications.test.ts:142:17
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
[S&amp;S] Date format template compilation failed: Error: Template syntax error
    at Object.&lt;anonymous&gt; [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/production-error-notifications.test.ts:138:15[90m)[39m
    at Object.mockCall [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at Object.spy [as compile] [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at DateFormatter.compileAndCacheTemplate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:166:37[90m)[39m
    at DateFormatter.formatWithContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:193:37[90m)[39m
    at DateFormatter.format [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:155:17[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/production-error-notifications.test.ts:143:17
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
[S&amp;S] Date format template compilation failed: Error: Template syntax error
    at Object.&lt;anonymous&gt; [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/production-error-notifications.test.ts:138:15[90m)[39m
    at Object.mockCall [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at Object.spy [as compile] [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at DateFormatter.compileAndCacheTemplate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:166:37[90m)[39m
    at DateFormatter.formatWithContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:193:37[90m)[39m
    at DateFormatter.format [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:155:17[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/production-error-notifications.test.ts:144:17
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20

            </system-out>
            <system-err>
[S&amp;S] Date format template has syntax errors: Template syntax error

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/production-error-notifications.test.ts" name="Production Error Notifications &gt; Template Compilation Error Notifications &gt; should log helpful context in console (debug mode disabled)" time="0.00044425">
            <system-out>
[S&amp;S] Date format template compilation failed: Error: Expecting STRING, got INVALID
    at Object.&lt;anonymous&gt; [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/production-error-notifications.test.ts:166:15[90m)[39m
    at Object.mockCall [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at Object.spy [as compile] [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at DateFormatter.compileAndCacheTemplate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:166:37[90m)[39m
    at DateFormatter.formatWithContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:193:37[90m)[39m
    at DateFormatter.format [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:155:17[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/production-error-notifications.test.ts:169:17
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20

            </system-out>
            <system-err>
[S&amp;S] Date format template has syntax errors: Expecting STRING, got INVALID

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/production-error-notifications.test.ts" name="Production Error Notifications &gt; Debug Mode Detection &gt; should show detailed notifications in debug mode" time="0.001340667">
            <system-out>
[S&amp;S] Date format template compilation failed: Error: Unknown helper: ss-unknown-helper
    at Object.&lt;anonymous&gt; [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/production-error-notifications.test.ts:193:15[90m)[39m
    at Object.mockCall [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at Object.spy [as compile] [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at DateFormatter.compileAndCacheTemplate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:166:37[90m)[39m
    at DateFormatter.formatWithContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:193:37[90m)[39m
    at DateFormatter.format [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:155:17[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/production-error-notifications.test.ts:196:17
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/production-error-notifications.test.ts" name="Production Error Notifications &gt; Debug Mode Detection &gt; should not show notifications in normal mode" time="0.000376292">
            <system-out>
[S&amp;S] Date format template compilation failed: Error: Helper not found: ss-broken
    at Object.&lt;anonymous&gt; [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/production-error-notifications.test.ts:220:15[90m)[39m
    at Object.mockCall [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at Object.spy [as compile] [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at DateFormatter.compileAndCacheTemplate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:166:37[90m)[39m
    at DateFormatter.formatWithContext [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:193:37[90m)[39m
    at DateFormatter.format [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/date-formatter.ts:155:17[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/production-error-notifications.test.ts:223:17
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20

            </system-out>
            <system-err>
[S&amp;S] Date format template has syntax errors: Helper not found: ss-broken

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/quick-time-buttons-integration.test.ts" timestamp="2025-07-10T02:12:14.359Z" hostname="Davids-Mac-mini.local" tests="23" failures="0" errors="0" skipped="0" time="0.046033375">
        <testcase classname="packages/core/test/quick-time-buttons-integration.test.ts" name="Quick Time Buttons Integration Tests &gt; getQuickTimeButtonsFromSettings &gt; should get buttons from settings with default values" time="0.002485083">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons-integration.test.ts" name="Quick Time Buttons Integration Tests &gt; getQuickTimeButtonsFromSettings &gt; should handle custom settings values" time="0.002571875">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons-integration.test.ts" name="Quick Time Buttons Integration Tests &gt; getQuickTimeButtonsFromSettings &gt; should apply mini widget selection for mini widget" time="0.024617541">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons-integration.test.ts" name="Quick Time Buttons Integration Tests &gt; getQuickTimeButtonsFromSettings &gt; should handle invalid settings gracefully" time="0.000200875">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons-integration.test.ts" name="Quick Time Buttons Integration Tests &gt; getQuickTimeButtonsFromSettings &gt; should handle missing game.settings" time="0.000123959">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons-integration.test.ts" name="Quick Time Buttons Integration Tests &gt; getQuickTimeButtonsFromSettings &gt; should handle missing seasonsStars manager" time="0.000218333">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons-integration.test.ts" name="Quick Time Buttons Integration Tests &gt; registerQuickTimeButtonsHelper &gt; should register Handlebars helpers when Handlebars is available" time="0.000791">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons-integration.test.ts" name="Quick Time Buttons Integration Tests &gt; registerQuickTimeButtonsHelper &gt; should handle missing Handlebars gracefully" time="0.000872959">
            <system-err>
[S&amp;S WARNING] Handlebars not available for helper registration 

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons-integration.test.ts" name="Quick Time Buttons Integration Tests &gt; registerQuickTimeButtonsHelper &gt; should handle Handlebars without registerHelper method" time="0.000253667">
            <system-err>
[S&amp;S WARNING] Handlebars not available for helper registration 

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons-integration.test.ts" name="Quick Time Buttons Integration Tests &gt; registerQuickTimeButtonsHelper &gt; should test getQuickTimeButtons helper function" time="0.00018025">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons-integration.test.ts" name="Quick Time Buttons Integration Tests &gt; registerQuickTimeButtonsHelper &gt; should test formatTimeButton helper function" time="0.000093541">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons-integration.test.ts" name="Quick Time Buttons Integration Tests &gt; Error handling paths &gt; should handle parseQuickTimeButtons with invalid input types" time="0.000149959">
            <system-err>
[S&amp;S WARNING] Invalid quick time buttons setting value, using default 
[S&amp;S WARNING] Invalid quick time buttons setting value, using default 
[S&amp;S WARNING] Invalid quick time buttons setting value, using default 

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons-integration.test.ts" name="Quick Time Buttons Integration Tests &gt; Error handling paths &gt; should handle formatTimeButton with invalid input" time="0.000057417">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons-integration.test.ts" name="Quick Time Buttons Integration Tests &gt; Error handling paths &gt; should handle parsing errors gracefully" time="0.002596375">
            <system-err>
[S&amp;S ERROR] Error parsing quick time buttons setting Error: Parse error
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/quick-time-buttons-integration.test.ts:247:15
    at mockCall [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at spy [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/quick-time-buttons.ts:40:21
    at Array.map (&lt;anonymous&gt;)
    at parseQuickTimeButtons [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/quick-time-buttons.ts:28:8[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/quick-time-buttons-integration.test.ts:250:22
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons-integration.test.ts" name="Quick Time Buttons Integration Tests &gt; Error handling paths &gt; should handle non-finite numbers in parsing" time="0.000110334">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons-integration.test.ts" name="Quick Time Buttons Integration Tests &gt; Error handling paths &gt; should handle getQuickTimeButtonsFromSettings errors gracefully" time="0.004202459">
            <system-err>
[S&amp;S ERROR] Error getting quick time buttons from settings Error: Settings error
    at Object.&lt;anonymous&gt; [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/quick-time-buttons-integration.test.ts:275:15[90m)[39m
    at Object.mockCall [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at Object.spy [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at getQuickTimeButtonsFromSettings [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/quick-time-buttons.ts:129:23[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/quick-time-buttons-integration.test.ts:279:24
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons-integration.test.ts" name="Quick Time Buttons Integration Tests &gt; Error handling paths &gt; should handle missing seasonsStars manager gracefully" time="0.000217125">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons-integration.test.ts" name="Settings Preview Integration Tests &gt; registerHooks &gt; should register renderSettingsConfig hook" time="0.000179">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons-integration.test.ts" name="Settings Preview Integration Tests &gt; cleanup &gt; should clear timers and reset container" time="0.000079">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons-integration.test.ts" name="Settings Preview Integration Tests &gt; Error handling in enhanceQuickTimeButtonsSetting &gt; should register hooks without throwing" time="0.0003385">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons-integration.test.ts" name="Settings Preview Integration Tests &gt; Error handling in enhanceQuickTimeButtonsSetting &gt; should handle hook callback errors gracefully" time="0.001469375">
            <system-err>
[S&amp;S ERROR] Failed to enhance quick time buttons setting TypeError: html.querySelector is not a function
    at enhanceQuickTimeButtonsSetting [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/settings-preview.ts:31:33[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/settings-preview.ts:19:5
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/quick-time-buttons-integration.test.ts:362:20
    at Proxy.assertThrows [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mchai[24m/chai.js:2723:5[90m)[39m
    at Proxy.methodWrapper [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mchai[24m/chai.js:1618:25[90m)[39m
    at Proxy.&lt;anonymous&gt; [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/expect/dist/index.js:1088:12[90m)[39m
    at Proxy.overwritingMethodWrapper [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mchai[24m/chai.js:1670:33[90m)[39m
    at Proxy.&lt;anonymous&gt; [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/expect/dist/index.js:1420:16[90m)[39m
    at Proxy.&lt;anonymous&gt; [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/expect/dist/index.js:1029:14[90m)[39m
    at Proxy.methodWrapper [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mchai[24m/chai.js:1618:25[90m)[39m

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons-integration.test.ts" name="Settings Preview Integration Tests &gt; Coverage for class methods &gt; should cover settings preview functions" time="0.000202458">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons-integration.test.ts" name="Settings Preview Integration Tests &gt; Coverage for class methods &gt; should handle registration edge cases" time="0.00008525">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/quick-time-buttons.test.ts" timestamp="2025-07-10T02:12:14.360Z" hostname="Davids-Mac-mini.local" tests="60" failures="0" errors="0" skipped="0" time="0.007248792">
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; basic parsing &gt; should parse basic minute values" time="0.001105708">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; basic parsing &gt; should parse mixed positive and negative values" time="0.000083584">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; basic parsing &gt; should sort values numerically" time="0.000108833">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; basic parsing &gt; should handle empty input gracefully" time="0.001120084">
            <system-err>
[S&amp;S WARNING] Invalid quick time buttons setting value, using default 

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; basic parsing &gt; should filter out invalid entries" time="0.000124334">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; basic parsing &gt; should handle whitespace correctly" time="0.000053042">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; unit parsing &gt; should parse minute units correctly" time="0.00004425">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; unit parsing &gt; should parse hour units correctly" time="0.000037083">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; unit parsing &gt; should parse day units correctly" time="0.000138833">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; unit parsing &gt; should parse week units correctly" time="0.000037541">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; unit parsing &gt; should handle mixed units" time="0.000069583">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; unit parsing &gt; should handle negative units" time="0.00003475">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; unit parsing &gt; should handle unknown units by filtering them out" time="0.000035541">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; unit parsing &gt; should handle multiple unknown units" time="0.00039775">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; calendar-aware parsing &gt; should use custom calendar hour lengths" time="0.000074125">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; calendar-aware parsing &gt; should use custom calendar week lengths" time="0.00004375">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; calendar-aware parsing &gt; should handle missing calendar gracefully" time="0.000037">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; calendar-aware parsing &gt; should handle incomplete calendar data" time="0.000041375">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; edge cases &gt; should handle very large numbers" time="0.000045541">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; edge cases &gt; should handle zero values" time="0.000035417">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; edge cases &gt; should handle duplicate values" time="0.000034291">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; edge cases &gt; should handle single value" time="0.000037125">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; edge cases &gt; should handle trailing commas" time="0.0000335">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="parseQuickTimeButtons &gt; edge cases &gt; should handle leading commas" time="0.000031">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="formatTimeButton &gt; standard calendar formatting &gt; should format minutes correctly" time="0.000274709">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="formatTimeButton &gt; standard calendar formatting &gt; should format hours correctly" time="0.000050666">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="formatTimeButton &gt; standard calendar formatting &gt; should format days correctly" time="0.000034">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="formatTimeButton &gt; standard calendar formatting &gt; should format weeks correctly" time="0.000072541">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="formatTimeButton &gt; standard calendar formatting &gt; should prefer largest appropriate unit" time="0.000041959">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="formatTimeButton &gt; standard calendar formatting &gt; should format exact days when not exact weeks" time="0.000047958">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="formatTimeButton &gt; standard calendar formatting &gt; should handle non-exact divisions as minutes" time="0.000032083">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="formatTimeButton &gt; standard calendar formatting &gt; should handle negative values correctly" time="0.000038917">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="formatTimeButton &gt; custom calendar formatting &gt; should use custom hour lengths" time="0.00003175">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="formatTimeButton &gt; custom calendar formatting &gt; should use custom day lengths" time="0.0000305">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="formatTimeButton &gt; custom calendar formatting &gt; should use custom week lengths" time="0.000023542">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="formatTimeButton &gt; custom calendar formatting &gt; should handle mixed custom calendar units" time="0.0000385">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="formatTimeButton &gt; edge cases &gt; should handle zero correctly" time="0.000023166">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="formatTimeButton &gt; edge cases &gt; should handle missing calendar gracefully" time="0.000029708">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="formatTimeButton &gt; edge cases &gt; should handle very large numbers" time="0.000024125">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="getQuickTimeButtons (mini widget selection) &gt; main widget (no limitation) &gt; should return all buttons for main widget" time="0.0001215">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="getQuickTimeButtons (mini widget selection) &gt; main widget (no limitation) &gt; should return all buttons even with many buttons" time="0.000037167">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="getQuickTimeButtons (mini widget selection) &gt; mini widget selection (3 button limit) &gt; should return all buttons when 3 or fewer" time="0.000029084">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="getQuickTimeButtons (mini widget selection) &gt; mini widget selection (3 button limit) &gt; should return exactly 3 buttons when more available" time="0.000379375">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="getQuickTimeButtons (mini widget selection) &gt; mini widget selection (3 button limit) &gt; should prioritize largest negative + smallest positives" time="0.000039709">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="getQuickTimeButtons (mini widget selection) &gt; mini widget selection (3 button limit) &gt; should take 3 smallest positives when no negatives" time="0.000030792">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="getQuickTimeButtons (mini widget selection) &gt; mini widget selection (3 button limit) &gt; should handle only negative values" time="0.000030917">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="getQuickTimeButtons (mini widget selection) &gt; mini widget selection (3 button limit) &gt; should handle mixed with multiple negatives" time="0.000030916">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="getQuickTimeButtons (mini widget selection) &gt; mini widget selection (3 button limit) &gt; should handle single button" time="0.000027208">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="getQuickTimeButtons (mini widget selection) &gt; mini widget selection (3 button limit) &gt; should handle empty array" time="0.000025792">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="getQuickTimeButtons (mini widget selection) &gt; auto-selection algorithm edge cases &gt; should handle all same sign values" time="0.000043917">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="getQuickTimeButtons (mini widget selection) &gt; auto-selection algorithm edge cases &gt; should maintain sorted order in output" time="0.000029625">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="getQuickTimeButtons (mini widget selection) &gt; auto-selection algorithm edge cases &gt; should handle exactly 3 buttons" time="0.000029125">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="getQuickTimeButtons (mini widget selection) &gt; auto-selection algorithm edge cases &gt; should handle exactly 4 buttons (edge of limitation)" time="0.000029375">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="integration scenarios &gt; PF2e use case &gt; should handle PF2e exploration mode configuration" time="0.000057292">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="integration scenarios &gt; complex user configurations &gt; should handle power user configuration with many options" time="0.000112333">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="integration scenarios &gt; complex user configurations &gt; should handle backward-time-heavy configuration" time="0.00006025">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="integration scenarios &gt; calendar-specific scenarios &gt; should work with custom calendar and complex input" time="0.000069792">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="integration scenarios &gt; error recovery and edge cases &gt; should handle malformed input gracefully" time="0.000043416">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="integration scenarios &gt; error recovery and edge cases &gt; should handle all invalid input" time="0.000041041">
        </testcase>
        <testcase classname="packages/core/test/quick-time-buttons.test.ts" name="integration scenarios &gt; error recovery and edge cases &gt; should handle very large mixed configuration" time="0.000159167">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/star-trek-helpers-functionality.test.ts" timestamp="2025-07-10T02:12:14.362Z" hostname="Davids-Mac-mini.local" tests="21" failures="0" errors="0" skipped="0" time="0.003421417">
        <testcase classname="packages/core/test/star-trek-helpers-functionality.test.ts" name="Star Trek Helpers Functionality &gt; Stardate Helper &gt; should calculate TNG era stardate correctly" time="0.001017333">
        </testcase>
        <testcase classname="packages/core/test/star-trek-helpers-functionality.test.ts" name="Star Trek Helpers Functionality &gt; Stardate Helper &gt; should calculate DS9 era stardate correctly" time="0.000086208">
        </testcase>
        <testcase classname="packages/core/test/star-trek-helpers-functionality.test.ts" name="Star Trek Helpers Functionality &gt; Stardate Helper &gt; should calculate Enterprise era stardate with higher precision" time="0.000083833">
        </testcase>
        <testcase classname="packages/core/test/star-trek-helpers-functionality.test.ts" name="Star Trek Helpers Functionality &gt; Stardate Helper &gt; should handle year offsets correctly" time="0.000074917">
        </testcase>
        <testcase classname="packages/core/test/star-trek-helpers-functionality.test.ts" name="Star Trek Helpers Functionality &gt; Time Helpers &gt; should format hour with padding" time="0.000162334">
        </testcase>
        <testcase classname="packages/core/test/star-trek-helpers-functionality.test.ts" name="Star Trek Helpers Functionality &gt; Time Helpers &gt; should format minute with padding" time="0.000075083">
        </testcase>
        <testcase classname="packages/core/test/star-trek-helpers-functionality.test.ts" name="Star Trek Helpers Functionality &gt; Time Helpers &gt; should format second with padding" time="0.000094334">
        </testcase>
        <testcase classname="packages/core/test/star-trek-helpers-functionality.test.ts" name="Star Trek Helpers Functionality &gt; Time Helpers &gt; should handle undefined/null values gracefully" time="0.000042125">
        </testcase>
        <testcase classname="packages/core/test/star-trek-helpers-functionality.test.ts" name="Star Trek Helpers Functionality &gt; Time Helpers &gt; should use context when no explicit value provided" time="0.0001345">
        </testcase>
        <testcase classname="packages/core/test/star-trek-helpers-functionality.test.ts" name="Star Trek Helpers Functionality &gt; Math Helper &gt; should perform addition correctly" time="0.000104875">
        </testcase>
        <testcase classname="packages/core/test/star-trek-helpers-functionality.test.ts" name="Star Trek Helpers Functionality &gt; Math Helper &gt; should perform subtraction correctly" time="0.000035167">
        </testcase>
        <testcase classname="packages/core/test/star-trek-helpers-functionality.test.ts" name="Star Trek Helpers Functionality &gt; Math Helper &gt; should perform multiplication correctly" time="0.000036792">
        </testcase>
        <testcase classname="packages/core/test/star-trek-helpers-functionality.test.ts" name="Star Trek Helpers Functionality &gt; Math Helper &gt; should perform division correctly" time="0.000030833">
        </testcase>
        <testcase classname="packages/core/test/star-trek-helpers-functionality.test.ts" name="Star Trek Helpers Functionality &gt; Math Helper &gt; should handle division by zero safely" time="0.000028041">
        </testcase>
        <testcase classname="packages/core/test/star-trek-helpers-functionality.test.ts" name="Star Trek Helpers Functionality &gt; Math Helper &gt; should handle invalid operations gracefully" time="0.000028333">
        </testcase>
        <testcase classname="packages/core/test/star-trek-helpers-functionality.test.ts" name="Star Trek Helpers Functionality &gt; Month and Day Helpers &gt; should format month abbreviations correctly" time="0.000079917">
        </testcase>
        <testcase classname="packages/core/test/star-trek-helpers-functionality.test.ts" name="Star Trek Helpers Functionality &gt; Month and Day Helpers &gt; should format month names correctly" time="0.000038">
        </testcase>
        <testcase classname="packages/core/test/star-trek-helpers-functionality.test.ts" name="Star Trek Helpers Functionality &gt; Month and Day Helpers &gt; should format day ordinals correctly" time="0.000122708">
        </testcase>
        <testcase classname="packages/core/test/star-trek-helpers-functionality.test.ts" name="Star Trek Helpers Functionality &gt; Month and Day Helpers &gt; should format weekday names correctly" time="0.000075792">
        </testcase>
        <testcase classname="packages/core/test/star-trek-helpers-functionality.test.ts" name="Star Trek Helpers Functionality &gt; Helper Registration &gt; should register all required helpers" time="0.000155041">
        </testcase>
        <testcase classname="packages/core/test/star-trek-helpers-functionality.test.ts" name="Star Trek Helpers Functionality &gt; Helper Registration &gt; should only register helpers once" time="0.000051792">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/time-converter-compatibility-manager.test.ts" timestamp="2025-07-10T02:12:14.363Z" hostname="Davids-Mac-mini.local" tests="9" failures="0" errors="0" skipped="0" time="0.087138083">
        <testcase classname="packages/core/test/time-converter-compatibility-manager.test.ts" name="TimeConverter - CompatibilityManager Integration &gt; Data Provider Integration in getCurrentDate &gt; should use data provider when system has registered provider" time="0.005936041">
        </testcase>
        <testcase classname="packages/core/test/time-converter-compatibility-manager.test.ts" name="TimeConverter - CompatibilityManager Integration &gt; Data Provider Integration in getCurrentDate &gt; should fall back to epoch calculation when no data provider registered" time="0.000317959">
        </testcase>
        <testcase classname="packages/core/test/time-converter-compatibility-manager.test.ts" name="TimeConverter - CompatibilityManager Integration &gt; Data Provider Integration in getCurrentDate &gt; should handle different game systems correctly" time="0.004091375">
        </testcase>
        <testcase classname="packages/core/test/time-converter-compatibility-manager.test.ts" name="TimeConverter - CompatibilityManager Integration &gt; Data Provider Integration in getCurrentDate &gt; should handle data provider errors gracefully" time="0.006010667">
            <system-err>
[S&amp;S WARNING] Error getting system data pf2e.worldCreationTimestamp: Error: Mock provider error
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/time-converter-compatibility-manager.test.ts:112:15
    at CompatibilityManager.getSystemData [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/compatibility-manager.ts:291:14[90m)[39m
    at TimeConverter.getCurrentDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/time-converter.ts:143:46[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/time-converter-compatibility-manager.test.ts:117:43
    at Proxy.assertThrows [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mchai[24m/chai.js:2723:5[90m)[39m
    at Proxy.methodWrapper [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mchai[24m/chai.js:1618:25[90m)[39m
    at Proxy.&lt;anonymous&gt; [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/expect/dist/index.js:1088:12[90m)[39m
    at Proxy.overwritingMethodWrapper [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mchai[24m/chai.js:1670:33[90m)[39m
    at Proxy.&lt;anonymous&gt; [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/expect/dist/index.js:1420:16[90m)[39m
    at Proxy.&lt;anonymous&gt; [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/expect/dist/index.js:1029:14[90m)[39m

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/time-converter-compatibility-manager.test.ts" name="TimeConverter - CompatibilityManager Integration &gt; Data Provider Integration in getCurrentDate &gt; should handle null/undefined returns from data provider" time="0.000116084">
        </testcase>
        <testcase classname="packages/core/test/time-converter-compatibility-manager.test.ts" name="TimeConverter - CompatibilityManager Integration &gt; Data Provider Integration in onWorldTimeUpdate &gt; should use data provider when handling world time updates" time="0.001893334">
        </testcase>
        <testcase classname="packages/core/test/time-converter-compatibility-manager.test.ts" name="TimeConverter - CompatibilityManager Integration &gt; Data Provider Integration in onWorldTimeUpdate &gt; should handle system ID changes dynamically" time="0.056831167">
        </testcase>
        <testcase classname="packages/core/test/time-converter-compatibility-manager.test.ts" name="TimeConverter - CompatibilityManager Integration &gt; Error Handling and Robustness &gt; should provide consistent timestamps across multiple calls" time="0.005066292">
        </testcase>
        <testcase classname="packages/core/test/time-converter-compatibility-manager.test.ts" name="TimeConverter - CompatibilityManager Integration &gt; Error Handling and Robustness &gt; should handle timestamp changes between calls" time="0.00578875">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/ui-integration.test.ts" timestamp="2025-07-10T02:12:14.364Z" hostname="Davids-Mac-mini.local" tests="24" failures="0" errors="0" skipped="0" time="0.006892125">
        <testcase classname="packages/core/test/ui-integration.test.ts" name="SmallTime Integration &gt; isSmallTimeAvailable &gt; should return true when SmallTime module is active" time="0.000833125">
        </testcase>
        <testcase classname="packages/core/test/ui-integration.test.ts" name="SmallTime Integration &gt; isSmallTimeAvailable &gt; should return false when SmallTime module is not active" time="0.000068667">
        </testcase>
        <testcase classname="packages/core/test/ui-integration.test.ts" name="SmallTime Integration &gt; isSmallTimeAvailable &gt; should return false when SmallTime module is not installed" time="0.000096">
        </testcase>
        <testcase classname="packages/core/test/ui-integration.test.ts" name="SmallTime Integration &gt; isSmallTimeAvailable &gt; should return false when modules system is not available" time="0.000074417">
        </testcase>
        <testcase classname="packages/core/test/ui-integration.test.ts" name="SmallTime Integration &gt; getSmallTimeElement &gt; should return null when SmallTime module is not active" time="0.000100375">
        </testcase>
        <testcase classname="packages/core/test/ui-integration.test.ts" name="SmallTime Integration &gt; getSmallTimeElement &gt; should search for element when SmallTime is active" time="0.000706041">
        </testcase>
        <testcase classname="packages/core/test/ui-integration.test.ts" name="SmallTime Integration &gt; getSmallTimeElement &gt; should try multiple selectors until one is found" time="0.00019275">
        </testcase>
        <testcase classname="packages/core/test/ui-integration.test.ts" name="SmallTime Integration &gt; getSmallTimeElement &gt; should return null when no SmallTime element is found" time="0.000085625">
        </testcase>
        <testcase classname="packages/core/test/ui-integration.test.ts" name="Sidebar Button Management &gt; addSidebarButton &gt; should add a new button" time="0.000488292">
        </testcase>
        <testcase classname="packages/core/test/ui-integration.test.ts" name="Sidebar Button Management &gt; addSidebarButton &gt; should not add duplicate buttons" time="0.000114333">
        </testcase>
        <testcase classname="packages/core/test/ui-integration.test.ts" name="Sidebar Button Management &gt; addSidebarButton &gt; should allow multiple different buttons" time="0.000133833">
        </testcase>
        <testcase classname="packages/core/test/ui-integration.test.ts" name="Sidebar Button Management &gt; removeSidebarButton &gt; should remove an existing button" time="0.000133625">
        </testcase>
        <testcase classname="packages/core/test/ui-integration.test.ts" name="Sidebar Button Management &gt; removeSidebarButton &gt; should handle removing non-existent button gracefully" time="0.0003145">
        </testcase>
        <testcase classname="packages/core/test/ui-integration.test.ts" name="Sidebar Button Management &gt; clearSidebarButtons &gt; should remove all buttons" time="0.000109167">
        </testcase>
        <testcase classname="packages/core/test/ui-integration.test.ts" name="Sidebar Button Management &gt; getSidebarButtons &gt; should return a copy of buttons array" time="0.000204083">
        </testcase>
        <testcase classname="packages/core/test/ui-integration.test.ts" name="Scene Controls Integration &gt; registerControls &gt; should register getSceneControlButtons hook" time="0.000539042">
        </testcase>
        <testcase classname="packages/core/test/ui-integration.test.ts" name="Scene Controls Integration &gt; registerControls &gt; should register seasons-stars:widgetStateChanged hook for button state updates" time="0.000071625">
        </testcase>
        <testcase classname="packages/core/test/ui-integration.test.ts" name="Scene Controls Integration &gt; scene control button behavior &gt; should add scene control button for GM users" time="0.000165084">
        </testcase>
        <testcase classname="packages/core/test/ui-integration.test.ts" name="Scene Controls Integration &gt; scene control button behavior &gt; should not add scene control button for non-GM users" time="0.000048459">
        </testcase>
        <testcase classname="packages/core/test/ui-integration.test.ts" name="Scene Controls Integration &gt; scene control button behavior &gt; should handle missing notes controls gracefully" time="0.000620833">
            <system-err>
[S&amp;S WARNING] Notes controls not available for scene button {
  notesExists: [33mfalse[39m,
  notesToolsExists: [33mfalse[39m,
  fullControlsStructure: {}
}

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/ui-integration.test.ts" name="Scene Controls Integration &gt; scene control button behavior &gt; should handle missing notes.tools gracefully" time="0.000138125">
            <system-err>
[S&amp;S WARNING] Notes controls not available for scene button {
  notesExists: [33mtrue[39m,
  notesToolsExists: [33mfalse[39m,
  fullControlsStructure: { notes: {} }
}

            </system-err>
        </testcase>
        <testcase classname="packages/core/test/ui-integration.test.ts" name="Scene Controls Integration &gt; macro registration &gt; should register macro functions on window.SeasonsStars" time="0.000165416">
        </testcase>
        <testcase classname="packages/core/test/ui-integration.test.ts" name="Scene Controls Integration &gt; macro registration &gt; should register time advancement macro functions" time="0.000085625">
        </testcase>
        <testcase classname="packages/core/test/ui-integration.test.ts" name="Scene Controls Integration &gt; macro registration &gt; should extend existing SeasonsStars object instead of replacing" time="0.00005775">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/widget-factory-registration.test.ts" timestamp="2025-07-10T02:12:14.365Z" hostname="Davids-Mac-mini.local" tests="11" failures="0" errors="0" skipped="0" time="0.0048135">
        <testcase classname="packages/core/test/widget-factory-registration.test.ts" name="Widget Factory Registration (Module.ts Changes) &gt; Import Statement Coverage &gt; should successfully import CalendarWidgetManager and WidgetWrapper" time="0.001049">
        </testcase>
        <testcase classname="packages/core/test/widget-factory-registration.test.ts" name="Widget Factory Registration (Module.ts Changes) &gt; Widget Factory Registration Code Coverage &gt; should register main widget factory correctly" time="0.000292959">
        </testcase>
        <testcase classname="packages/core/test/widget-factory-registration.test.ts" name="Widget Factory Registration (Module.ts Changes) &gt; Widget Factory Registration Code Coverage &gt; should register mini widget factory correctly" time="0.000111459">
        </testcase>
        <testcase classname="packages/core/test/widget-factory-registration.test.ts" name="Widget Factory Registration (Module.ts Changes) &gt; Widget Factory Registration Code Coverage &gt; should register grid widget factory correctly" time="0.000094959">
        </testcase>
        <testcase classname="packages/core/test/widget-factory-registration.test.ts" name="Widget Factory Registration (Module.ts Changes) &gt; Widget Factory Registration Code Coverage &gt; should register all three widget factories as done in module.ts" time="0.000145708">
        </testcase>
        <testcase classname="packages/core/test/widget-factory-registration.test.ts" name="Widget Factory Registration (Module.ts Changes) &gt; Widget Factory Registration Code Coverage &gt; should create WidgetWrapper instances with correct parameters" time="0.0000755">
        </testcase>
        <testcase classname="packages/core/test/widget-factory-registration.test.ts" name="Widget Factory Registration (Module.ts Changes) &gt; Debug Logging Coverage &gt; should call Logger.debug when registering widget factories" time="0.001228125">
        </testcase>
        <testcase classname="packages/core/test/widget-factory-registration.test.ts" name="Widget Factory Registration (Module.ts Changes) &gt; Integration Test - Complete Module Registration Flow &gt; should successfully complete the entire widget registration flow" time="0.000229792">
        </testcase>
        <testcase classname="packages/core/test/widget-factory-registration.test.ts" name="Widget Factory Registration (Module.ts Changes) &gt; Integration Test - Complete Module Registration Flow &gt; should prevent the &quot;No factory registered for widget type&quot; error" time="0.000221167">
        </testcase>
        <testcase classname="packages/core/test/widget-factory-registration.test.ts" name="Widget Factory Registration (Module.ts Changes) &gt; Error Prevention Coverage &gt; should handle factory registration errors gracefully" time="0.0003625">
        </testcase>
        <testcase classname="packages/core/test/widget-factory-registration.test.ts" name="Widget Factory Registration (Module.ts Changes) &gt; Error Prevention Coverage &gt; should allow re-registration of widgets" time="0.000079583">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/widget-format-integration.test.ts" timestamp="2025-07-10T02:12:14.365Z" hostname="Davids-Mac-mini.local" tests="12" failures="0" errors="0" skipped="0" time="0.013341375">
        <testcase classname="packages/core/test/widget-format-integration.test.ts" name="Widget Format Integration Tests &gt; Widget Format Types &gt; should format mini widget correctly" time="0.004606333">
        </testcase>
        <testcase classname="packages/core/test/widget-format-integration.test.ts" name="Widget Format Integration Tests &gt; Widget Format Types &gt; should format main widget correctly" time="0.000772958">
        </testcase>
        <testcase classname="packages/core/test/widget-format-integration.test.ts" name="Widget Format Integration Tests &gt; Widget Format Types &gt; should format grid widget correctly" time="0.000291209">
        </testcase>
        <testcase classname="packages/core/test/widget-format-integration.test.ts" name="Widget Format Integration Tests &gt; Widget Format Edge Cases &gt; should handle missing widget formats gracefully" time="0.000527292">
        </testcase>
        <testcase classname="packages/core/test/widget-format-integration.test.ts" name="Widget Format Integration Tests &gt; Widget Format Edge Cases &gt; should handle invalid widget type gracefully" time="0.000139041">
        </testcase>
        <testcase classname="packages/core/test/widget-format-integration.test.ts" name="Widget Format Integration Tests &gt; Widget Format Edge Cases &gt; should handle empty widget format gracefully" time="0.000082125">
        </testcase>
        <testcase classname="packages/core/test/widget-format-integration.test.ts" name="Widget Format Integration Tests &gt; Widget Format Calendar Switching &gt; should handle calendar switching with different widget formats" time="0.001394833">
        </testcase>
        <testcase classname="packages/core/test/widget-format-integration.test.ts" name="Widget Format Integration Tests &gt; Widget Format Calendar Switching &gt; should maintain widget format consistency across date changes" time="0.001070625">
        </testcase>
        <testcase classname="packages/core/test/widget-format-integration.test.ts" name="Widget Format Integration Tests &gt; Widget Format Helper Integration &gt; should use proper helper syntax with ss- namespace" time="0.000219084">
        </testcase>
        <testcase classname="packages/core/test/widget-format-integration.test.ts" name="Widget Format Integration Tests &gt; Widget Format Helper Integration &gt; should handle complex helper combinations in widget formats" time="0.000958084">
        </testcase>
        <testcase classname="packages/core/test/widget-format-integration.test.ts" name="Widget Format Integration Tests &gt; Cross-Widget Format Consistency &gt; should produce consistent results for same date across all widget types" time="0.00057475">
        </testcase>
        <testcase classname="packages/core/test/widget-format-integration.test.ts" name="Widget Format Integration Tests &gt; Cross-Widget Format Consistency &gt; should handle month/day boundary conditions across all widget formats" time="0.001517708">
            <system-out>
[S&amp;S] Month value 12 outside calendar range (1-3), using start of year fallback
[S&amp;S] Month value 12 outside calendar range (1-3), using start of year fallback
[S&amp;S] Month value 12 outside calendar range (1-3), using start of year fallback

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/widget-manager.test.ts" timestamp="2025-07-10T02:12:14.366Z" hostname="Davids-Mac-mini.local" tests="8" failures="0" errors="0" skipped="0" time="0.00289325">
        <testcase classname="packages/core/test/widget-manager.test.ts" name="CalendarWidgetManager &gt; Widget Registration &gt; should register widget factories" time="0.0010425">
        </testcase>
        <testcase classname="packages/core/test/widget-manager.test.ts" name="CalendarWidgetManager &gt; Widget Registration &gt; should fail to get widget when no factory is registered" time="0.00009875">
        </testcase>
        <testcase classname="packages/core/test/widget-manager.test.ts" name="CalendarWidgetManager &gt; Widget Registration &gt; should successfully get widget when factory is registered" time="0.000179833">
        </testcase>
        <testcase classname="packages/core/test/widget-manager.test.ts" name="CalendarWidgetManager &gt; Bug Reproduction: Scene Controls Integration &gt; should fail when scene controls try to toggle widget without registration" time="0.000092708">
        </testcase>
        <testcase classname="packages/core/test/widget-manager.test.ts" name="CalendarWidgetManager &gt; Bug Reproduction: Scene Controls Integration &gt; should work when widgets are properly registered" time="0.000137709">
        </testcase>
        <testcase classname="packages/core/test/widget-manager.test.ts" name="CalendarWidgetManager &gt; Complete Widget Manager Integration &gt; should handle all widget types when properly registered" time="0.000113375">
        </testcase>
        <testcase classname="packages/core/test/widget-manager.test.ts" name="CalendarWidgetManager &gt; Complete Widget Manager Integration &gt; should work with WidgetWrapper for actual widget classes" time="0.000052">
        </testcase>
        <testcase classname="packages/core/test/widget-manager.test.ts" name="CalendarWidgetManager &gt; WidgetWrapper &gt; should wrap a widget with standard interface" time="0.000504875">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/widget-sync-integration.test.ts" timestamp="2025-07-10T02:12:14.366Z" hostname="Davids-Mac-mini.local" tests="6" failures="0" errors="0" skipped="0" time="0.037094375">
        <testcase classname="packages/core/test/widget-sync-integration.test.ts" name="Widget Synchronization Integration &gt; GitHub Issue #91 Comment Bug - Widget Year Mismatch &gt; should reproduce the widget synchronization issue" time="0.004991958">
        </testcase>
        <testcase classname="packages/core/test/widget-sync-integration.test.ts" name="Widget Synchronization Integration &gt; GitHub Issue #91 Comment Bug - Widget Year Mismatch &gt; should verify that widget sync fix works with Enhanced CompatibilityManager Data Registry" time="0.009748708">
        </testcase>
        <testcase classname="packages/core/test/widget-sync-integration.test.ts" name="Widget Synchronization Integration &gt; GitHub Issue #91 Comment Bug - Widget Year Mismatch &gt; should show the fix requires time converter to use world creation timestamp" time="0.002538208">
        </testcase>
        <testcase classname="packages/core/test/widget-sync-integration.test.ts" name="Widget Synchronization Integration &gt; Enhanced CompatibilityManager Data Registry Integration &gt; should use data provider when system has registered provider" time="0.009889916">
        </testcase>
        <testcase classname="packages/core/test/widget-sync-integration.test.ts" name="Widget Synchronization Integration &gt; Enhanced CompatibilityManager Data Registry Integration &gt; should fall back to epoch-based calculation when no data provider registered" time="0.00073375">
        </testcase>
        <testcase classname="packages/core/test/widget-sync-integration.test.ts" name="Widget Synchronization Integration &gt; Enhanced CompatibilityManager Data Registry Integration &gt; should handle data provider errors gracefully" time="0.007718625">
            <system-err>
[S&amp;S WARNING] Error getting system data pf2e.worldCreationTimestamp: Error: Mock provider error
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/widget-sync-integration.test.ts:175:15
    at CompatibilityManager.getSystemData [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/compatibility-manager.ts:291:14[90m)[39m
    at TimeConverter.getCurrentDate [90m(/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/src/core/time-converter.ts:143:46[90m)[39m
    at [90m/Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mpackages/core/test/widget-sync-integration.test.ts:180:38
    at Proxy.assertThrows [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mchai[24m/chai.js:2723:5[90m)[39m
    at Proxy.methodWrapper [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mchai[24m/chai.js:1618:25[90m)[39m
    at Proxy.&lt;anonymous&gt; [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/expect/dist/index.js:1088:12[90m)[39m
    at Proxy.overwritingMethodWrapper [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4mchai[24m/chai.js:1670:33[90m)[39m
    at Proxy.&lt;anonymous&gt; [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/expect/dist/index.js:1420:16[90m)[39m
    at Proxy.&lt;anonymous&gt; [90m(file:///Users/rayners/Code/personal/fvtt-seasons-and-stars/[39mnode_modules/[4m@vitest[24m/expect/dist/index.js:1029:14[90m)[39m

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/widgets.test.ts" timestamp="2025-07-10T02:12:14.366Z" hostname="Davids-Mac-mini.local" tests="41" failures="0" errors="0" skipped="0" time="0.01132075">
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarWidget API &gt; addSidebarButton &gt; should add a sidebar button" time="0.001127916">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarWidget API &gt; addSidebarButton &gt; should store button with correct properties" time="0.000752708">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarWidget API &gt; addSidebarButton &gt; should not add duplicate buttons" time="0.000236833">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarWidget API &gt; removeSidebarButton &gt; should remove existing button" time="0.000089708">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarWidget API &gt; removeSidebarButton &gt; should handle removing non-existent button gracefully" time="0.000074667">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarWidget API &gt; removeSidebarButton &gt; should only remove specified button" time="0.000066167">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarWidget API &gt; hasSidebarButton &gt; should return false for non-existent button" time="0.000036083">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarWidget API &gt; hasSidebarButton &gt; should return true for existing button" time="0.000079167">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarWidget API &gt; hasSidebarButton &gt; should return false after button is removed" time="0.0001555">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarMiniWidget API &gt; addSidebarButton &gt; should add a sidebar button" time="0.000117">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarMiniWidget API &gt; addSidebarButton &gt; should store button with correct properties" time="0.000104583">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarMiniWidget API &gt; addSidebarButton &gt; should not add duplicate buttons" time="0.000076">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarMiniWidget API &gt; removeSidebarButton &gt; should remove existing button" time="0.000080875">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarMiniWidget API &gt; removeSidebarButton &gt; should handle removing non-existent button gracefully" time="0.000028208">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarMiniWidget API &gt; hasSidebarButton &gt; should return false for non-existent button" time="0.00002875">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarMiniWidget API &gt; hasSidebarButton &gt; should return true for existing button" time="0.000034375">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarMiniWidget API &gt; hasSidebarButton &gt; should return false after button is removed" time="0.000083708">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarGridWidget API &gt; addSidebarButton &gt; should add a sidebar button" time="0.000141167">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarGridWidget API &gt; addSidebarButton &gt; should store button with correct properties" time="0.000064041">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarGridWidget API &gt; addSidebarButton &gt; should not add duplicate buttons" time="0.000051166">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarGridWidget Note Permission Filtering &gt; generateMonthData permission filtering &gt; should filter notes by player permissions in generateMonthData" time="0.002562958">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarGridWidget Note Permission Filtering &gt; generateMonthData permission filtering &gt; should allow GM to see all notes in generateMonthData" time="0.001017542">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarGridWidget Note Permission Filtering &gt; generateMonthData permission filtering &gt; should handle missing game.user gracefully in generateMonthData" time="0.000574792">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarGridWidget Note Permission Filtering &gt; generateMonthData permission filtering &gt; should use CONST.DOCUMENT_OWNERSHIP_LEVELS for permission checking" time="0.000225792">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="CalendarGridWidget Note Permission Filtering &gt; generateMonthData permission filtering &gt; should handle notes manager not available" time="0.000332292">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="Widget Hook Integration &gt; CalendarWidget hooks &gt; should re-render on seasons-stars:dateChanged hook" time="0.000191208">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="Widget Hook Integration &gt; CalendarWidget hooks &gt; should re-render on seasons-stars:calendarChanged hook" time="0.000088917">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="Widget Hook Integration &gt; CalendarWidget hooks &gt; should re-render on seasons-stars:settingsChanged hook when quickTimeButtons setting changes" time="0.000105917">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="Widget Hook Integration &gt; CalendarWidget hooks &gt; should not re-render when widget is not rendered" time="0.00007375">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="Widget Hook Integration &gt; CalendarWidget hooks &gt; should not re-render when no active instance" time="0.000070875">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="Widget Hook Integration &gt; CalendarMiniWidget hooks &gt; should re-render on seasons-stars:dateChanged hook" time="0.000096291">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="Widget Hook Integration &gt; CalendarMiniWidget hooks &gt; should re-render on seasons-stars:calendarChanged hook" time="0.00008425">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="Widget Hook Integration &gt; CalendarMiniWidget hooks &gt; should re-render on seasons-stars:settingsChanged hook for relevant settings" time="0.000120333">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="Widget Hook Integration &gt; CalendarMiniWidget hooks &gt; should handle missing active instance gracefully" time="0.00015725">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="Widget Hook Integration &gt; CalendarGridWidget hooks &gt; should re-render on seasons-stars:dateChanged hook" time="0.000102625">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="Widget Hook Integration &gt; CalendarGridWidget hooks &gt; should re-render on seasons-stars:calendarChanged hook" time="0.000101167">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="Widget Hook Integration &gt; CalendarGridWidget hooks &gt; should handle widget not rendered" time="0.000073416">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="Widget Hook Integration &gt; Cross-widget hook coordination &gt; should update all active widgets on dateChanged" time="0.000125625">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="Widget Hook Integration &gt; Cross-widget hook coordination &gt; should handle mixed widget states (some rendered, some not)" time="0.000109417">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="Widget Hook Integration &gt; Hook registration edge cases &gt; should handle registerHooks being called multiple times" time="0.000077042">
        </testcase>
        <testcase classname="packages/core/test/widgets.test.ts" name="Widget Hook Integration &gt; Hook registration edge cases &gt; should handle hooks being called when Hooks global is undefined" time="0.000090958">
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/worldtime-edge-cases-comprehensive.test.ts" timestamp="2025-07-10T02:12:14.368Z" hostname="Davids-Mac-mini.local" tests="15" failures="0" errors="0" skipped="0" time="0.418053334">
        <testcase classname="packages/core/test/worldtime-edge-cases-comprehensive.test.ts" name="WorldTime Edge Cases - Comprehensive Test Suite &gt; 🔢 Extreme WorldTime Values &gt; Handle worldTime = 0 for Gregorian calendar" time="0.002331042">
            <system-out>

=== GREGORIAN WORLDTIME ZERO TEST ===
  WorldTime=0 -&gt; 0/1/1 0:0:0
  ✅ Valid date produced for worldTime=0

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/worldtime-edge-cases-comprehensive.test.ts" name="WorldTime Edge Cases - Comprehensive Test Suite &gt; 🔢 Extreme WorldTime Values &gt; Handle worldTime = 0 for Golarion calendar" time="0.000477916">
            <system-out>

=== GOLARION WORLDTIME ZERO TEST ===
  WorldTime=0 -&gt; 2700/1/1 0:0:0
  ✅ Valid date produced for worldTime=0

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/worldtime-edge-cases-comprehensive.test.ts" name="WorldTime Edge Cases - Comprehensive Test Suite &gt; 🔢 Extreme WorldTime Values &gt; Handle worldTime = 0 for Vale Reckoning calendar" time="0.000796">
            <system-out>

=== VALE RECKONING WORLDTIME ZERO TEST ===
  WorldTime=0 -&gt; 0/1/1 0:0:0
  ✅ Valid date produced for worldTime=0

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/worldtime-edge-cases-comprehensive.test.ts" name="WorldTime Edge Cases - Comprehensive Test Suite &gt; 🔢 Extreme WorldTime Values &gt; Handle negative worldTime values" time="0.001176625">
            <system-out>

=== NEGATIVE WORLDTIME TEST ===

Testing worldTime = -1:
  Gregorian: -1/12/31
  Golarion: 2699/12/31
  Vale Reckoning: -1/8/45

Testing worldTime = -86400:
  Gregorian: -1/12/31
  Golarion: 2699/12/31
  Vale Reckoning: -1/8/45

Testing worldTime = -31536000:
  Gregorian: -1/1/1
  Golarion: 2699/1/1
  Vale Reckoning: -2/8/45
✅ NEGATIVE VALUES: Handled appropriately (valid dates or graceful errors)

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/worldtime-edge-cases-comprehensive.test.ts" name="WorldTime Edge Cases - Comprehensive Test Suite &gt; 🔢 Extreme WorldTime Values &gt; Handle very large worldTime values" time="0.313680541">
            <system-out>

=== LARGE WORLDTIME TEST ===

Testing worldTime = 31536000000 (~1000 years):
  Gregorian: 999/5/3
  Golarion: 3699/5/3
  Vale Reckoning: 1002/6/45

Testing worldTime = 315360000000 (~10000 years):
  Gregorian: 9993/5/12
  Golarion: 12693/5/12
  Vale Reckoning: 10027/4/36

Testing worldTime = 3153600000000 (~100000 years):
  Gregorian: 99933/8/10
  Golarion: 102633/8/10
  Vale Reckoning: 100274/6/37
✅ LARGE VALUES: Handled appropriately (valid dates or reasonable limits)

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/worldtime-edge-cases-comprehensive.test.ts" name="WorldTime Edge Cases - Comprehensive Test Suite &gt; 📅 Date Boundary Edge Cases &gt; Handle end-of-year boundaries with worldTime conversion" time="0.010656125">
            <system-out>

=== YEAR BOUNDARY WORLDTIME TEST ===

Testing boundary: 2023/12/31 23:59:59
  Gregorian: worldTime=63871286399, roundTrip=2023/12/31
  Golarion: worldTime=-21332505601, roundTrip=2023/12/31

Testing boundary: 2024/1/1 0:0:0
  Gregorian: worldTime=63871286400, roundTrip=2024/1/1
  Golarion: worldTime=-21332505600, roundTrip=2024/1/1

Testing boundary: 2024/12/31 23:59:59
  Gregorian: worldTime=63902908799, roundTrip=2024/12/31
  Golarion: worldTime=-21300883201, roundTrip=2024/12/31

Testing boundary: 2025/1/1 0:0:0
  Gregorian: worldTime=63902908800, roundTrip=2025/1/1
  Golarion: worldTime=-21300883200, roundTrip=2025/1/1
✅ YEAR BOUNDARIES: WorldTime conversion preserves exact dates and times

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/worldtime-edge-cases-comprehensive.test.ts" name="WorldTime Edge Cases - Comprehensive Test Suite &gt; 📅 Date Boundary Edge Cases &gt; Handle leap year boundaries with worldTime conversion" time="0.0185345">
            <system-out>

=== LEAP YEAR BOUNDARY WORLDTIME TEST ===

Testing: Day before leap day (2024/2/28)
  Gregorian: worldTime=63876297600, valid roundTrip
  Golarion: worldTime=-21327494400, valid roundTrip

Testing: Leap day itself (2024/2/29)
  Gregorian: worldTime=63876384000, valid roundTrip
  Golarion: worldTime=-21327408000, valid roundTrip

Testing: Day after leap day (2024/3/1)
  Gregorian: worldTime=63876470400, valid roundTrip
  Golarion: worldTime=-21327321600, valid roundTrip

Testing: Feb 28 in non-leap year (2023/2/28)
  Gregorian: worldTime=63844761600, valid roundTrip
  Golarion: worldTime=-21359030400, valid roundTrip

Testing: Mar 1 in non-leap year (2023/3/1)
  Gregorian: worldTime=63844848000, valid roundTrip
  Golarion: worldTime=-21358944000, valid roundTrip
✅ LEAP YEAR BOUNDARIES: Correctly handled with worldTime conversion

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/worldtime-edge-cases-comprehensive.test.ts" name="WorldTime Edge Cases - Comprehensive Test Suite &gt; ⏱️ Time Component Edge Cases &gt; Handle precise time components in worldTime conversion" time="0.024044541">
            <system-out>

=== PRECISE TIME COMPONENT TEST ===

Testing time: Midnight (0:0:0)
  Gregorian: worldTime=63885628800
    Original: 0:0:0
    Round-trip: 0:0:0
  Golarion: worldTime=-21318163200
    Original: 0:0:0
    Round-trip: 0:0:0

Testing time: Noon (12:0:0)
  Gregorian: worldTime=63885672000
    Original: 12:0:0
    Round-trip: 12:0:0
  Golarion: worldTime=-21318120000
    Original: 12:0:0
    Round-trip: 12:0:0

Testing time: End of day (23:59:59)
  Gregorian: worldTime=63885715199
    Original: 23:59:59
    Round-trip: 23:59:59
  Golarion: worldTime=-21318076801
    Original: 23:59:59
    Round-trip: 23:59:59

Testing time: Random time (6:30:45)
  Gregorian: worldTime=63885652245
    Original: 6:30:45
    Round-trip: 6:30:45
  Golarion: worldTime=-21318139755
    Original: 6:30:45
    Round-trip: 6:30:45

Testing time: Sequential digits (12:34:56)
  Gregorian: worldTime=63885674096
    Original: 12:34:56
    Round-trip: 12:34:56
  Golarion: worldTime=-21318117904
    Original: 12:34:56
    Round-trip: 12:34:56

Testing time: All ones (1:1:1)
  Gregorian: worldTime=63885632461
    Original: 1:1:1
    Round-trip: 1:1:1
  Golarion: worldTime=-21318159539
    Original: 1:1:1
    Round-trip: 1:1:1

Testing time: Afternoon time (13:37:42)
  Gregorian: worldTime=63885677862
    Original: 13:37:42
    Round-trip: 13:37:42
  Golarion: worldTime=-21318114138
    Original: 13:37:42
    Round-trip: 13:37:42
✅ TIME PRECISION: All time components preserved exactly through worldTime conversion

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/worldtime-edge-cases-comprehensive.test.ts" name="WorldTime Edge Cases - Comprehensive Test Suite &gt; ⏱️ Time Component Edge Cases &gt; Handle time arithmetic edge cases" time="0.016330708">
            <system-out>

=== TIME ARITHMETIC EDGE CASES ===
Base time: 23:59:58

Gregorian Calendar:
  Base worldTime: 63885715198
  +1 sec: 2024/6/15 23:59:59
  +2 sec: 2024/6/16 0:0:0
  +1h 2s: 2024/6/16 1:0:0

Golarion Calendar:
  Base worldTime: -21318076802
  +1 sec: 2024/6/15 23:59:59
  +2 sec: 2024/6/16 0:0:0
  +1h 2s: 2024/6/16 1:0:0
✅ TIME ARITHMETIC: Correctly handles second/minute/hour/day boundaries

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/worldtime-edge-cases-comprehensive.test.ts" name="WorldTime Edge Cases - Comprehensive Test Suite &gt; 🔄 Bidirectional Conversion Stress Tests &gt; Gregorian round-trip conversion with known dates" time="0.016139416">
            <system-out>

=== GREGORIAN ROUND-TRIP TEST ===
  Test 1: 2024/1/1 -&gt; worldTime=63871286400 -&gt; 2024/1/1
  Test 2: 2024/6/15 -&gt; worldTime=63885673845 -&gt; 2024/6/15
  Test 3: 2024/12/31 -&gt; worldTime=63902908799 -&gt; 2024/12/31
  Test 4: 1/1/1 -&gt; worldTime=31622400 -&gt; 1/1/1
  Test 5: 2000/2/29 -&gt; worldTime=63119024130 -&gt; 2000/2/29
✅ GREGORIAN ROUND-TRIP: All known dates converted correctly

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/worldtime-edge-cases-comprehensive.test.ts" name="WorldTime Edge Cases - Comprehensive Test Suite &gt; 🔄 Bidirectional Conversion Stress Tests &gt; Golarion round-trip conversion with known dates" time="0.00391175">
            <system-out>

=== GOLARION ROUND-TRIP TEST ===
  Test 1: 2700/1/1 -&gt; worldTime=0 -&gt; 2700/1/1
  Test 2: 4712/10/21 -&gt; worldTime=63517928406 -&gt; 4712/10/21
  Test 3: 4725/6/15 -&gt; worldTime=63917121600 -&gt; 4725/6/15
  Test 4: 3000/1/1 -&gt; worldTime=9467174730 -&gt; 3000/1/1
✅ GOLARION ROUND-TRIP: All known dates converted correctly

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/worldtime-edge-cases-comprehensive.test.ts" name="WorldTime Edge Cases - Comprehensive Test Suite &gt; 🔄 Bidirectional Conversion Stress Tests &gt; Vale Reckoning round-trip conversion with known dates" time="0.006826541">
            <system-out>

=== VALE RECKONING ROUND-TRIP TEST ===
  Test 1: 0/1/1 -&gt; worldTime=0 -&gt; 0/1/1
  Test 2: 1542/4/15 -&gt; worldTime=48508372800 -&gt; 1542/4/15
  Test 3: 1000/6/30 -&gt; worldTime=31471871445 -&gt; 1000/6/30
  Test 4: 500/2/10 -&gt; worldTime=15729574520 -&gt; 500/2/10
✅ VALE RECKONING ROUND-TRIP: All known dates converted correctly

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/worldtime-edge-cases-comprehensive.test.ts" name="WorldTime Edge Cases - Comprehensive Test Suite &gt; 🔄 Bidirectional Conversion Stress Tests &gt; Test worldTime sequence continuity" time="0.001102375">
            <system-out>

=== WORLDTIME SEQUENCE CONTINUITY TEST ===

Gregorian Calendar:
  Base (worldTime=86400000): 2/9/27
  Day +1 (worldTime=86486400): 2/9/28
  Day +2 (worldTime=86572800): 2/9/29
  Day +3 (worldTime=86659200): 2/9/30
  Day +4 (worldTime=86745600): 2/10/1
  Day +5 (worldTime=86832000): 2/10/2
  Day +6 (worldTime=86918400): 2/10/3
  Day +7 (worldTime=87004800): 2/10/4
  Day +8 (worldTime=87091200): 2/10/5
  Day +9 (worldTime=87177600): 2/10/6
  Day +10 (worldTime=87264000): 2/10/7
  ✅ Sequential worldTime values produce sequential dates

Golarion Calendar:
  Base (worldTime=86400000): 2702/9/28
  Day +1 (worldTime=86486400): 2702/9/29
  Day +2 (worldTime=86572800): 2702/9/30
  Day +3 (worldTime=86659200): 2702/10/1
  Day +4 (worldTime=86745600): 2702/10/2
  Day +5 (worldTime=86832000): 2702/10/3
  Day +6 (worldTime=86918400): 2702/10/4
  Day +7 (worldTime=87004800): 2702/10/5
  Day +8 (worldTime=87091200): 2702/10/6
  Day +9 (worldTime=87177600): 2702/10/7
  Day +10 (worldTime=87264000): 2702/10/8
  ✅ Sequential worldTime values produce sequential dates
✅ SEQUENCE CONTINUITY: WorldTime increments produce expected date sequences

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/worldtime-edge-cases-comprehensive.test.ts" name="WorldTime Edge Cases - Comprehensive Test Suite &gt; 🌍 Calendar-Specific WorldTime Behavior &gt; Compare worldTime interpretation across calendar types" time="0.000529959">
            <system-out>

=== CROSS-CALENDAR WORLDTIME COMPARISON ===

WorldTime = 0 (0 days):
  Gregorian: 0/1/1
  Golarion: 2700/1/1
  Vale Reckoning: 0/1/1

WorldTime = 86400 (1 days):
  Gregorian: 0/1/2
  Golarion: 2700/1/2
  Vale Reckoning: 0/1/2

WorldTime = 31536000 (365 days):
  Gregorian: 0/12/31
  Golarion: 2701/1/1
  Vale Reckoning: 1/1/2
✅ CROSS-CALENDAR: All calendars produce valid dates for same worldTime values

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/worldtime-edge-cases-comprehensive.test.ts" name="WorldTime Edge Cases - Comprehensive Test Suite &gt; 🌍 Calendar-Specific WorldTime Behavior &gt; Verify calendar-specific worldTime configuration effects" time="0.000393834">
            <system-out>

=== CALENDAR WORLDTIME CONFIGURATION TEST ===

Gregorian Configuration:
  No worldTime configuration - using legacy mode
  WorldTime=0 produces: 0/1/1
  ✅ Epoch-based interpretation: Year close to 0

Golarion (PF2e) Configuration:
  Interpretation: epoch-based
  Epoch year: 2700
  Current year: 4725
  WorldTime=0 produces: 2700/1/1
  ✅ Epoch-based interpretation: Year close to 2700

Vale Reckoning Configuration:
  No worldTime configuration - using legacy mode
  WorldTime=0 produces: 0/1/1
  ✅ Epoch-based interpretation: Year close to 0
✅ CONFIGURATION: WorldTime interpretation modes work as designed

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/year-calculation-behavior.test.ts" timestamp="2025-07-10T02:12:14.369Z" hostname="Davids-Mac-mini.local" tests="10" failures="0" errors="0" skipped="0" time="0.04660425">
        <testcase classname="packages/core/test/year-calculation-behavior.test.ts" name="Year Calculation Behavior &gt; Epoch-based Year Calculations &gt; should calculate year 4725 for a world created in 2025 with standard elapsed time" time="0.006766292">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/year-calculation-behavior.test.ts" name="Year Calculation Behavior &gt; Epoch-based Year Calculations &gt; should handle worldTime=0 correctly relative to world creation date" time="0.006175959">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/year-calculation-behavior.test.ts" name="Year Calculation Behavior &gt; Epoch-based Year Calculations &gt; should advance years correctly from world creation baseline" time="0.002662833">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/year-calculation-behavior.test.ts" name="Year Calculation Behavior &gt; PF2e Integration Compatibility &gt; should match PF2e AR theme year calculation method" time="0.004813167">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/year-calculation-behavior.test.ts" name="Year Calculation Behavior &gt; PF2e Integration Compatibility &gt; should handle different world creation years consistently" time="0.01002125">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/year-calculation-behavior.test.ts" name="Year Calculation Behavior &gt; Edge Cases and Error Conditions &gt; should handle missing world creation timestamp gracefully" time="0.002173375">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/year-calculation-behavior.test.ts" name="Year Calculation Behavior &gt; Edge Cases and Error Conditions &gt; should handle very large worldTime values" time="0.001843667">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/year-calculation-behavior.test.ts" name="Year Calculation Behavior &gt; Edge Cases and Error Conditions &gt; should handle negative worldTime values" time="0.003308583">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/year-calculation-behavior.test.ts" name="Year Calculation Behavior &gt; Round-trip Date Conversion &gt; should convert date to worldTime and back to same date" time="0.005183459">
            <system-out>
✅ PF2e environment setup complete: {
  worldCreatedOn: [32m&apos;2025-01-01T00:00:00.000Z&apos;[39m,
  currentWorldTime: [33m0[39m,
  dateTheme: [32m&apos;AR&apos;[39m,
  expectedPF2eYear: [33m4725[39m
}

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/year-calculation-behavior.test.ts" name="Current Implementation Issues (Failing Tests) &gt; currently fails: shows 6749 instead of 4725 for GitHub issue scenario" time="0.001815">
        </testcase>
    </testsuite>
    <testsuite name="packages/fantasy-pack/test/dark-sun-calendar.test.ts" timestamp="2025-07-10T02:12:14.370Z" hostname="Davids-Mac-mini.local" tests="10" failures="0" errors="0" skipped="0" time="0.019516541">
        <testcase classname="packages/fantasy-pack/test/dark-sun-calendar.test.ts" name="Dark Sun Calendar &gt; Weekday Behavior &gt; should start every month on &quot;1 Day&quot; (weekday index 0)" time="0.002610916">
        </testcase>
        <testcase classname="packages/fantasy-pack/test/dark-sun-calendar.test.ts" name="Dark Sun Calendar &gt; Weekday Behavior &gt; should have intercalary days that do not count for weekdays" time="0.000119792">
        </testcase>
        <testcase classname="packages/fantasy-pack/test/dark-sun-calendar.test.ts" name="Dark Sun Calendar &gt; Weekday Behavior &gt; should reset weekday cycle after each intercalary period" time="0.000367334">
        </testcase>
        <testcase classname="packages/fantasy-pack/test/dark-sun-calendar.test.ts" name="Dark Sun Calendar &gt; Weekday Behavior &gt; should maintain consistent weekday progression within months" time="0.001491625">
        </testcase>
        <testcase classname="packages/fantasy-pack/test/dark-sun-calendar.test.ts" name="Dark Sun Calendar &gt; Weekday Behavior &gt; should handle year transitions correctly" time="0.010368167">
        </testcase>
        <testcase classname="packages/fantasy-pack/test/dark-sun-calendar.test.ts" name="Dark Sun Calendar &gt; Intercalary Days Configuration &gt; should have exactly 3 intercalary periods of 5 days each" time="0.001568333">
        </testcase>
        <testcase classname="packages/fantasy-pack/test/dark-sun-calendar.test.ts" name="Dark Sun Calendar &gt; Intercalary Days Configuration &gt; should place intercalary periods after correct months" time="0.001336125">
        </testcase>
        <testcase classname="packages/fantasy-pack/test/dark-sun-calendar.test.ts" name="Dark Sun Calendar &gt; Calendar Structure &gt; should have 12 months of 30 days each" time="0.00042525">
        </testcase>
        <testcase classname="packages/fantasy-pack/test/dark-sun-calendar.test.ts" name="Dark Sun Calendar &gt; Calendar Structure &gt; should have 6 weekdays" time="0.000245083">
        </testcase>
        <testcase classname="packages/fantasy-pack/test/dark-sun-calendar.test.ts" name="Dark Sun Calendar &gt; Calendar Structure &gt; should have 375 total days per year" time="0.000088334">
        </testcase>
    </testsuite>
    <testsuite name="packages/fantasy-pack/test/dark-sun.test.ts" timestamp="2025-07-10T02:12:14.371Z" hostname="Davids-Mac-mini.local" tests="3" failures="0" errors="0" skipped="0" time="0.00437025">
        <testcase classname="packages/fantasy-pack/test/dark-sun.test.ts" name="Dark Sun Calendar - Month Start Alignment &gt; 🌵 Dark Sun Calendar - Month Start Alignment &gt; Dark Sun all months should start on &quot;1 Day&quot; (weekday 0)" time="0.003150125">
            <system-out>

=== DARK SUN MONTH START ALIGNMENT TEST ===
Dark Sun weekdays:
  0: 1 Day
  1: 2 Day
  2: 3 Day
  3: 4 Day
  4: 5 Day
  5: 6 Day

Testing month start alignment:
Scorch (month 1): starts on weekday 0 (1 Day)
Morrow (month 2): starts on weekday 0 (1 Day)
Rest (month 3): starts on weekday 0 (1 Day)
Gather (month 4): starts on weekday 0 (1 Day)
Breeze (month 5): starts on weekday 0 (1 Day)
Mist (month 6): starts on weekday 0 (1 Day)
Bloom (month 7): starts on weekday 0 (1 Day)
Haze (month 8): starts on weekday 0 (1 Day)
Hoard (month 9): starts on weekday 0 (1 Day)
Wind (month 10): starts on weekday 0 (1 Day)
Sorrow (month 11): starts on weekday 0 (1 Day)
Smolder (month 12): starts on weekday 0 (1 Day)
✅ DARK SUN MONTH STARTS: All months correctly start on &quot;1 Day&quot;

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/dark-sun.test.ts" name="Dark Sun Calendar - Month Start Alignment &gt; 🌵 Dark Sun Calendar - Month Start Alignment &gt; Dark Sun intercalary days should not affect month start alignment" time="0.000407292">
            <system-out>

=== DARK SUN INTERCALARY ALIGNMENT TEST ===

Testing Breeze (after Cooling Sun):
  First day of Breeze: weekday 0 (1 Day)
  ✅ Correct: Still starts on &quot;1 Day&quot; after Cooling Sun

Testing Hoard (after Soaring Sun):
  First day of Hoard: weekday 0 (1 Day)
  ✅ Correct: Still starts on &quot;1 Day&quot; after Soaring Sun

Testing Winddy (next year) (after Highest Sun):
  First day of Winddy (next year): weekday 0 (1 Day)
  ✅ Correct: Still starts on &quot;1 Day&quot; after Highest Sun

✅ DARK SUN INTERCALARY: Month starts remain aligned despite intercalary days

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/dark-sun.test.ts" name="Dark Sun Calendar - Month Start Alignment &gt; 🌵 Dark Sun Calendar - Month Start Alignment &gt; Dark Sun intercalary days should have countsForWeekdays: false" time="0.000235916">
            <system-out>

=== DARK SUN INTERCALARY CONFIGURATION TEST ===
Dark Sun intercalary days:
  1. Cooling Sun (after Gather)
     countsForWeekdays: false
  2. Soaring Sun (after Haze)
     countsForWeekdays: false
  3. Highest Sun (after Smolder)
     countsForWeekdays: false
✅ DARK SUN CONFIGURATION: All intercalary days correctly set countsForWeekdays: false

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/fantasy-pack/test/exandrian.test.ts" timestamp="2025-07-10T02:12:14.371Z" hostname="Davids-Mac-mini.local" tests="4" failures="0" errors="0" skipped="0" time="0.014186792">
        <testcase classname="packages/fantasy-pack/test/exandrian.test.ts" name="Exandrian Calendar - Critical Role Specific Issues &gt; 🌟 Exandrian Calendar - Critical Role Specific Issues &gt; Exandrian month lengths should match Critical Role canon" time="0.002516917">
            <system-out>

=== EXANDRIAN MONTH LENGTH TEST ===
Exandrian months:
  1. Horisal: 29 days
  2. Misuthar: 30 days
  3. Dualahei: 30 days
  4. Thunsheer: 31 days
  5. Unndilar: 28 days
  6. Brussendar: 31 days
  7. Sydenstar: 32 days
  8. Fessuran: 29 days
  9. Quen&apos;pillar: 27 days
  10. Cuersaar: 29 days
  11. Duscar: 32 days

Total month days: 328
Calculated year length: 328
✅ EXANDRIAN MONTHS: Month lengths are reasonable and year calculation correct

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/exandrian.test.ts" name="Exandrian Calendar - Critical Role Specific Issues &gt; 🌟 Exandrian Calendar - Critical Role Specific Issues &gt; Exandrian weekday calculation should be consistent" time="0.004221333">
            <system-out>

=== EXANDRIAN WEEKDAY CONSISTENCY TEST ===
Exandrian weekdays:
  0: Miresen
  1: Grissen
  2: Whelsen
  3: Conthsen
  4: Folsen
  5: Yulisen
  6: Da&apos;leysen

Testing weekday progression in Horisal (29 days):
  Day 1: weekday 2 (Whelsen)
  Day 2: weekday 3 (Conthsen)
  Day 3: weekday 4 (Folsen)
  Day 4: weekday 5 (Yulisen)
  Day 5: weekday 6 (Da&apos;leysen)
  Day 6: weekday 0 (Miresen)
  Day 7: weekday 1 (Grissen)
✅ EXANDRIAN WEEKDAYS: Weekday progression is consistent and valid

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/exandrian.test.ts" name="Exandrian Calendar - Critical Role Specific Issues &gt; 🌟 Exandrian Calendar - Critical Role Specific Issues &gt; Exandrian basic calendar operations work correctly" time="0.001652">
            <system-out>

=== EXANDRIAN BASIC OPERATIONS TEST ===
Exandrian calendar (exandrian):
  Months: 11
  Weekdays: 7
  Start of year: 813/1/1
  Weekday: 2 (Whelsen)
  WorldTime: 23039769600
  Round-trip: 813/1/1
  Year length: 328 days
  ✅ Basic operations successful
✅ EXANDRIAN OPERATIONS: All basic calendar operations work correctly

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/exandrian.test.ts" name="Exandrian Calendar - Critical Role Specific Issues &gt; 🌟 Exandrian Calendar - Critical Role Specific Issues &gt; Exandrian date arithmetic works correctly" time="0.004919916">
            <system-out>

=== EXANDRIAN DATE ARITHMETIC TEST ===
  Start: 813/1/1
  +1 day: 813/1/2
  +7 days: 813/1/8
  +30 days: 813/2/2
  ✅ Date arithmetic works correctly
✅ EXANDRIAN ARITHMETIC: Date arithmetic functions correctly

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/fantasy-pack/test/forbidden-lands.test.ts" timestamp="2025-07-10T02:12:14.371Z" hostname="Davids-Mac-mini.local" tests="3" failures="0" errors="0" skipped="0" time="0.013634833">
        <testcase classname="packages/fantasy-pack/test/forbidden-lands.test.ts" name="Forbidden Lands Calendar - Season Alignment &gt; 🗡️ Forbidden Lands Calendar - Season Alignment &gt; Forbidden Lands should have seasons defined" time="0.005620416">
            <system-out>

=== FORBIDDEN LANDS SEASON ALIGNMENT TEST ===
Forbidden Lands seasons:
  Winter: starts month 1 (endMonth: 1)
    Winter starts on weekday 0 (Sunday)
  Spring: starts month 2 (endMonth: 3)
    Spring starts on weekday 4 (Growthday)
  Summer: starts month 4 (endMonth: 5)
    Summer starts on weekday 4 (Growthday)
  Autumn: starts month 6 (endMonth: 7)
    Autumn starts on weekday 4 (Growthday)
  Winter: starts month 8 (endMonth: 8)
    Winter starts on weekday 4 (Growthday)
✅ FORBIDDEN LANDS SEASONS: Season transitions align correctly with calendar

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/forbidden-lands.test.ts" name="Forbidden Lands Calendar - Season Alignment &gt; 🗡️ Forbidden Lands Calendar - Season Alignment &gt; Forbidden Lands basic calendar operations work correctly" time="0.002057125">
            <system-out>

=== FORBIDDEN LANDS BASIC OPERATIONS TEST ===
Forbidden Lands calendar (forbidden-lands):
  Months: 8
  Weekdays: 7
  Start of year: 1166/1/1
  Weekday: 0 (Sunday)
  WorldTime: 36670233600
  Round-trip: 1166/1/1
  Year length: 364 days
  ✅ Basic operations successful
✅ FORBIDDEN LANDS OPERATIONS: All basic calendar operations work correctly

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/forbidden-lands.test.ts" name="Forbidden Lands Calendar - Season Alignment &gt; 🗡️ Forbidden Lands Calendar - Season Alignment &gt; Forbidden Lands date arithmetic works correctly" time="0.004765375">
            <system-out>

=== FORBIDDEN LANDS DATE ARITHMETIC TEST ===
  Start: 1166/1/1
  +1 day: 1166/1/2
  +7 days: 1166/1/8
  +30 days: 1166/1/31
  ✅ Date arithmetic works correctly
✅ FORBIDDEN LANDS ARITHMETIC: Date arithmetic functions correctly

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/fantasy-pack/test/warhammer.test.ts" timestamp="2025-07-10T02:12:14.371Z" hostname="Davids-Mac-mini.local" tests="3" failures="0" errors="0" skipped="0" time="0.025804708">
        <testcase classname="packages/fantasy-pack/test/warhammer.test.ts" name="Warhammer Fantasy Roleplay Calendar - Date Alignment Issues &gt; 🛡️ WFRP Intercalary Day Issues &gt; WFRP intercalary days should not advance weekday when countsForWeekdays: false" time="0.005150208">
            <system-out>

=== WFRP INTERCALARY WEEKDAY TEST ===
WFRP Calendar intercalary days:
  1. Hexenstag (after Vorhexen, countsForWeekdays: false)
  2. Mitterfruhl (after Jahrdrung, countsForWeekdays: false)
  3. Sonnstill (after Sommerzeit, countsForWeekdays: false)
  4. Geheimnistag (after Vorgeheim, countsForWeekdays: false)
  5. Mittherbst (after Erntezeit, countsForWeekdays: false)
  6. Mondstille (after Ulriczeit, countsForWeekdays: false)

Testing Issue #21 scenario:
33rd Jahrdrung (2523/2/33): weekday 6
1st Pflugzeit (2523/3/1): weekday 7
Expected weekday after: 7
Actual weekday after: 7
✅ CORRECT: Intercalary day does not advance weekday

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/warhammer.test.ts" name="Warhammer Fantasy Roleplay Calendar - Date Alignment Issues &gt; 🛡️ WFRP Intercalary Day Issues &gt; WFRP all intercalary days should respect countsForWeekdays setting" time="0.018931041">
            <system-out>

=== WFRP ALL INTERCALARY DAYS TEST ===

Testing Hexenstag (countsForWeekdays: false):
  ⚠️  Cannot test Hexenstag - month mapping issue

Testing Mitterfruhl (countsForWeekdays: false):
  Last day of Jahrdrung: weekday 6
  First day of Pflugzeit: weekday 7
  Expected advancement: 1 (intercalary does not count)
  Expected weekday: 7, Actual: 7
  ✅ Mitterfruhl weekday handling correct

Testing Sonnstill (countsForWeekdays: false):
  Last day of Sommerzeit: weekday 1
  First day of Vorgeheim: weekday 2
  Expected advancement: 1 (intercalary does not count)
  Expected weekday: 2, Actual: 2
  ✅ Sonnstill weekday handling correct

Testing Geheimnistag (countsForWeekdays: false):
  Last day of Vorgeheim: weekday 2
  First day of Nachgeheim: weekday 3
  Expected advancement: 1 (intercalary does not count)
  Expected weekday: 3, Actual: 3
  ✅ Geheimnistag weekday handling correct

Testing Mittherbst (countsForWeekdays: false):
  Last day of Erntezeit: weekday 3
  First day of Brauzeit: weekday 4
  Expected advancement: 1 (intercalary does not count)
  Expected weekday: 4, Actual: 4
  ✅ Mittherbst weekday handling correct

Testing Mondstille (countsForWeekdays: false):
  Last day of Ulriczeit: weekday 6
  First day of Vorhexen: weekday 7
  Expected advancement: 1 (intercalary does not count)
  Expected weekday: 7, Actual: 7
  ✅ Mondstille weekday handling correct

✅ WFRP INTERCALARY DAYS: All intercalary days respect countsForWeekdays setting

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/warhammer.test.ts" name="Warhammer Fantasy Roleplay Calendar - Date Alignment Issues &gt; 🛡️ WFRP Intercalary Day Issues &gt; WFRP year length calculation includes all intercalary days" time="0.0010855">
            <system-out>

=== WFRP YEAR LENGTH TEST ===
Nachexen: 32 days
Jahrdrung: 33 days
Pflugzeit: 33 days
Sigmarzeit: 33 days
Sommerzeit: 33 days
Vorgeheim: 33 days
Nachgeheim: 32 days
Erntezeit: 33 days
Brauzeit: 33 days
Kaldezeit: 33 days
Ulriczeit: 33 days
Vorhexen: 33 days
Hexenstag: 1 intercalary day(s)
Mitterfruhl: 1 intercalary day(s)
Sonnstill: 1 intercalary day(s)
Geheimnistag: 1 intercalary day(s)
Mittherbst: 1 intercalary day(s)
Mondstille: 1 intercalary day(s)

Expected year length: 400 days
Actual year length: 400 days
Total intercalary days: 6
✅ WFRP YEAR LENGTH: Correctly includes all regular and intercalary days

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/fantasy-pack/test/week-advancement-fixes.test.ts" timestamp="2025-07-10T02:12:14.372Z" hostname="Davids-Mac-mini.local" tests="9" failures="0" errors="0" skipped="0" time="0.082401333">
        <testcase classname="packages/fantasy-pack/test/week-advancement-fixes.test.ts" name="Week Advancement Fixes (Phase 2) &gt; WFRP Calendar - 8-Day Week Advancement &gt; should advance 8 days for +1 week" time="0.014787125">
            <system-out>

=== WFRP +1 WEEK TEST ===
Start: 3/10 = Angestag (6)
Week length: 8 days
+1 week: 3/18 = Angestag (6)
Days advanced: 8
✅ WFRP +1 week advances 8 days and returns to same weekday

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/week-advancement-fixes.test.ts" name="Week Advancement Fixes (Phase 2) &gt; WFRP Calendar - 8-Day Week Advancement &gt; should handle multiple weeks correctly" time="0.018086292">
            <system-out>

=== WFRP MULTIPLE WEEKS TEST ===
+2 weeks (16 days): 1/21 = weekday 0
+3 weeks (24 days): 1/29 = weekday 0
+4 weeks (32 days): 2/5 = weekday 0
✅ Multiple WFRP weeks maintain weekday consistency

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/week-advancement-fixes.test.ts" name="Week Advancement Fixes (Phase 2) &gt; WFRP Calendar - 8-Day Week Advancement &gt; should work across intercalary days" time="0.015529458">
            <system-out>

=== WFRP WEEK ADVANCEMENT ACROSS INTERCALARY DAYS ===
Before: 3/10 = weekday 6
+1 week: 3/18 = weekday 6
Days advanced: 8 (no intercalary interference)

Crossing intercalary day test:
Before Mitterfruhl: 2/30 = weekday 1
After crossing: 3/4 = weekday 0
✅ Week advancement works correctly across intercalary days with proper weekday handling

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/week-advancement-fixes.test.ts" name="Week Advancement Fixes (Phase 2) &gt; Gregorian Calendar - 7-Day Week Advancement &gt; should advance 7 days for +1 week" time="0.004154208">
            <system-out>

=== GREGORIAN +1 WEEK TEST ===
Start: 6/15 = Saturday (6)
Week length: 7 days
+1 week: 6/22 = Saturday (6)
✅ Gregorian +1 week advances 7 days and returns to same weekday

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/week-advancement-fixes.test.ts" name="Week Advancement Fixes (Phase 2) &gt; Gregorian Calendar - 7-Day Week Advancement &gt; should handle multiple weeks correctly" time="0.010719083">
            <system-out>

=== GREGORIAN MULTIPLE WEEKS TEST ===
+2 weeks (14 days): 3/24 = weekday 0
+3 weeks (21 days): 3/31 = weekday 0
+4 weeks (28 days): 4/7 = weekday 0
✅ Multiple Gregorian weeks maintain weekday consistency

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/week-advancement-fixes.test.ts" name="Week Advancement Fixes (Phase 2) &gt; Dynamic Week Length API &gt; should use correct week lengths for different calendars" time="0.0006365">
            <system-out>

=== DYNAMIC WEEK LENGTH API TEST ===
WFRP week length: 8 days
Gregorian week length: 7 days
✅ Calendar engines return correct week lengths

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/week-advancement-fixes.test.ts" name="Week Advancement Fixes (Phase 2) &gt; Dynamic Week Length API &gt; should calculate correct day advancement for week operations" time="0.00033525">
            <system-out>

=== WEEK ADVANCEMENT CALCULATION TEST ===
3 WFRP weeks = 24 days
3 Gregorian weeks = 21 days
✅ Week advancement calculations use correct dynamic lengths

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/week-advancement-fixes.test.ts" name="Week Advancement Fixes (Phase 2) &gt; Regression Prevention &gt; should not break standard 7-day week calendars" time="0.003844042">
            <system-out>

=== REGRESSION PREVENTION TEST ===
Start weekday: 1
+7 days weekday: 1
✅ Standard 7-day week functionality preserved

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/week-advancement-fixes.test.ts" name="Week Advancement Fixes (Phase 2) &gt; Regression Prevention &gt; should handle edge cases gracefully" time="0.011496792">
            <system-out>

=== EDGE CASES TEST ===
✅ Edge cases (zero weeks, negative weeks) handled correctly

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/fantasy-pack/test/wfrp-calendar-fixes.test.ts" timestamp="2025-07-10T02:12:14.372Z" hostname="Davids-Mac-mini.local" tests="8" failures="0" errors="0" skipped="0" time="0.080967167">
        <testcase classname="packages/fantasy-pack/test/wfrp-calendar-fixes.test.ts" name="WFRP Calendar Bug Fixes (Issue #21) &gt; Fix 1: Date Arithmetic (Critical Bug) &gt; should handle intercalary days without creating invalid dates" time="0.011489375">
            <system-out>

=== FIX 1: DATE ARITHMETIC ===
Starting: 2522/2/33
+1 day: 2522/2/1 (intercalary: Mitterfruhl)
+2 days: 2522/3/1
✅ No more invalid dates created by addDays()

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/wfrp-calendar-fixes.test.ts" name="WFRP Calendar Bug Fixes (Issue #21) &gt; Fix 1: Date Arithmetic (Critical Bug) &gt; should handle all 6 WFRP intercalary days correctly" time="0.019482583">
            <system-out>

=== TESTING ALL 6 INTERCALARY DAYS ===
1. Vorhexen → Hexenstag
   Last day: 12/33
   +1 day: 12/1 (Hexenstag)
2. Jahrdrung → Mitterfruhl
   Last day: 2/33
   +1 day: 2/1 (Mitterfruhl)
3. Sommerzeit → Sonnstill
   Last day: 5/33
   +1 day: 5/1 (Sonnstill)
4. Vorgeheim → Geheimnistag
   Last day: 6/33
   +1 day: 6/1 (Geheimnistag)
5. Erntezeit → Mittherbst
   Last day: 8/33
   +1 day: 8/1 (Mittherbst)
6. Ulriczeit → Mondstille
   Last day: 11/33
   +1 day: 11/1 (Mondstille)
✅ All intercalary days handled correctly

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/wfrp-calendar-fixes.test.ts" name="WFRP Calendar Bug Fixes (Issue #21) &gt; Fix 2: Weekday Progression &gt; should respect countsForWeekdays: false for intercalary days" time="0.001736917">
            <system-out>

=== FIX 2: WEEKDAY PROGRESSION ===
33rd Jahrdrung: Bezahltag (4)
1st Pflugzeit: Konistag (5)
Expected: Konistag (5)
Weekday difference: 1
✅ Weekday progression skips intercalary days correctly

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/wfrp-calendar-fixes.test.ts" name="WFRP Calendar Bug Fixes (Issue #21) &gt; Fix 2: Weekday Progression &gt; should handle weekday calculations across multiple intercalary days" time="0.003395417">
            <system-out>

=== WEEKDAY ACROSS MULTIPLE INTERCALARY DAYS ===
Start of year weekday: 4
End of year weekday: 5
Expected end weekday: 5
Regular days in year: 394
✅ Year-long weekday progression handles all intercalary days

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/wfrp-calendar-fixes.test.ts" name="WFRP Calendar Bug Fixes (Issue #21) &gt; Fix 3: Week Length &gt; should use 8-day weeks for WFRP calendar" time="0.014317625">
            <system-out>

=== FIX 3: WEEK LENGTH ===
Start: 3/15 = Backertag (3)
+7 days: 3/22 = Marktag (2)
+8 days: 3/23 = Backertag (3)
✅ 8-day weeks work correctly, 7-day advancement is incorrect

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/wfrp-calendar-fixes.test.ts" name="WFRP Calendar Bug Fixes (Issue #21) &gt; Fix 3: Week Length &gt; should handle multiple weeks correctly" time="0.015125333">
            <system-out>

=== MULTIPLE WEEKS TEST ===
+2 weeks (16 days): 1/26 = weekday 5
+3 weeks (24 days): 2/2 = weekday 5
+4 weeks (32 days): 2/10 = weekday 5
✅ Multiple 8-day weeks maintain weekday consistency

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/wfrp-calendar-fixes.test.ts" name="WFRP Calendar Bug Fixes (Issue #21) &gt; Regression Prevention &gt; should maintain backward compatibility for calendars without countsForWeekdays" time="0.004965042">
            <system-out>

=== BACKWARD COMPATIBILITY TEST ===
Without countsForWeekdays setting:
  Start weekday: 0
  Next weekday: 2
  Difference: 2 (should be 2 for backward compatibility)
✅ Backward compatibility maintained

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/wfrp-calendar-fixes.test.ts" name="WFRP Calendar Bug Fixes (Issue #21) &gt; Regression Prevention &gt; should not break existing calendar functionality" time="0.008394625">
            <system-out>

=== CALENDAR FUNCTIONALITY TEST ===
Original: 2522/6/15
+5 days: 2522/6/20
+2 months: 2522/8/15
+1 year: 2523/6/15
✅ All calendar operations working correctly

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/fantasy-pack/test/wfrp-seasons-fix-verification.test.ts" timestamp="2025-07-10T02:12:14.373Z" hostname="Davids-Mac-mini.local" tests="7" failures="0" errors="0" skipped="0" time="0.0034915">
        <testcase classname="packages/fantasy-pack/test/wfrp-seasons-fix-verification.test.ts" name="WFRP Seasons Fix Verification (Issue #83) &gt; should load WFRP calendar successfully" time="0.000767">
        </testcase>
        <testcase classname="packages/fantasy-pack/test/wfrp-seasons-fix-verification.test.ts" name="WFRP Seasons Fix Verification (Issue #83) &gt; should have seasons property defined" time="0.000173083">
        </testcase>
        <testcase classname="packages/fantasy-pack/test/wfrp-seasons-fix-verification.test.ts" name="WFRP Seasons Fix Verification (Issue #83) &gt; should have exactly 4 seasons" time="0.000683375">
        </testcase>
        <testcase classname="packages/fantasy-pack/test/wfrp-seasons-fix-verification.test.ts" name="WFRP Seasons Fix Verification (Issue #83) &gt; should have properly configured season month ranges" time="0.000134167">
        </testcase>
        <testcase classname="packages/fantasy-pack/test/wfrp-seasons-fix-verification.test.ts" name="WFRP Seasons Fix Verification (Issue #83) &gt; should have valid icons for all seasons" time="0.000104916">
        </testcase>
        <testcase classname="packages/fantasy-pack/test/wfrp-seasons-fix-verification.test.ts" name="WFRP Seasons Fix Verification (Issue #83) &gt; should provide proper season coverage for all months" time="0.000858291">
            <system-out>
Month 1: Winter
Month 2: Spring
Month 3: Spring
Month 4: Spring
Month 5: Summer
Month 6: Summer
Month 7: Summer
Month 8: Autumn
Month 9: Autumn
Month 10: Winter
Month 11: Winter
Month 12: Winter

            </system-out>
        </testcase>
        <testcase classname="packages/fantasy-pack/test/wfrp-seasons-fix-verification.test.ts" name="WFRP Seasons Fix Verification (Issue #83) &gt; should prevent the &quot;No seasons found&quot; warning that caused infinite loop" time="0.000075">
            <system-out>
✅ WFRP calendar now passes season validation
✅ getSeasonInfo() will no longer trigger warning loop

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/scifi-pack/test/star-trek-calendar-comprehensive.test.ts" timestamp="2025-07-10T02:12:14.373Z" hostname="Davids-Mac-mini.local" tests="20" failures="0" errors="0" skipped="0" time="0.12105975">
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-comprehensive.test.ts" name="Star Trek Calendar Comprehensive Tests &gt; Federation Standard Date Formats &gt; should format federation standard date correctly" time="0.007382334">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-comprehensive.test.ts" name="Star Trek Calendar Comprehensive Tests &gt; Federation Standard Date Formats &gt; should format short date correctly" time="0.003483125">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-comprehensive.test.ts" name="Star Trek Calendar Comprehensive Tests &gt; Federation Standard Date Formats &gt; should format long date correctly" time="0.0038285">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-comprehensive.test.ts" name="Star Trek Calendar Comprehensive Tests &gt; Stardate Calculations &gt; should calculate TNG era stardate correctly" time="0.002193541">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-comprehensive.test.ts" name="Star Trek Calendar Comprehensive Tests &gt; Stardate Calculations &gt; should calculate DS9 era stardate correctly" time="0.003574625">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-comprehensive.test.ts" name="Star Trek Calendar Comprehensive Tests &gt; Stardate Calculations &gt; should calculate Voyager era stardate correctly" time="0.0047695">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-comprehensive.test.ts" name="Star Trek Calendar Comprehensive Tests &gt; Stardate Calculations &gt; should calculate Enterprise era stardate correctly" time="0.00889675">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-comprehensive.test.ts" name="Star Trek Calendar Comprehensive Tests &gt; Stardate Calculations &gt; should calculate TOS era stardate correctly" time="0.010357166">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-comprehensive.test.ts" name="Star Trek Calendar Comprehensive Tests &gt; Time Formatting &gt; should format time with padded hours, minutes, and seconds" time="0.007435458">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-comprehensive.test.ts" name="Star Trek Calendar Comprehensive Tests &gt; Time Formatting &gt; should format time with double-digit values" time="0.011007958">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-comprehensive.test.ts" name="Star Trek Calendar Comprehensive Tests &gt; Time Formatting &gt; should handle undefined time gracefully" time="0.007543166">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-comprehensive.test.ts" name="Star Trek Calendar Comprehensive Tests &gt; Combined Formats &gt; should format starfleet command format correctly" time="0.004305084">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-comprehensive.test.ts" name="Star Trek Calendar Comprehensive Tests &gt; Combined Formats &gt; should format diplomatic format correctly" time="0.009578958">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-comprehensive.test.ts" name="Star Trek Calendar Comprehensive Tests &gt; Combined Formats &gt; should format official Federation date correctly" time="0.0065145">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-comprehensive.test.ts" name="Star Trek Calendar Comprehensive Tests &gt; Widget Formats &gt; should format mini widget correctly" time="0.005450292">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-comprehensive.test.ts" name="Star Trek Calendar Comprehensive Tests &gt; Widget Formats &gt; should format main widget correctly" time="0.007049125">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-comprehensive.test.ts" name="Star Trek Calendar Comprehensive Tests &gt; Widget Formats &gt; should format grid widget correctly" time="0.002594833">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-comprehensive.test.ts" name="Star Trek Calendar Comprehensive Tests &gt; Variant Formats &gt; should format command variant short correctly" time="0.004765417">
            <system-out>
[S&amp;S] Invalid template type passed to format(), falling back to basic format

            </system-out>
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-comprehensive.test.ts" name="Star Trek Calendar Comprehensive Tests &gt; Error Handling &gt; should handle invalid format names gracefully" time="0.004736875">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-comprehensive.test.ts" name="Star Trek Calendar Comprehensive Tests &gt; Error Handling &gt; should handle malformed date objects gracefully" time="0.0044075">
            <system-out>
[S&amp;S] Month value 0 outside calendar range (1-12), using start of year fallback

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/scifi-pack/test/star-trek-calendar-formatting.test.ts" timestamp="2025-07-10T02:12:14.374Z" hostname="Davids-Mac-mini.local" tests="6" failures="0" errors="0" skipped="0" time="0.039423917">
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-formatting.test.ts" name="Star Trek Calendar Formatting &gt; Stardate Helper Tests &gt; should fail when using unregistered stardate helper" time="0.019339875">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-formatting.test.ts" name="Star Trek Calendar Formatting &gt; Stardate Helper Tests &gt; should fail when using unregistered dateFmt helper" time="0.003064792">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-formatting.test.ts" name="Star Trek Calendar Formatting &gt; Stardate Helper Tests &gt; should fail when using unregistered time helpers" time="0.003246916">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-formatting.test.ts" name="Star Trek Calendar Formatting &gt; After fixing helper names &gt; should work after fixing to use ss-stardate helper" time="0.00539125">
            <system-out>
Testing stardate format with date: CalendarDate {
  year: [33m2370[39m,
  month: [33m1[39m,
  day: [33m15[39m,
  weekday: [33m0[39m,
  intercalary: [90mundefined[39m,
  time: [90mundefined[39m,
  calendar: {
    id: [32m&apos;gregorian&apos;[39m,
    translations: { en: [36m[Object][39m },
    year: {
      epoch: [33m0[39m,
      currentYear: [33m2024[39m,
      prefix: [32m&apos;&apos;[39m,
      suffix: [32m&apos; CE&apos;[39m,
      startDay: [33m6[39m
    },
    leapYear: { rule: [32m&apos;gregorian&apos;[39m, month: [32m&apos;February&apos;[39m, extraDays: [33m1[39m },
    months: [
      [36m[Object][39m, [36m[Object][39m,
      [36m[Object][39m, [36m[Object][39m,
      [36m[Object][39m, [36m[Object][39m,
      [36m[Object][39m, [36m[Object][39m,
      [36m[Object][39m, [36m[Object][39m,
      [36m[Object][39m, [36m[Object][39m
    ],
    weekdays: [
      [36m[Object][39m, [36m[Object][39m,
      [36m[Object][39m, [36m[Object][39m,
      [36m[Object][39m, [36m[Object][39m,
      [36m[Object][39m
    ],
    intercalary: [],
    seasons: [ [36m[Object][39m, [36m[Object][39m, [36m[Object][39m, [36m[Object][39m ],
    time: { hoursInDay: [33m24[39m, minutesInHour: [33m60[39m, secondsInMinute: [33m60[39m },
    moons: [ [36m[Object][39m ],
    dateFormats: {
      federation: [32m&apos;{{ss-month format=&quot;abbr&quot;}} {{ss-day}}, {{year}}&apos;[39m,
      [32m&apos;tos-stardate&apos;[39m: [32m&apos;{{ss-math year op=&quot;subtract&quot; value=1300}}.{{dayOfYear}}&apos;[39m,
      [32m&apos;tng-stardate&apos;[39m: [32m&apos;{{ss-stardate year prefix=&quot;47&quot; baseYear=2370 dayOfYear=dayOfYear precision=1}}&apos;[39m,
      [32m&apos;ds9-stardate&apos;[39m: [32m&apos;{{ss-stardate year prefix=&quot;52&quot; baseYear=2375 dayOfYear=dayOfYear precision=1}}&apos;[39m,
      [32m&apos;voyager-stardate&apos;[39m: [32m&apos;{{ss-stardate year prefix=&quot;53&quot; baseYear=2376 dayOfYear=dayOfYear precision=1}}&apos;[39m,
      [32m&apos;enterprise-stardate&apos;[39m: [32m&apos;{{ss-stardate year prefix=&quot;0&quot; baseYear=2151 dayOfYear=dayOfYear precision=2}}&apos;[39m,
      starfleet: [32m&apos;Stardate {{ss-dateFmt formatName=&quot;tng-stardate&quot;}}&apos;[39m,
      tos: [32m&apos;Stardate {{ss-dateFmt formatName=&quot;tos-stardate&quot;}}&apos;[39m,
      tng: [32m&apos;Stardate {{ss-dateFmt formatName=&quot;tng-stardate&quot;}}&apos;[39m,
      ds9: [32m&apos;Stardate {{ss-dateFmt formatName=&quot;ds9-stardate&quot;}}&apos;[39m,
      voyager: [32m&apos;Stardate {{ss-dateFmt formatName=&quot;voyager-stardate&quot;}}&apos;[39m,
      enterprise: [32m&apos;Stardate {{ss-dateFmt formatName=&quot;enterprise-stardate&quot;}}&apos;[39m,
      short: [32m&apos;{{ss-month format=&quot;abbr&quot;}} {{ss-day}}&apos;[39m,
      long: [32m&apos;{{ss-weekday format=&quot;name&quot;}}, {{ss-month format=&quot;name&quot;}} {{ss-day format=&quot;ordinal&quot;}}, {{year}}&apos;[39m,
      date: [32m&apos;{{ss-weekday format=&quot;name&quot;}}, {{ss-month format=&quot;name&quot;}} {{ss-day format=&quot;ordinal&quot;}}, {{year}}&apos;[39m,
      time: [32m&apos;{{ss-hour format=&quot;pad&quot;}}:{{ss-minute format=&quot;pad&quot;}}:{{ss-second format=&quot;pad&quot;}} UTC&apos;[39m,
      datetime: [32m&apos;{{ss-dateFmt formatName=&quot;date&quot;}} at {{ss-dateFmt formatName=&quot;time&quot;}}&apos;[39m,
      official: [32m&apos;Federation Standard Date: {{ss-month format=&quot;name&quot;}} {{ss-day format=&quot;ordinal&quot;}}, {{year}}&apos;[39m,
      [32m&apos;command-log&apos;[39m: [32m&apos;{{ss-dateFmt formatName=&quot;tng&quot;}} - {{ss-dateFmt formatName=&quot;federation&quot;}}&apos;[39m,
      diplomatic: [32m&apos;{{ss-dateFmt formatName=&quot;federation&quot;}} ({{ss-dateFmt formatName=&quot;tng-stardate&quot;}})&apos;[39m,
      variants: [36m[Object][39m,
      widgets: [36m[Object][39m
    }
  },
  formatter: DateFormatter {
    templateCache: Map(0) {},
    calendar: {
      id: [32m&apos;gregorian&apos;[39m,
      translations: [36m[Object][39m,
      year: [36m[Object][39m,
      leapYear: [36m[Object][39m,
      months: [36m[Array][39m,
      weekdays: [36m[Array][39m,
      intercalary: [],
      seasons: [36m[Array][39m,
      time: [36m[Object][39m,
      moons: [36m[Array][39m,
      dateFormats: [36m[Object][39m
    }
  }
}
Stardate result: {{ss-weekday format=&quot;name&quot;}}, {{ss-day format=&quot;ordinal&quot;}} {{ss-month format=&quot;name&quot;}}, 2370

            </system-out>
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-formatting.test.ts" name="Star Trek Calendar Formatting &gt; After fixing helper names &gt; should work after fixing to use ss-dateFmt and ss-time helpers" time="0.004932709">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-formatting.test.ts" name="Star Trek Calendar Formatting &gt; After fixing helper names &gt; should format starfleet using ss-dateFmt helper" time="0.002659083">
        </testcase>
    </testsuite>
    <testsuite name="packages/scifi-pack/test/star-trek-calendar-syntax-validation.test.ts" timestamp="2025-07-10T02:12:14.375Z" hostname="Davids-Mac-mini.local" tests="3" failures="0" errors="0" skipped="0" time="0.008581792">
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-syntax-validation.test.ts" name="Star Trek Calendar Syntax Validation &gt; Real Calendar File Format Validation &gt; should use correct parameter syntax in time format (fixed from colon syntax)" time="0.005337375">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-syntax-validation.test.ts" name="Star Trek Calendar Syntax Validation &gt; Real Calendar File Format Validation &gt; should validate that ss-stardate helper calls are properly formed" time="0.000998625">
        </testcase>
        <testcase classname="packages/scifi-pack/test/star-trek-calendar-syntax-validation.test.ts" name="Star Trek Calendar Syntax Validation &gt; Array Bounds in calculateDayOfYear &gt; should fail when accessing months array with invalid indices" time="0.000782417">
            <system-out>
[S&amp;S] Month value 13 outside calendar range (1-12), using start of year fallback

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/scifi-pack/test/star-trek-variant-manual.test.ts" timestamp="2025-07-10T02:12:14.375Z" hostname="Davids-Mac-mini.local" tests="1" failures="0" errors="0" skipped="0" time="0.005425875">
        <testcase classname="packages/scifi-pack/test/star-trek-variant-manual.test.ts" name="Star Trek Variant Manual Test &gt; should manually process Star Trek variant dateFormats" time="0.004841041">
            <system-out>
Federation calendar dateFormats: {
  &quot;federation&quot;: &quot;{{ss-month format=\&quot;abbr\&quot;}} {{ss-day}}, {{year}}&quot;,
  &quot;tos-stardate&quot;: &quot;{{ss-math year op=\&quot;subtract\&quot; value=1300}}.{{dayOfYear}}&quot;,
  &quot;tng-stardate&quot;: &quot;{{ss-stardate year prefix=\&quot;47\&quot; baseYear=2370 dayOfYear=dayOfYear precision=1}}&quot;,
  &quot;ds9-stardate&quot;: &quot;{{ss-stardate year prefix=\&quot;52\&quot; baseYear=2375 dayOfYear=dayOfYear precision=1}}&quot;,
  &quot;voyager-stardate&quot;: &quot;{{ss-stardate year prefix=\&quot;53\&quot; baseYear=2376 dayOfYear=dayOfYear precision=1}}&quot;,
  &quot;enterprise-stardate&quot;: &quot;{{ss-stardate year prefix=\&quot;0\&quot; baseYear=2151 dayOfYear=dayOfYear precision=2}}&quot;,
  &quot;starfleet&quot;: &quot;Stardate {{ss-dateFmt formatName=\&quot;tng-stardate\&quot;}}&quot;,
  &quot;tos&quot;: &quot;Stardate {{ss-dateFmt formatName=\&quot;tos-stardate\&quot;}}&quot;,
  &quot;tng&quot;: &quot;Stardate {{ss-dateFmt formatName=\&quot;tng-stardate\&quot;}}&quot;,
  &quot;ds9&quot;: &quot;Stardate {{ss-dateFmt formatName=\&quot;ds9-stardate\&quot;}}&quot;,
  &quot;voyager&quot;: &quot;Stardate {{ss-dateFmt formatName=\&quot;voyager-stardate\&quot;}}&quot;,
  &quot;enterprise&quot;: &quot;Stardate {{ss-dateFmt formatName=\&quot;enterprise-stardate\&quot;}}&quot;,
  &quot;short&quot;: &quot;{{ss-month format=\&quot;abbr\&quot;}} {{ss-day}}&quot;,
  &quot;long&quot;: &quot;{{ss-weekday format=\&quot;name\&quot;}}, {{ss-month format=\&quot;name\&quot;}} {{ss-day format=\&quot;ordinal\&quot;}}, {{year}}&quot;,
  &quot;date&quot;: &quot;{{ss-weekday format=\&quot;name\&quot;}}, {{ss-month format=\&quot;name\&quot;}} {{ss-day format=\&quot;ordinal\&quot;}}, {{year}}&quot;,
  &quot;time&quot;: &quot;{{ss-hour format=\&quot;pad\&quot;}}:{{ss-minute format=\&quot;pad\&quot;}}:{{ss-second format=\&quot;pad\&quot;}} UTC&quot;,
  &quot;datetime&quot;: &quot;{{ss-dateFmt formatName=\&quot;date\&quot;}} at {{ss-dateFmt formatName=\&quot;time\&quot;}}&quot;,
  &quot;official&quot;: &quot;Federation Standard Date: {{ss-month format=\&quot;name\&quot;}} {{ss-day format=\&quot;ordinal\&quot;}}, {{year}}&quot;,
  &quot;command-log&quot;: &quot;{{ss-dateFmt formatName=\&quot;tng\&quot;}} - {{ss-dateFmt formatName=\&quot;federation\&quot;}}&quot;,
  &quot;diplomatic&quot;: &quot;{{ss-dateFmt formatName=\&quot;federation\&quot;}} ({{ss-dateFmt formatName=\&quot;tng-stardate\&quot;}})&quot;,
  &quot;variants&quot;: {
    &quot;command&quot;: {
      &quot;short&quot;: &quot;SD {{ss-dateFmt formatName=\&quot;tng-stardate\&quot;}}&quot;,
      &quot;long&quot;: &quot;{{ss-dateFmt formatName=\&quot;tng\&quot;}} - {{ss-dateFmt formatName=\&quot;federation\&quot;}}&quot;
    },
    &quot;civilian&quot;: {
      &quot;short&quot;: &quot;{{ss-month format=\&quot;abbr\&quot;}} {{ss-day}}/{{year}}&quot;,
      &quot;long&quot;: &quot;{{ss-dateFmt formatName=\&quot;federation\&quot;}} ({{ss-dateFmt formatName=\&quot;starfleet\&quot;}})&quot;
    },
    &quot;temporal&quot;: {
      &quot;tos&quot;: &quot;TOS Era: {{ss-dateFmt formatName=\&quot;tos\&quot;}}&quot;,
      &quot;tng&quot;: &quot;TNG Era: {{ss-dateFmt formatName=\&quot;tng\&quot;}}&quot;,
      &quot;ds9&quot;: &quot;DS9 Era: {{ss-dateFmt formatName=\&quot;ds9\&quot;}}&quot;,
      &quot;voyager&quot;: &quot;VOY Era: {{ss-dateFmt formatName=\&quot;voyager\&quot;}}&quot;
    }
  },
  &quot;widgets&quot;: {
    &quot;mini&quot;: &quot;SD {{ss-dateFmt formatName=\&quot;tng-stardate\&quot;}}&quot;,
    &quot;main&quot;: &quot;{{ss-weekday format=\&quot;abbr\&quot;}}, {{ss-month format=\&quot;name\&quot;}} {{ss-day format=\&quot;ordinal\&quot;}}&quot;,
    &quot;grid&quot;: &quot;{{ss-day}}&quot;
  }
}

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="packages/core/test/calendars/cross-calendar-consistency.test.ts" timestamp="2025-07-10T02:12:14.375Z" hostname="Davids-Mac-mini.local" tests="2" failures="0" errors="0" skipped="0" time="0.064378083">
        <testcase classname="packages/core/test/calendars/cross-calendar-consistency.test.ts" name="Cross-Calendar Consistency Tests &gt; 📊 Cross-Calendar Consistency Tests &gt; All fantasy calendars should handle basic date operations consistently" time="0.045131917">
            <system-out>

=== CROSS-CALENDAR CONSISTENCY TEST ===

WFRP Calendar:
  Start of year: 2523/1/1
  Weekday: 6 (Angestag)
  WorldTime: 87194880000
  Round-trip: 2523/1/1
  Year length: 400 days
  ✅ Basic operations successful

Dark Sun Calendar:
  Start of year: 103/1/1
  Weekday: 0 (1 Day)
  WorldTime: 3337200000
  Round-trip: 103/1/1
  Year length: 375 days
  ✅ Basic operations successful

Forbidden Lands Calendar:
  Start of year: 1166/1/1
  Weekday: 0 (Sunday)
  WorldTime: 36670233600
  Round-trip: 1166/1/1
  Year length: 364 days
  ✅ Basic operations successful

Exandrian Calendar:
  Start of year: 813/1/1
  Weekday: 2 (Whelsen)
  WorldTime: 23039769600
  Round-trip: 813/1/1
  Year length: 328 days
  ✅ Basic operations successful

✅ CROSS-CALENDAR: All fantasy calendars handle basic operations consistently

            </system-out>
        </testcase>
        <testcase classname="packages/core/test/calendars/cross-calendar-consistency.test.ts" name="Cross-Calendar Consistency Tests &gt; 📊 Cross-Calendar Consistency Tests &gt; Calendar-specific features should not break common functionality" time="0.018571791">
            <system-out>

=== CALENDAR FEATURE ISOLATION TEST ===

WFRP (with intercalary):
  Start: 2523/1/1
  +1 day: 2523/1/2
  +7 days: 2523/1/8
  +30 days: 2523/1/31
  ✅ Date arithmetic works correctly

Dark Sun (with special weekdays):
  Start: 103/1/1
  +1 day: 103/1/2
  +7 days: 103/1/8
  +30 days: 103/2/1
  ✅ Date arithmetic works correctly

Forbidden Lands (with seasons):
  Start: 1166/1/1
  +1 day: 1166/1/2
  +7 days: 1166/1/8
  +30 days: 1166/1/31
  ✅ Date arithmetic works correctly

Exandrian (Critical Role):
  Start: 813/1/1
  +1 day: 813/1/2
  +7 days: 813/1/8
  +30 days: 813/2/2
  ✅ Date arithmetic works correctly

✅ FEATURE ISOLATION: Calendar-specific features do not break common functionality

            </system-out>
        </testcase>
    </testsuite>
</testsuites>
